
ZumoP2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002644  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080027dc  080027dc  000037dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027ec  080027ec  00004014  2**0
                  CONTENTS
  4 .ARM          00000008  080027ec  080027ec  000037ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027f4  080027f4  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027f4  080027f4  000037f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027f8  080027f8  000037f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080027fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000014  08002810  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002810  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085d2  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001564  00000000  00000000  0000c616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0000db80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077a  00000000  00000000  0000e530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001518d  00000000  00000000  0000ecaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2e7  00000000  00000000  00023e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087fa7  00000000  00000000  0002e11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b60c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002870  00000000  00000000  000b6108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b8978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080027c4 	.word	0x080027c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080027c4 	.word	0x080027c4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <stop>:
uint32_t * tim4_ccr1 = (uint32_t *)(TIM4_ADDR + TIM_CCR1_OFFSET); // pointer to left motor CCR

/*
 * Stops Zumo by setting motor speeds to zero
 */
void stop(){
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	  *tim3_ccr2 &= ~CCR_MASK;
 80004cc:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <stop+0x48>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000510 <stop+0x48>)
 80004d4:	6812      	ldr	r2, [r2, #0]
 80004d6:	0c1b      	lsrs	r3, r3, #16
 80004d8:	041b      	lsls	r3, r3, #16
 80004da:	6013      	str	r3, [r2, #0]
	  *tim3_ccr2 |= 0; // sets right motor speed
 80004dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <stop+0x48>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000510 <stop+0x48>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	6812      	ldr	r2, [r2, #0]
 80004e6:	601a      	str	r2, [r3, #0]
	  *tim4_ccr1 &= ~CCR_MASK;
 80004e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <stop+0x4c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a09      	ldr	r2, [pc, #36]	@ (8000514 <stop+0x4c>)
 80004f0:	6812      	ldr	r2, [r2, #0]
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	041b      	lsls	r3, r3, #16
 80004f6:	6013      	str	r3, [r2, #0]
	  *tim4_ccr1 |= 0; // sets left motor speed
 80004f8:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <stop+0x4c>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <stop+0x4c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6812      	ldr	r2, [r2, #0]
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000000 	.word	0x20000000
 8000514:	20000004 	.word	0x20000004

08000518 <spin_ccw>:

/*
 * Spins Zumo in place counter-clockwise
 * Arguments: bpm - Determines the angular velocity of the Zumo
 */
void spin_ccw(int bpm) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  *tim3_ccr2 &= ~CCR_MASK;
 8000520:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <spin_ccw+0x68>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a16      	ldr	r2, [pc, #88]	@ (8000580 <spin_ccw+0x68>)
 8000528:	6812      	ldr	r2, [r2, #0]
 800052a:	0c1b      	lsrs	r3, r3, #16
 800052c:	041b      	lsls	r3, r3, #16
 800052e:	6013      	str	r3, [r2, #0]
  *tim3_ccr2 |= bpm; // sets right motor speed
 8000530:	4b13      	ldr	r3, [pc, #76]	@ (8000580 <spin_ccw+0x68>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	6819      	ldr	r1, [r3, #0]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <spin_ccw+0x68>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	430a      	orrs	r2, r1
 800053e:	601a      	str	r2, [r3, #0]
  *tim4_ccr1 &= ~CCR_MASK;
 8000540:	4b10      	ldr	r3, [pc, #64]	@ (8000584 <spin_ccw+0x6c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a0f      	ldr	r2, [pc, #60]	@ (8000584 <spin_ccw+0x6c>)
 8000548:	6812      	ldr	r2, [r2, #0]
 800054a:	0c1b      	lsrs	r3, r3, #16
 800054c:	041b      	lsls	r3, r3, #16
 800054e:	6013      	str	r3, [r2, #0]
  *tim4_ccr1 |= bpm; // sets left motor speed
 8000550:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <spin_ccw+0x6c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	6819      	ldr	r1, [r3, #0]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <spin_ccw+0x6c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	430a      	orrs	r2, r1
 800055e:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // sets right motor direction
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000566:	4808      	ldr	r0, [pc, #32]	@ (8000588 <spin_ccw+0x70>)
 8000568:	f000 fe5a 	bl	8001220 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1); // sets left motor direction
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000572:	4805      	ldr	r0, [pc, #20]	@ (8000588 <spin_ccw+0x70>)
 8000574:	f000 fe54 	bl	8001220 <HAL_GPIO_WritePin>
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000000 	.word	0x20000000
 8000584:	20000004 	.word	0x20000004
 8000588:	40020000 	.word	0x40020000

0800058c <discrete_spin_ccw>:
 * Discretely spins Zumo in place counter clockwise for a given number of seconds
 * Arguments:
 * 		bpm - Determines the angular velocity of the Zumo while spinning
 * 		seconds - How long to spin for
 */
void discrete_spin_ccw(int bpm, int seconds) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 2 * seconds; i++) {
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	e00e      	b.n	80005ba <discrete_spin_ccw+0x2e>
		spin_ccw(bpm);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f7ff ffbb 	bl	8000518 <spin_ccw>
		HAL_Delay(400); // delay for 0.4 seconds
 80005a2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80005a6:	f000 fbad 	bl	8000d04 <HAL_Delay>
		stop();
 80005aa:	f7ff ff8d 	bl	80004c8 <stop>
		HAL_Delay(100); // delay for 0.1 seconds
 80005ae:	2064      	movs	r0, #100	@ 0x64
 80005b0:	f000 fba8 	bl	8000d04 <HAL_Delay>
	for (int i = 0; i < 2 * seconds; i++) {
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3301      	adds	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	dbeb      	blt.n	800059c <discrete_spin_ccw+0x10>
	}
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fb24 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f818 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f96c 	bl	80008b8 <MX_GPIO_Init>
  MX_TIM3_Init();
 80005e0:	f000 f87e 	bl	80006e0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005e4:	f000 f8f2 	bl	80007cc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // starts right motor PWM timer
 80005e8:	2104      	movs	r1, #4
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <main+0x34>)
 80005ec:	f001 fb3e 	bl	8001c6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // starts left motor PWM timer
 80005f0:	2100      	movs	r1, #0
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <main+0x38>)
 80005f4:	f001 fb3a 	bl	8001c6c <HAL_TIM_PWM_Start>

  discrete_spin_ccw(100, 10);
 80005f8:	210a      	movs	r1, #10
 80005fa:	2064      	movs	r0, #100	@ 0x64
 80005fc:	f7ff ffc6 	bl	800058c <discrete_spin_ccw>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <main+0x30>
 8000604:	20000030 	.word	0x20000030
 8000608:	20000078 	.word	0x20000078

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	@ 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 f8a6 	bl	800276c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	@ (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800067c:	2310      	movs	r3, #16
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000680:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000684:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000686:	2304      	movs	r3, #4
 8000688:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068a:	2304      	movs	r3, #4
 800068c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fdde 	bl	8001254 <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069e:	f000 f98b 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2302      	movs	r3, #2
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2102      	movs	r1, #2
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f840 	bl	8001744 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 f975 	bl	80009b8 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	@ 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08e      	sub	sp, #56	@ 0x38
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	615a      	str	r2, [r3, #20]
 800070e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000710:	4b2c      	ldr	r3, [pc, #176]	@ (80007c4 <MX_TIM3_Init+0xe4>)
 8000712:	4a2d      	ldr	r2, [pc, #180]	@ (80007c8 <MX_TIM3_Init+0xe8>)
 8000714:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 8000716:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <MX_TIM3_Init+0xe4>)
 8000718:	2214      	movs	r2, #20
 800071a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071c:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_TIM3_Init+0xe4>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8000722:	4b28      	ldr	r3, [pc, #160]	@ (80007c4 <MX_TIM3_Init+0xe4>)
 8000724:	22c7      	movs	r2, #199	@ 0xc7
 8000726:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000728:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_TIM3_Init+0xe4>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072e:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <MX_TIM3_Init+0xe4>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000734:	4823      	ldr	r0, [pc, #140]	@ (80007c4 <MX_TIM3_Init+0xe4>)
 8000736:	f001 f9f1 	bl	8001b1c <HAL_TIM_Base_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000740:	f000 f93a 	bl	80009b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800074a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800074e:	4619      	mov	r1, r3
 8000750:	481c      	ldr	r0, [pc, #112]	@ (80007c4 <MX_TIM3_Init+0xe4>)
 8000752:	f001 fbfd 	bl	8001f50 <HAL_TIM_ConfigClockSource>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800075c:	f000 f92c 	bl	80009b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000760:	4818      	ldr	r0, [pc, #96]	@ (80007c4 <MX_TIM3_Init+0xe4>)
 8000762:	f001 fa2a 	bl	8001bba <HAL_TIM_PWM_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800076c:	f000 f924 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4619      	mov	r1, r3
 800077e:	4811      	ldr	r0, [pc, #68]	@ (80007c4 <MX_TIM3_Init+0xe4>)
 8000780:	f001 ff86 	bl	8002690 <HAL_TIMEx_MasterConfigSynchronization>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800078a:	f000 f915 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078e:	2360      	movs	r3, #96	@ 0x60
 8000790:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2204      	movs	r2, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4807      	ldr	r0, [pc, #28]	@ (80007c4 <MX_TIM3_Init+0xe4>)
 80007a6:	f001 fb11 	bl	8001dcc <HAL_TIM_PWM_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80007b0:	f000 f902 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007b4:	4803      	ldr	r0, [pc, #12]	@ (80007c4 <MX_TIM3_Init+0xe4>)
 80007b6:	f000 f965 	bl	8000a84 <HAL_TIM_MspPostInit>

}
 80007ba:	bf00      	nop
 80007bc:	3738      	adds	r7, #56	@ 0x38
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000030 	.word	0x20000030
 80007c8:	40000400 	.word	0x40000400

080007cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08e      	sub	sp, #56	@ 0x38
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
 80007f8:	615a      	str	r2, [r3, #20]
 80007fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007fc:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <MX_TIM4_Init+0xe4>)
 80007fe:	4a2d      	ldr	r2, [pc, #180]	@ (80008b4 <MX_TIM4_Init+0xe8>)
 8000800:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 20;
 8000802:	4b2b      	ldr	r3, [pc, #172]	@ (80008b0 <MX_TIM4_Init+0xe4>)
 8000804:	2214      	movs	r2, #20
 8000806:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <MX_TIM4_Init+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 800080e:	4b28      	ldr	r3, [pc, #160]	@ (80008b0 <MX_TIM4_Init+0xe4>)
 8000810:	22c7      	movs	r2, #199	@ 0xc7
 8000812:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <MX_TIM4_Init+0xe4>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b25      	ldr	r3, [pc, #148]	@ (80008b0 <MX_TIM4_Init+0xe4>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000820:	4823      	ldr	r0, [pc, #140]	@ (80008b0 <MX_TIM4_Init+0xe4>)
 8000822:	f001 f97b 	bl	8001b1c <HAL_TIM_Base_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800082c:	f000 f8c4 	bl	80009b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000830:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000836:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800083a:	4619      	mov	r1, r3
 800083c:	481c      	ldr	r0, [pc, #112]	@ (80008b0 <MX_TIM4_Init+0xe4>)
 800083e:	f001 fb87 	bl	8001f50 <HAL_TIM_ConfigClockSource>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000848:	f000 f8b6 	bl	80009b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800084c:	4818      	ldr	r0, [pc, #96]	@ (80008b0 <MX_TIM4_Init+0xe4>)
 800084e:	f001 f9b4 	bl	8001bba <HAL_TIM_PWM_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000858:	f000 f8ae 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	4619      	mov	r1, r3
 800086a:	4811      	ldr	r0, [pc, #68]	@ (80008b0 <MX_TIM4_Init+0xe4>)
 800086c:	f001 ff10 	bl	8002690 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000876:	f000 f89f 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087a:	2360      	movs	r3, #96	@ 0x60
 800087c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	4619      	mov	r1, r3
 8000890:	4807      	ldr	r0, [pc, #28]	@ (80008b0 <MX_TIM4_Init+0xe4>)
 8000892:	f001 fa9b 	bl	8001dcc <HAL_TIM_PWM_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800089c:	f000 f88c 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008a0:	4803      	ldr	r0, [pc, #12]	@ (80008b0 <MX_TIM4_Init+0xe4>)
 80008a2:	f000 f8ef 	bl	8000a84 <HAL_TIM_MspPostInit>

}
 80008a6:	bf00      	nop
 80008a8:	3738      	adds	r7, #56	@ 0x38
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000078 	.word	0x20000078
 80008b4:	40000800 	.word	0x40000800

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b36      	ldr	r3, [pc, #216]	@ (80009ac <MX_GPIO_Init+0xf4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a35      	ldr	r2, [pc, #212]	@ (80009ac <MX_GPIO_Init+0xf4>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b33      	ldr	r3, [pc, #204]	@ (80009ac <MX_GPIO_Init+0xf4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b2f      	ldr	r3, [pc, #188]	@ (80009ac <MX_GPIO_Init+0xf4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a2e      	ldr	r2, [pc, #184]	@ (80009ac <MX_GPIO_Init+0xf4>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b2c      	ldr	r3, [pc, #176]	@ (80009ac <MX_GPIO_Init+0xf4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b28      	ldr	r3, [pc, #160]	@ (80009ac <MX_GPIO_Init+0xf4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a27      	ldr	r2, [pc, #156]	@ (80009ac <MX_GPIO_Init+0xf4>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <MX_GPIO_Init+0xf4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <MX_GPIO_Init+0xf4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a20      	ldr	r2, [pc, #128]	@ (80009ac <MX_GPIO_Init+0xf4>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <MX_GPIO_Init+0xf4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000944:	481a      	ldr	r0, [pc, #104]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 8000946:	f000 fc6b 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000950:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4814      	ldr	r0, [pc, #80]	@ (80009b4 <MX_GPIO_Init+0xfc>)
 8000962:	f000 fad9 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000966:	230c      	movs	r3, #12
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000976:	2307      	movs	r3, #7
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 8000982:	f000 fac9 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000986:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <MX_GPIO_Init+0xf8>)
 80009a0:	f000 faba 	bl	8000f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	@ 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020800 	.word	0x40020800

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <Error_Handler+0x8>

080009c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a02:	2007      	movs	r0, #7
 8000a04:	f000 fa54 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a15      	ldr	r2, [pc, #84]	@ (8000a78 <HAL_TIM_Base_MspInit+0x64>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d10e      	bne.n	8000a44 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_TIM_Base_MspInit+0x68>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	4a13      	ldr	r2, [pc, #76]	@ (8000a7c <HAL_TIM_Base_MspInit+0x68>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <HAL_TIM_Base_MspInit+0x68>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a42:	e012      	b.n	8000a6a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0d      	ldr	r2, [pc, #52]	@ (8000a80 <HAL_TIM_Base_MspInit+0x6c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d10d      	bne.n	8000a6a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <HAL_TIM_Base_MspInit+0x68>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	4a09      	ldr	r2, [pc, #36]	@ (8000a7c <HAL_TIM_Base_MspInit+0x68>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5e:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <HAL_TIM_Base_MspInit+0x68>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
}
 8000a6a:	bf00      	nop
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40000400 	.word	0x40000400
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40000800 	.word	0x40000800

08000a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a24      	ldr	r2, [pc, #144]	@ (8000b34 <HAL_TIM_MspPostInit+0xb0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d11e      	bne.n	8000ae4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b23      	ldr	r3, [pc, #140]	@ (8000b38 <HAL_TIM_MspPostInit+0xb4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a22      	ldr	r2, [pc, #136]	@ (8000b38 <HAL_TIM_MspPostInit+0xb4>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b20      	ldr	r3, [pc, #128]	@ (8000b38 <HAL_TIM_MspPostInit+0xb4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ac2:	2380      	movs	r3, #128	@ 0x80
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4817      	ldr	r0, [pc, #92]	@ (8000b3c <HAL_TIM_MspPostInit+0xb8>)
 8000ade:	f000 fa1b 	bl	8000f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ae2:	e022      	b.n	8000b2a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a15      	ldr	r2, [pc, #84]	@ (8000b40 <HAL_TIM_MspPostInit+0xbc>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d11d      	bne.n	8000b2a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <HAL_TIM_MspPostInit+0xb4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a10      	ldr	r2, [pc, #64]	@ (8000b38 <HAL_TIM_MspPostInit+0xb4>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <HAL_TIM_MspPostInit+0xb4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b0a:	2340      	movs	r3, #64	@ 0x40
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4807      	ldr	r0, [pc, #28]	@ (8000b44 <HAL_TIM_MspPostInit+0xc0>)
 8000b26:	f000 f9f7 	bl	8000f18 <HAL_GPIO_Init>
}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	@ 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40000400 	.word	0x40000400
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40000800 	.word	0x40000800
 8000b44:	40020400 	.word	0x40020400

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <NMI_Handler+0x4>

08000b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <MemManage_Handler+0x4>

08000b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9e:	f000 f891 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <SystemInit+0x20>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb2:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <SystemInit+0x20>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bd0:	f7ff ffea 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	@ (8000c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f001 fdbf 	bl	800277c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fce7 	bl	80005d0 <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c10:	080027fc 	.word	0x080027fc
  ldr r2, =_sbss
 8000c14:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c18:	200000c4 	.word	0x200000c4

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c24:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0d      	ldr	r2, [pc, #52]	@ (8000c60 <HAL_Init+0x40>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <HAL_Init+0x40>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <HAL_Init+0x40>)
 8000c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f931 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f808 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff feb6 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023c00 	.word	0x40023c00

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f93b 	bl	8000efe <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 f911 	bl	8000ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	@ (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000010 	.word	0x20000010
 8000cc0:	2000000c 	.word	0x2000000c

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000010 	.word	0x20000010
 8000ce8:	200000c0 	.word	0x200000c0

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200000c0 	.word	0x200000c0

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff ffee 	bl	8000cec <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_Delay+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffde 	bl	8000cec <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000010 	.word	0x20000010

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	@ (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	@ (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	@ 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff8e 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff47 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff5c 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff8e 	bl	8000e04 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5d 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffb0 	bl	8000e6c <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e159      	b.n	80011e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8148 	bne.w	80011e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d005      	beq.n	8000f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d130      	bne.n	8000fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	f003 0201 	and.w	r2, r3, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d017      	beq.n	8001008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d123      	bne.n	800105c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	69b9      	ldr	r1, [r7, #24]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80a2 	beq.w	80011e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b57      	ldr	r3, [pc, #348]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	4a56      	ldr	r2, [pc, #344]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ae:	4b54      	ldr	r3, [pc, #336]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ba:	4a52      	ldr	r2, [pc, #328]	@ (8001204 <HAL_GPIO_Init+0x2ec>)
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a49      	ldr	r2, [pc, #292]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x202>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a48      	ldr	r2, [pc, #288]	@ (800120c <HAL_GPIO_Init+0x2f4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x1fe>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a47      	ldr	r2, [pc, #284]	@ (8001210 <HAL_GPIO_Init+0x2f8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x1fa>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a46      	ldr	r2, [pc, #280]	@ (8001214 <HAL_GPIO_Init+0x2fc>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x1f6>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a45      	ldr	r2, [pc, #276]	@ (8001218 <HAL_GPIO_Init+0x300>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x1f2>
 8001106:	2304      	movs	r3, #4
 8001108:	e008      	b.n	800111c <HAL_GPIO_Init+0x204>
 800110a:	2307      	movs	r3, #7
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x204>
 800110e:	2303      	movs	r3, #3
 8001110:	e004      	b.n	800111c <HAL_GPIO_Init+0x204>
 8001112:	2302      	movs	r3, #2
 8001114:	e002      	b.n	800111c <HAL_GPIO_Init+0x204>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <HAL_GPIO_Init+0x204>
 800111a:	2300      	movs	r3, #0
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	f002 0203 	and.w	r2, r2, #3
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	4093      	lsls	r3, r2
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800112c:	4935      	ldr	r1, [pc, #212]	@ (8001204 <HAL_GPIO_Init+0x2ec>)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113a:	4b38      	ldr	r3, [pc, #224]	@ (800121c <HAL_GPIO_Init+0x304>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115e:	4a2f      	ldr	r2, [pc, #188]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001164:	4b2d      	ldr	r3, [pc, #180]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001188:	4a24      	ldr	r2, [pc, #144]	@ (800121c <HAL_GPIO_Init+0x304>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800118e:	4b23      	ldr	r3, [pc, #140]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b2:	4a1a      	ldr	r2, [pc, #104]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011dc:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	f67f aea2 	bls.w	8000f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40013800 	.word	0x40013800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020400 	.word	0x40020400
 8001210:	40020800 	.word	0x40020800
 8001214:	40020c00 	.word	0x40020c00
 8001218:	40021000 	.word	0x40021000
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e267      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d075      	beq.n	800135e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001272:	4b88      	ldr	r3, [pc, #544]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b04      	cmp	r3, #4
 800127c:	d00c      	beq.n	8001298 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127e:	4b85      	ldr	r3, [pc, #532]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001286:	2b08      	cmp	r3, #8
 8001288:	d112      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128a:	4b82      	ldr	r3, [pc, #520]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001292:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001296:	d10b      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	4b7e      	ldr	r3, [pc, #504]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d05b      	beq.n	800135c <HAL_RCC_OscConfig+0x108>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d157      	bne.n	800135c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e242      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b8:	d106      	bne.n	80012c8 <HAL_RCC_OscConfig+0x74>
 80012ba:	4b76      	ldr	r3, [pc, #472]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a75      	ldr	r2, [pc, #468]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e01d      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x98>
 80012d2:	4b70      	ldr	r3, [pc, #448]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b6d      	ldr	r3, [pc, #436]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e00b      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012ec:	4b69      	ldr	r3, [pc, #420]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a68      	ldr	r2, [pc, #416]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b66      	ldr	r3, [pc, #408]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a65      	ldr	r2, [pc, #404]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d013      	beq.n	8001334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fcee 	bl	8000cec <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fcea 	bl	8000cec <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	@ 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e207      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4b5b      	ldr	r3, [pc, #364]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0xc0>
 8001332:	e014      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fcda 	bl	8000cec <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fcd6 	bl	8000cec <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	@ 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e1f3      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	4b51      	ldr	r3, [pc, #324]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0xe8>
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d063      	beq.n	8001432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800136a:	4b4a      	ldr	r3, [pc, #296]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001376:	4b47      	ldr	r3, [pc, #284]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800137e:	2b08      	cmp	r3, #8
 8001380:	d11c      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001382:	4b44      	ldr	r3, [pc, #272]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d116      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	4b41      	ldr	r3, [pc, #260]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d001      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e1c7      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4937      	ldr	r1, [pc, #220]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	e03a      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c4:	4b34      	ldr	r3, [pc, #208]	@ (8001498 <HAL_RCC_OscConfig+0x244>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fc8f 	bl	8000cec <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fc8b 	bl	8000cec <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1a8      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b28      	ldr	r3, [pc, #160]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4925      	ldr	r1, [pc, #148]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
 8001404:	e015      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001406:	4b24      	ldr	r3, [pc, #144]	@ (8001498 <HAL_RCC_OscConfig+0x244>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fc6e 	bl	8000cec <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001414:	f7ff fc6a 	bl	8000cec <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e187      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d036      	beq.n	80014ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d016      	beq.n	8001474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <HAL_RCC_OscConfig+0x248>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff fc4e 	bl	8000cec <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001454:	f7ff fc4a 	bl	8000cec <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e167      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <HAL_RCC_OscConfig+0x240>)
 8001468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x200>
 8001472:	e01b      	b.n	80014ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_RCC_OscConfig+0x248>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fc37 	bl	8000cec <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	e00e      	b.n	80014a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff fc33 	bl	8000cec <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d907      	bls.n	80014a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e150      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 8001494:	40023800 	.word	0x40023800
 8001498:	42470000 	.word	0x42470000
 800149c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b88      	ldr	r3, [pc, #544]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ea      	bne.n	8001482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8097 	beq.w	80015e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b81      	ldr	r3, [pc, #516]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10f      	bne.n	80014ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b7d      	ldr	r3, [pc, #500]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	4a7c      	ldr	r2, [pc, #496]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014da:	4b7a      	ldr	r3, [pc, #488]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ea:	4b77      	ldr	r3, [pc, #476]	@ (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d118      	bne.n	8001528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f6:	4b74      	ldr	r3, [pc, #464]	@ (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a73      	ldr	r2, [pc, #460]	@ (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001502:	f7ff fbf3 	bl	8000cec <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150a:	f7ff fbef 	bl	8000cec <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e10c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	4b6a      	ldr	r3, [pc, #424]	@ (80016c8 <HAL_RCC_OscConfig+0x474>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x2ea>
 8001530:	4b64      	ldr	r3, [pc, #400]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001534:	4a63      	ldr	r2, [pc, #396]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6713      	str	r3, [r2, #112]	@ 0x70
 800153c:	e01c      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x30c>
 8001546:	4b5f      	ldr	r3, [pc, #380]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154a:	4a5e      	ldr	r2, [pc, #376]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6713      	str	r3, [r2, #112]	@ 0x70
 8001552:	4b5c      	ldr	r3, [pc, #368]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001556:	4a5b      	ldr	r2, [pc, #364]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6713      	str	r3, [r2, #112]	@ 0x70
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 8001560:	4b58      	ldr	r3, [pc, #352]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001564:	4a57      	ldr	r2, [pc, #348]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	@ 0x70
 800156c:	4b55      	ldr	r3, [pc, #340]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001570:	4a54      	ldr	r2, [pc, #336]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001572:	f023 0304 	bic.w	r3, r3, #4
 8001576:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d015      	beq.n	80015ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fbb4 	bl	8000cec <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7ff fbb0 	bl	8000cec <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0cb      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159e:	4b49      	ldr	r3, [pc, #292]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0ee      	beq.n	8001588 <HAL_RCC_OscConfig+0x334>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fb9e 	bl	8000cec <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff fb9a 	bl	8000cec <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0b5      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ca:	4b3e      	ldr	r3, [pc, #248]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ee      	bne.n	80015b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015dc:	4b39      	ldr	r3, [pc, #228]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e0:	4a38      	ldr	r2, [pc, #224]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a1 	beq.w	8001734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f2:	4b34      	ldr	r3, [pc, #208]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d05c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d141      	bne.n	800168a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b31      	ldr	r3, [pc, #196]	@ (80016cc <HAL_RCC_OscConfig+0x478>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fb6e 	bl	8000cec <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fb6a 	bl	8000cec <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e087      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001640:	019b      	lsls	r3, r3, #6
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	3b01      	subs	r3, #1
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001654:	061b      	lsls	r3, r3, #24
 8001656:	491b      	ldr	r1, [pc, #108]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <HAL_RCC_OscConfig+0x478>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fb43 	bl	8000cec <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fb3f 	bl	8000cec <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e05c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x416>
 8001688:	e054      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <HAL_RCC_OscConfig+0x478>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fb2c 	bl	8000cec <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fb28 	bl	8000cec <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e045      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_RCC_OscConfig+0x470>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x444>
 80016b6:	e03d      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e038      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000
 80016cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <HAL_RCC_OscConfig+0x4ec>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d028      	beq.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d121      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d11a      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001700:	4013      	ands	r3, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001708:	4293      	cmp	r3, r2
 800170a:	d111      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	3b01      	subs	r3, #1
 800171a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0cc      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b68      	ldr	r3, [pc, #416]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d90c      	bls.n	8001780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b65      	ldr	r3, [pc, #404]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b63      	ldr	r3, [pc, #396]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001798:	4b59      	ldr	r3, [pc, #356]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a58      	ldr	r2, [pc, #352]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4b53      	ldr	r3, [pc, #332]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a52      	ldr	r2, [pc, #328]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4b50      	ldr	r3, [pc, #320]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	494d      	ldr	r1, [pc, #308]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d044      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b47      	ldr	r3, [pc, #284]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d119      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e07f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b3f      	ldr	r3, [pc, #252]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3b      	ldr	r3, [pc, #236]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e067      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4b37      	ldr	r3, [pc, #220]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 0203 	bic.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4934      	ldr	r1, [pc, #208]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff fa5a 	bl	8000cec <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff fa56 	bl	8000cec <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e04f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b25      	ldr	r3, [pc, #148]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20c      	bcs.n	800188c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b22      	ldr	r3, [pc, #136]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e032      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4916      	ldr	r1, [pc, #88]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	490e      	ldr	r1, [pc, #56]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 f821 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	490a      	ldr	r1, [pc, #40]	@ (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	@ (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f9ba 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00
 8001900:	40023800 	.word	0x40023800
 8001904:	080027dc 	.word	0x080027dc
 8001908:	20000008 	.word	0x20000008
 800190c:	2000000c 	.word	0x2000000c

08001910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001914:	b094      	sub	sp, #80	@ 0x50
 8001916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001928:	4b79      	ldr	r3, [pc, #484]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d00d      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x40>
 8001934:	2b08      	cmp	r3, #8
 8001936:	f200 80e1 	bhi.w	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x34>
 800193e:	2b04      	cmp	r3, #4
 8001940:	d003      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x3a>
 8001942:	e0db      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b73      	ldr	r3, [pc, #460]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001948:	e0db      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800194a:	4b73      	ldr	r3, [pc, #460]	@ (8001b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800194c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800194e:	e0d8      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001950:	4b6f      	ldr	r3, [pc, #444]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001958:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	4b6a      	ldr	r3, [pc, #424]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	2200      	movs	r2, #0
 800196e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001970:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001978:	633b      	str	r3, [r7, #48]	@ 0x30
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	@ 0x34
 800197e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001982:	4622      	mov	r2, r4
 8001984:	462b      	mov	r3, r5
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0159      	lsls	r1, r3, #5
 8001990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001994:	0150      	lsls	r0, r2, #5
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4621      	mov	r1, r4
 800199c:	1a51      	subs	r1, r2, r1
 800199e:	6139      	str	r1, [r7, #16]
 80019a0:	4629      	mov	r1, r5
 80019a2:	eb63 0301 	sbc.w	r3, r3, r1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b4:	4659      	mov	r1, fp
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	4651      	mov	r1, sl
 80019ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019be:	4651      	mov	r1, sl
 80019c0:	018a      	lsls	r2, r1, #6
 80019c2:	4651      	mov	r1, sl
 80019c4:	ebb2 0801 	subs.w	r8, r2, r1
 80019c8:	4659      	mov	r1, fp
 80019ca:	eb63 0901 	sbc.w	r9, r3, r1
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019e2:	4690      	mov	r8, r2
 80019e4:	4699      	mov	r9, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	eb18 0303 	adds.w	r3, r8, r3
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	462b      	mov	r3, r5
 80019f0:	eb49 0303 	adc.w	r3, r9, r3
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a02:	4629      	mov	r1, r5
 8001a04:	024b      	lsls	r3, r1, #9
 8001a06:	4621      	mov	r1, r4
 8001a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	024a      	lsls	r2, r1, #9
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a16:	2200      	movs	r2, #0
 8001a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a20:	f7fe fbda 	bl	80001d8 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a2c:	e058      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2e:	4b38      	ldr	r3, [pc, #224]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	2200      	movs	r2, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	4611      	mov	r1, r2
 8001a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a48:	4642      	mov	r2, r8
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	0159      	lsls	r1, r3, #5
 8001a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a5a:	0150      	lsls	r0, r2, #5
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4641      	mov	r1, r8
 8001a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a66:	4649      	mov	r1, r9
 8001a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a80:	ebb2 040a 	subs.w	r4, r2, sl
 8001a84:	eb63 050b 	sbc.w	r5, r3, fp
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	00eb      	lsls	r3, r5, #3
 8001a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a96:	00e2      	lsls	r2, r4, #3
 8001a98:	4614      	mov	r4, r2
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	4643      	mov	r3, r8
 8001a9e:	18e3      	adds	r3, r4, r3
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	eb45 0303 	adc.w	r3, r5, r3
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	028b      	lsls	r3, r1, #10
 8001aba:	4621      	mov	r1, r4
 8001abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	028a      	lsls	r2, r1, #10
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aca:	2200      	movs	r2, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	61fa      	str	r2, [r7, #28]
 8001ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad4:	f7fe fb80 	bl	80001d8 <__aeabi_uldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4613      	mov	r3, r2
 8001ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001af0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001afe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3750      	adds	r7, #80	@ 0x50
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	007a1200 	.word	0x007a1200

08001b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e041      	b.n	8001bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7fe ff66 	bl	8000a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3304      	adds	r3, #4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f000 fac0 	bl	80020e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e041      	b.n	8001c50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d106      	bne.n	8001be6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f839 	bl	8001c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2202      	movs	r2, #2
 8001bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	f000 fa71 	bl	80020e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HAL_TIM_PWM_Start+0x24>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	bf14      	ite	ne
 8001c88:	2301      	movne	r3, #1
 8001c8a:	2300      	moveq	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	e022      	b.n	8001cd6 <HAL_TIM_PWM_Start+0x6a>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d109      	bne.n	8001caa <HAL_TIM_PWM_Start+0x3e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	bf14      	ite	ne
 8001ca2:	2301      	movne	r3, #1
 8001ca4:	2300      	moveq	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	e015      	b.n	8001cd6 <HAL_TIM_PWM_Start+0x6a>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d109      	bne.n	8001cc4 <HAL_TIM_PWM_Start+0x58>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	e008      	b.n	8001cd6 <HAL_TIM_PWM_Start+0x6a>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	bf14      	ite	ne
 8001cd0:	2301      	movne	r3, #1
 8001cd2:	2300      	moveq	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e068      	b.n	8001db0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d104      	bne.n	8001cee <HAL_TIM_PWM_Start+0x82>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cec:	e013      	b.n	8001d16 <HAL_TIM_PWM_Start+0xaa>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d104      	bne.n	8001cfe <HAL_TIM_PWM_Start+0x92>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cfc:	e00b      	b.n	8001d16 <HAL_TIM_PWM_Start+0xaa>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d104      	bne.n	8001d0e <HAL_TIM_PWM_Start+0xa2>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d0c:	e003      	b.n	8001d16 <HAL_TIM_PWM_Start+0xaa>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2202      	movs	r2, #2
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	6839      	ldr	r1, [r7, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fc90 	bl	8002644 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a23      	ldr	r2, [pc, #140]	@ (8001db8 <HAL_TIM_PWM_Start+0x14c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d107      	bne.n	8001d3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1d      	ldr	r2, [pc, #116]	@ (8001db8 <HAL_TIM_PWM_Start+0x14c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d018      	beq.n	8001d7a <HAL_TIM_PWM_Start+0x10e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d50:	d013      	beq.n	8001d7a <HAL_TIM_PWM_Start+0x10e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a19      	ldr	r2, [pc, #100]	@ (8001dbc <HAL_TIM_PWM_Start+0x150>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00e      	beq.n	8001d7a <HAL_TIM_PWM_Start+0x10e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a17      	ldr	r2, [pc, #92]	@ (8001dc0 <HAL_TIM_PWM_Start+0x154>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d009      	beq.n	8001d7a <HAL_TIM_PWM_Start+0x10e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a16      	ldr	r2, [pc, #88]	@ (8001dc4 <HAL_TIM_PWM_Start+0x158>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d004      	beq.n	8001d7a <HAL_TIM_PWM_Start+0x10e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a14      	ldr	r2, [pc, #80]	@ (8001dc8 <HAL_TIM_PWM_Start+0x15c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d111      	bne.n	8001d9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b06      	cmp	r3, #6
 8001d8a:	d010      	beq.n	8001dae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9c:	e007      	b.n	8001dae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	40000400 	.word	0x40000400
 8001dc0:	40000800 	.word	0x40000800
 8001dc4:	40000c00 	.word	0x40000c00
 8001dc8:	40014000 	.word	0x40014000

08001dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e0ae      	b.n	8001f48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0c      	cmp	r3, #12
 8001df6:	f200 809f 	bhi.w	8001f38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8001e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e00:	08001e35 	.word	0x08001e35
 8001e04:	08001f39 	.word	0x08001f39
 8001e08:	08001f39 	.word	0x08001f39
 8001e0c:	08001f39 	.word	0x08001f39
 8001e10:	08001e75 	.word	0x08001e75
 8001e14:	08001f39 	.word	0x08001f39
 8001e18:	08001f39 	.word	0x08001f39
 8001e1c:	08001f39 	.word	0x08001f39
 8001e20:	08001eb7 	.word	0x08001eb7
 8001e24:	08001f39 	.word	0x08001f39
 8001e28:	08001f39 	.word	0x08001f39
 8001e2c:	08001f39 	.word	0x08001f39
 8001e30:	08001ef7 	.word	0x08001ef7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f9dc 	bl	80021f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0208 	orr.w	r2, r2, #8
 8001e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0204 	bic.w	r2, r2, #4
 8001e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6999      	ldr	r1, [r3, #24]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	619a      	str	r2, [r3, #24]
      break;
 8001e72:	e064      	b.n	8001f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fa22 	bl	80022c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6999      	ldr	r1, [r3, #24]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	021a      	lsls	r2, r3, #8
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	619a      	str	r2, [r3, #24]
      break;
 8001eb4:	e043      	b.n	8001f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68b9      	ldr	r1, [r7, #8]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fa6d 	bl	800239c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	69da      	ldr	r2, [r3, #28]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0208 	orr.w	r2, r2, #8
 8001ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0204 	bic.w	r2, r2, #4
 8001ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69d9      	ldr	r1, [r3, #28]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	61da      	str	r2, [r3, #28]
      break;
 8001ef4:	e023      	b.n	8001f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fab7 	bl	8002470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69da      	ldr	r2, [r3, #28]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69da      	ldr	r2, [r3, #28]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69d9      	ldr	r1, [r3, #28]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	021a      	lsls	r2, r3, #8
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	61da      	str	r2, [r3, #28]
      break;
 8001f36:	e002      	b.n	8001f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8001f3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_TIM_ConfigClockSource+0x1c>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e0b4      	b.n	80020d6 <HAL_TIM_ConfigClockSource+0x186>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fa4:	d03e      	beq.n	8002024 <HAL_TIM_ConfigClockSource+0xd4>
 8001fa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001faa:	f200 8087 	bhi.w	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fb2:	f000 8086 	beq.w	80020c2 <HAL_TIM_ConfigClockSource+0x172>
 8001fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fba:	d87f      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fbc:	2b70      	cmp	r3, #112	@ 0x70
 8001fbe:	d01a      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0xa6>
 8001fc0:	2b70      	cmp	r3, #112	@ 0x70
 8001fc2:	d87b      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fc4:	2b60      	cmp	r3, #96	@ 0x60
 8001fc6:	d050      	beq.n	800206a <HAL_TIM_ConfigClockSource+0x11a>
 8001fc8:	2b60      	cmp	r3, #96	@ 0x60
 8001fca:	d877      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fcc:	2b50      	cmp	r3, #80	@ 0x50
 8001fce:	d03c      	beq.n	800204a <HAL_TIM_ConfigClockSource+0xfa>
 8001fd0:	2b50      	cmp	r3, #80	@ 0x50
 8001fd2:	d873      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fd4:	2b40      	cmp	r3, #64	@ 0x40
 8001fd6:	d058      	beq.n	800208a <HAL_TIM_ConfigClockSource+0x13a>
 8001fd8:	2b40      	cmp	r3, #64	@ 0x40
 8001fda:	d86f      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fdc:	2b30      	cmp	r3, #48	@ 0x30
 8001fde:	d064      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0x15a>
 8001fe0:	2b30      	cmp	r3, #48	@ 0x30
 8001fe2:	d86b      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d060      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0x15a>
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d867      	bhi.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d05c      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0x15a>
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d05a      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0x15a>
 8001ff4:	e062      	b.n	80020bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002006:	f000 fafd 	bl	8002604 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	609a      	str	r2, [r3, #8]
      break;
 8002022:	e04f      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002034:	f000 fae6 	bl	8002604 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002046:	609a      	str	r2, [r3, #8]
      break;
 8002048:	e03c      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002056:	461a      	mov	r2, r3
 8002058:	f000 fa5a 	bl	8002510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2150      	movs	r1, #80	@ 0x50
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fab3 	bl	80025ce <TIM_ITRx_SetConfig>
      break;
 8002068:	e02c      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002076:	461a      	mov	r2, r3
 8002078:	f000 fa79 	bl	800256e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2160      	movs	r1, #96	@ 0x60
 8002082:	4618      	mov	r0, r3
 8002084:	f000 faa3 	bl	80025ce <TIM_ITRx_SetConfig>
      break;
 8002088:	e01c      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002096:	461a      	mov	r2, r3
 8002098:	f000 fa3a 	bl	8002510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2140      	movs	r1, #64	@ 0x40
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fa93 	bl	80025ce <TIM_ITRx_SetConfig>
      break;
 80020a8:	e00c      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4619      	mov	r1, r3
 80020b4:	4610      	mov	r0, r2
 80020b6:	f000 fa8a 	bl	80025ce <TIM_ITRx_SetConfig>
      break;
 80020ba:	e003      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
      break;
 80020c0:	e000      	b.n	80020c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3a      	ldr	r2, [pc, #232]	@ (80021dc <TIM_Base_SetConfig+0xfc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00f      	beq.n	8002118 <TIM_Base_SetConfig+0x38>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020fe:	d00b      	beq.n	8002118 <TIM_Base_SetConfig+0x38>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a37      	ldr	r2, [pc, #220]	@ (80021e0 <TIM_Base_SetConfig+0x100>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d007      	beq.n	8002118 <TIM_Base_SetConfig+0x38>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a36      	ldr	r2, [pc, #216]	@ (80021e4 <TIM_Base_SetConfig+0x104>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d003      	beq.n	8002118 <TIM_Base_SetConfig+0x38>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a35      	ldr	r2, [pc, #212]	@ (80021e8 <TIM_Base_SetConfig+0x108>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d108      	bne.n	800212a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800211e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2b      	ldr	r2, [pc, #172]	@ (80021dc <TIM_Base_SetConfig+0xfc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01b      	beq.n	800216a <TIM_Base_SetConfig+0x8a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002138:	d017      	beq.n	800216a <TIM_Base_SetConfig+0x8a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a28      	ldr	r2, [pc, #160]	@ (80021e0 <TIM_Base_SetConfig+0x100>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <TIM_Base_SetConfig+0x8a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a27      	ldr	r2, [pc, #156]	@ (80021e4 <TIM_Base_SetConfig+0x104>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00f      	beq.n	800216a <TIM_Base_SetConfig+0x8a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a26      	ldr	r2, [pc, #152]	@ (80021e8 <TIM_Base_SetConfig+0x108>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00b      	beq.n	800216a <TIM_Base_SetConfig+0x8a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a25      	ldr	r2, [pc, #148]	@ (80021ec <TIM_Base_SetConfig+0x10c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d007      	beq.n	800216a <TIM_Base_SetConfig+0x8a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a24      	ldr	r2, [pc, #144]	@ (80021f0 <TIM_Base_SetConfig+0x110>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d003      	beq.n	800216a <TIM_Base_SetConfig+0x8a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a23      	ldr	r2, [pc, #140]	@ (80021f4 <TIM_Base_SetConfig+0x114>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d108      	bne.n	800217c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0e      	ldr	r2, [pc, #56]	@ (80021dc <TIM_Base_SetConfig+0xfc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d103      	bne.n	80021b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f023 0201 	bic.w	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	611a      	str	r2, [r3, #16]
  }
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40010000 	.word	0x40010000
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40000800 	.word	0x40000800
 80021e8:	40000c00 	.word	0x40000c00
 80021ec:	40014000 	.word	0x40014000
 80021f0:	40014400 	.word	0x40014400
 80021f4:	40014800 	.word	0x40014800

080021f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f023 0201 	bic.w	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0303 	bic.w	r3, r3, #3
 800222e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f023 0302 	bic.w	r3, r3, #2
 8002240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a1c      	ldr	r2, [pc, #112]	@ (80022c0 <TIM_OC1_SetConfig+0xc8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d10c      	bne.n	800226e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f023 0308 	bic.w	r3, r3, #8
 800225a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	4313      	orrs	r3, r2
 8002264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f023 0304 	bic.w	r3, r3, #4
 800226c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a13      	ldr	r2, [pc, #76]	@ (80022c0 <TIM_OC1_SetConfig+0xc8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d111      	bne.n	800229a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800227c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	621a      	str	r2, [r3, #32]
}
 80022b4:	bf00      	nop
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40010000 	.word	0x40010000

080022c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f023 0210 	bic.w	r2, r3, #16
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f023 0320 	bic.w	r3, r3, #32
 800230e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a1e      	ldr	r2, [pc, #120]	@ (8002398 <TIM_OC2_SetConfig+0xd4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d10d      	bne.n	8002340 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800232a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800233e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a15      	ldr	r2, [pc, #84]	@ (8002398 <TIM_OC2_SetConfig+0xd4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d113      	bne.n	8002370 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800234e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	621a      	str	r2, [r3, #32]
}
 800238a:	bf00      	nop
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40010000 	.word	0x40010000

0800239c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0303 	bic.w	r3, r3, #3
 80023d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80023e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1d      	ldr	r2, [pc, #116]	@ (800246c <TIM_OC3_SetConfig+0xd0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d10d      	bne.n	8002416 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a14      	ldr	r2, [pc, #80]	@ (800246c <TIM_OC3_SetConfig+0xd0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d113      	bne.n	8002446 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800242c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	621a      	str	r2, [r3, #32]
}
 8002460:	bf00      	nop
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40010000 	.word	0x40010000

08002470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800249e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	031b      	lsls	r3, r3, #12
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a10      	ldr	r2, [pc, #64]	@ (800250c <TIM_OC4_SetConfig+0x9c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d109      	bne.n	80024e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	019b      	lsls	r3, r3, #6
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	621a      	str	r2, [r3, #32]
}
 80024fe:	bf00      	nop
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40010000 	.word	0x40010000

08002510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f023 0201 	bic.w	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800253a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f023 030a 	bic.w	r3, r3, #10
 800254c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	621a      	str	r2, [r3, #32]
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800256e:	b480      	push	{r7}
 8002570:	b087      	sub	sp, #28
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f023 0210 	bic.w	r2, r3, #16
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	031b      	lsls	r3, r3, #12
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80025aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	621a      	str	r2, [r3, #32]
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f043 0307 	orr.w	r3, r3, #7
 80025f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	609a      	str	r2, [r3, #8]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800261e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	021a      	lsls	r2, r3, #8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	431a      	orrs	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4313      	orrs	r3, r2
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	609a      	str	r2, [r3, #8]
}
 8002638:	bf00      	nop
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2201      	movs	r2, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a1a      	ldr	r2, [r3, #32]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	43db      	mvns	r3, r3
 8002666:	401a      	ands	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a1a      	ldr	r2, [r3, #32]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	621a      	str	r2, [r3, #32]
}
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e050      	b.n	800274a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d018      	beq.n	800271e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f4:	d013      	beq.n	800271e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a18      	ldr	r2, [pc, #96]	@ (800275c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00e      	beq.n	800271e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a16      	ldr	r2, [pc, #88]	@ (8002760 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a15      	ldr	r2, [pc, #84]	@ (8002764 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d004      	beq.n	800271e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a13      	ldr	r2, [pc, #76]	@ (8002768 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10c      	bne.n	8002738 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	4313      	orrs	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40010000 	.word	0x40010000
 800275c:	40000400 	.word	0x40000400
 8002760:	40000800 	.word	0x40000800
 8002764:	40000c00 	.word	0x40000c00
 8002768:	40014000 	.word	0x40014000

0800276c <memset>:
 800276c:	4402      	add	r2, r0
 800276e:	4603      	mov	r3, r0
 8002770:	4293      	cmp	r3, r2
 8002772:	d100      	bne.n	8002776 <memset+0xa>
 8002774:	4770      	bx	lr
 8002776:	f803 1b01 	strb.w	r1, [r3], #1
 800277a:	e7f9      	b.n	8002770 <memset+0x4>

0800277c <__libc_init_array>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	4d0d      	ldr	r5, [pc, #52]	@ (80027b4 <__libc_init_array+0x38>)
 8002780:	4c0d      	ldr	r4, [pc, #52]	@ (80027b8 <__libc_init_array+0x3c>)
 8002782:	1b64      	subs	r4, r4, r5
 8002784:	10a4      	asrs	r4, r4, #2
 8002786:	2600      	movs	r6, #0
 8002788:	42a6      	cmp	r6, r4
 800278a:	d109      	bne.n	80027a0 <__libc_init_array+0x24>
 800278c:	4d0b      	ldr	r5, [pc, #44]	@ (80027bc <__libc_init_array+0x40>)
 800278e:	4c0c      	ldr	r4, [pc, #48]	@ (80027c0 <__libc_init_array+0x44>)
 8002790:	f000 f818 	bl	80027c4 <_init>
 8002794:	1b64      	subs	r4, r4, r5
 8002796:	10a4      	asrs	r4, r4, #2
 8002798:	2600      	movs	r6, #0
 800279a:	42a6      	cmp	r6, r4
 800279c:	d105      	bne.n	80027aa <__libc_init_array+0x2e>
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a4:	4798      	blx	r3
 80027a6:	3601      	adds	r6, #1
 80027a8:	e7ee      	b.n	8002788 <__libc_init_array+0xc>
 80027aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ae:	4798      	blx	r3
 80027b0:	3601      	adds	r6, #1
 80027b2:	e7f2      	b.n	800279a <__libc_init_array+0x1e>
 80027b4:	080027f4 	.word	0x080027f4
 80027b8:	080027f4 	.word	0x080027f4
 80027bc:	080027f4 	.word	0x080027f4
 80027c0:	080027f8 	.word	0x080027f8

080027c4 <_init>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	bf00      	nop
 80027c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ca:	bc08      	pop	{r3}
 80027cc:	469e      	mov	lr, r3
 80027ce:	4770      	bx	lr

080027d0 <_fini>:
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	bf00      	nop
 80027d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d6:	bc08      	pop	{r3}
 80027d8:	469e      	mov	lr, r3
 80027da:	4770      	bx	lr
