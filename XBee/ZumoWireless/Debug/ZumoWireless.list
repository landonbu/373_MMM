
ZumoWireless.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a8c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003c24  08003c24  00004c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c54  08003c54  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  08003c54  08003c54  00004c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c5c  08003c5c  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c5c  08003c5c  00004c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c60  08003c60  00004c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003c64  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000014  08003c78  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003c78  000051bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc5c  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0a  00000000  00000000  00011ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  000138b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009dc  00000000  00000000  00014538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162da  00000000  00000000  00014f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df92  00000000  00000000  0002b1ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e0e9  00000000  00000000  00039180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003534  00000000  00000000  000c72ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ca7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003c0c 	.word	0x08003c0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08003c0c 	.word	0x08003c0c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <stop>:
};

/*
 * Stops Zumo by setting motor speeds to zero
 */
void stop(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	  *tim3_ccr2 &= ~CCR_MASK;
 80004e0:	4b14      	ldr	r3, [pc, #80]	@ (8000534 <stop+0x58>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a13      	ldr	r2, [pc, #76]	@ (8000534 <stop+0x58>)
 80004e8:	6812      	ldr	r2, [r2, #0]
 80004ea:	0c1b      	lsrs	r3, r3, #16
 80004ec:	041b      	lsls	r3, r3, #16
 80004ee:	6013      	str	r3, [r2, #0]
	  *tim3_ccr2 |= 0; // sets right motor speed
 80004f0:	4b10      	ldr	r3, [pc, #64]	@ (8000534 <stop+0x58>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <stop+0x58>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	6812      	ldr	r2, [r2, #0]
 80004fa:	601a      	str	r2, [r3, #0]
	  *tim4_ccr1 &= ~CCR_MASK;
 80004fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <stop+0x5c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a0d      	ldr	r2, [pc, #52]	@ (8000538 <stop+0x5c>)
 8000504:	6812      	ldr	r2, [r2, #0]
 8000506:	0c1b      	lsrs	r3, r3, #16
 8000508:	041b      	lsls	r3, r3, #16
 800050a:	6013      	str	r3, [r2, #0]
	  *tim4_ccr1 |= 0; // sets left motor speed
 800050c:	4b0a      	ldr	r3, [pc, #40]	@ (8000538 <stop+0x5c>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <stop+0x5c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6812      	ldr	r2, [r2, #0]
 8000516:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // sets right motor direction
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800051e:	4807      	ldr	r0, [pc, #28]	@ (800053c <stop+0x60>)
 8000520:	f001 f8fa 	bl	8001718 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0); // sets left motor direction
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800052a:	4804      	ldr	r0, [pc, #16]	@ (800053c <stop+0x60>)
 800052c:	f001 f8f4 	bl	8001718 <HAL_GPIO_WritePin>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000000 	.word	0x20000000
 8000538:	20000004 	.word	0x20000004
 800053c:	40020000 	.word	0x40020000

08000540 <straight_forward>:

/*
 * Moves Zumo forward in a straight line
 * Arguments: bpm - Determines the linear velocity of the Zumo
 */
void straight_forward(int bpm) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  *tim3_ccr2 &= ~CCR_MASK;
 8000548:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <straight_forward+0x80>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a1c      	ldr	r2, [pc, #112]	@ (80005c0 <straight_forward+0x80>)
 8000550:	6812      	ldr	r2, [r2, #0]
 8000552:	0c1b      	lsrs	r3, r3, #16
 8000554:	041b      	lsls	r3, r3, #16
 8000556:	6013      	str	r3, [r2, #0]
  *tim3_ccr2 |= bpm; // sets right motor speed
 8000558:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <straight_forward+0x80>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	6819      	ldr	r1, [r3, #0]
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <straight_forward+0x80>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	430a      	orrs	r2, r1
 8000566:	601a      	str	r2, [r3, #0]
  *tim4_ccr1 &= ~CCR_MASK;
 8000568:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <straight_forward+0x84>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a15      	ldr	r2, [pc, #84]	@ (80005c4 <straight_forward+0x84>)
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	0c1b      	lsrs	r3, r3, #16
 8000574:	041b      	lsls	r3, r3, #16
 8000576:	6013      	str	r3, [r2, #0]
  *tim4_ccr1 |= bpm; // sets left motor speed
 8000578:	4b12      	ldr	r3, [pc, #72]	@ (80005c4 <straight_forward+0x84>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	6819      	ldr	r1, [r3, #0]
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	4b10      	ldr	r3, [pc, #64]	@ (80005c4 <straight_forward+0x84>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	430a      	orrs	r2, r1
 8000586:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // sets right motor direction
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800058e:	480e      	ldr	r0, [pc, #56]	@ (80005c8 <straight_forward+0x88>)
 8000590:	f001 f8c2 	bl	8001718 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0); // sets left motor direction
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800059a:	480b      	ldr	r0, [pc, #44]	@ (80005c8 <straight_forward+0x88>)
 800059c:	f001 f8bc 	bl	8001718 <HAL_GPIO_WritePin>

  for(int i = 0; i < 5000000; i++);
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	e002      	b.n	80005ac <straight_forward+0x6c>
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3301      	adds	r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <straight_forward+0x8c>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	ddf8      	ble.n	80005a6 <straight_forward+0x66>
  stop();
 80005b4:	f7ff ff92 	bl	80004dc <stop>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000004 	.word	0x20000004
 80005c8:	40020000 	.word	0x40020000
 80005cc:	004c4b3f 	.word	0x004c4b3f

080005d0 <spin_cw>:

/*
 * Spins Zumo in place clockwise
 * Arguments: bpm - Determines the angular velocity of the Zumo
 */
void spin_cw(int bpm) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  *tim3_ccr2 &= ~CCR_MASK;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <spin_cw+0x74>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a19      	ldr	r2, [pc, #100]	@ (8000644 <spin_cw+0x74>)
 80005e0:	6812      	ldr	r2, [r2, #0]
 80005e2:	0c1b      	lsrs	r3, r3, #16
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	6013      	str	r3, [r2, #0]
  *tim3_ccr2 |= bpm; // sets right motor speed
 80005e8:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <spin_cw+0x74>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6819      	ldr	r1, [r3, #0]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	4b14      	ldr	r3, [pc, #80]	@ (8000644 <spin_cw+0x74>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	601a      	str	r2, [r3, #0]
  *tim4_ccr1 &= ~CCR_MASK;
 80005f8:	4b13      	ldr	r3, [pc, #76]	@ (8000648 <spin_cw+0x78>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a12      	ldr	r2, [pc, #72]	@ (8000648 <spin_cw+0x78>)
 8000600:	6812      	ldr	r2, [r2, #0]
 8000602:	0c1b      	lsrs	r3, r3, #16
 8000604:	041b      	lsls	r3, r3, #16
 8000606:	6013      	str	r3, [r2, #0]
  *tim4_ccr1 |= bpm; // sets left motor speed
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <spin_cw+0x78>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6819      	ldr	r1, [r3, #0]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <spin_cw+0x78>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	430a      	orrs	r2, r1
 8000616:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1); // sets right motor direction
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800061e:	480b      	ldr	r0, [pc, #44]	@ (800064c <spin_cw+0x7c>)
 8000620:	f001 f87a 	bl	8001718 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0); // sets left motor direction
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800062a:	4808      	ldr	r0, [pc, #32]	@ (800064c <spin_cw+0x7c>)
 800062c:	f001 f874 	bl	8001718 <HAL_GPIO_WritePin>

  HAL_Delay(2000);
 8000630:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000634:	f000 fd24 	bl	8001080 <HAL_Delay>
  stop();
 8000638:	f7ff ff50 	bl	80004dc <stop>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000
 8000648:	20000004 	.word	0x20000004
 800064c:	40020000 	.word	0x40020000

08000650 <spin_ccw>:

/*
 * Spins Zumo in place counter-clockwise
 * Arguments: bpm - Determines the angular velocity of the Zumo
 */
void spin_ccw(int bpm) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  *tim3_ccr2 &= ~CCR_MASK;
 8000658:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <spin_ccw+0x74>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a19      	ldr	r2, [pc, #100]	@ (80006c4 <spin_ccw+0x74>)
 8000660:	6812      	ldr	r2, [r2, #0]
 8000662:	0c1b      	lsrs	r3, r3, #16
 8000664:	041b      	lsls	r3, r3, #16
 8000666:	6013      	str	r3, [r2, #0]
  *tim3_ccr2 |= bpm; // sets right motor speed
 8000668:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <spin_ccw+0x74>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6819      	ldr	r1, [r3, #0]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <spin_ccw+0x74>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	430a      	orrs	r2, r1
 8000676:	601a      	str	r2, [r3, #0]
  *tim4_ccr1 &= ~CCR_MASK;
 8000678:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <spin_ccw+0x78>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <spin_ccw+0x78>)
 8000680:	6812      	ldr	r2, [r2, #0]
 8000682:	0c1b      	lsrs	r3, r3, #16
 8000684:	041b      	lsls	r3, r3, #16
 8000686:	6013      	str	r3, [r2, #0]
  *tim4_ccr1 |= bpm; // sets left motor speed
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <spin_ccw+0x78>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	6819      	ldr	r1, [r3, #0]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <spin_ccw+0x78>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // sets right motor direction
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800069e:	480b      	ldr	r0, [pc, #44]	@ (80006cc <spin_ccw+0x7c>)
 80006a0:	f001 f83a 	bl	8001718 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1); // sets left motor direction
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006aa:	4808      	ldr	r0, [pc, #32]	@ (80006cc <spin_ccw+0x7c>)
 80006ac:	f001 f834 	bl	8001718 <HAL_GPIO_WritePin>

  HAL_Delay(2000);
 80006b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006b4:	f000 fce4 	bl	8001080 <HAL_Delay>
  stop();
 80006b8:	f7ff ff10 	bl	80004dc <stop>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000004 	.word	0x20000004
 80006cc:	40020000 	.word	0x40020000

080006d0 <create_table>:
#ifndef INC_GENRE_TABLE_H_
#define INC_GENRE_TABLE_H_

struct table_entry genre_table[3];

void create_table() {
 80006d0:	b4b0      	push	{r4, r5, r7}
 80006d2:	b0ab      	sub	sp, #172	@ 0xac
 80006d4:	af00      	add	r7, sp, #0
	// Rock
	struct table_entry rock_entry;
	strcpy(rock_entry.genre, "JAZZ");
 80006d6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006da:	4a27      	ldr	r2, [pc, #156]	@ (8000778 <create_table+0xa8>)
 80006dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e0:	6018      	str	r0, [r3, #0]
 80006e2:	3304      	adds	r3, #4
 80006e4:	7019      	strb	r1, [r3, #0]
	rock_entry.fun_ptr = &spin_cw;
 80006e6:	4b25      	ldr	r3, [pc, #148]	@ (800077c <create_table+0xac>)
 80006e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	genre_table[0] = rock_entry;
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <create_table+0xb0>)
 80006ee:	461d      	mov	r5, r3
 80006f0:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 80006f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000700:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000704:	e885 0003 	stmia.w	r5, {r0, r1}

	// Pop
	struct table_entry pop_entry;
	strcpy(pop_entry.genre, "ROCK");
 8000708:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800070c:	4a1d      	ldr	r2, [pc, #116]	@ (8000784 <create_table+0xb4>)
 800070e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000712:	6018      	str	r0, [r3, #0]
 8000714:	3304      	adds	r3, #4
 8000716:	7019      	strb	r1, [r3, #0]
	pop_entry.fun_ptr = &spin_ccw;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <create_table+0xb8>)
 800071a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	genre_table[1] = pop_entry;
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <create_table+0xb0>)
 800071e:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8000722:	f107 0538 	add.w	r5, r7, #56	@ 0x38
 8000726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000732:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000736:	e884 0003 	stmia.w	r4, {r0, r1}

	// Country
	struct table_entry groovy_entry;
	strcpy(groovy_entry.genre, "GROOVY");
 800073a:	463b      	mov	r3, r7
 800073c:	4a13      	ldr	r2, [pc, #76]	@ (800078c <create_table+0xbc>)
 800073e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000742:	6018      	str	r0, [r3, #0]
 8000744:	3304      	adds	r3, #4
 8000746:	8019      	strh	r1, [r3, #0]
 8000748:	3302      	adds	r3, #2
 800074a:	0c0a      	lsrs	r2, r1, #16
 800074c:	701a      	strb	r2, [r3, #0]
	groovy_entry.fun_ptr = &straight_forward;
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <create_table+0xc0>)
 8000750:	637b      	str	r3, [r7, #52]	@ 0x34
	genre_table[2] = groovy_entry;
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <create_table+0xb0>)
 8000754:	f103 0470 	add.w	r4, r3, #112	@ 0x70
 8000758:	463d      	mov	r5, r7
 800075a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000766:	e895 0003 	ldmia.w	r5, {r0, r1}
 800076a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800076e:	bf00      	nop
 8000770:	37ac      	adds	r7, #172	@ 0xac
 8000772:	46bd      	mov	sp, r7
 8000774:	bcb0      	pop	{r4, r5, r7}
 8000776:	4770      	bx	lr
 8000778:	08003c24 	.word	0x08003c24
 800077c:	080005d1 	.word	0x080005d1
 8000780:	20000030 	.word	0x20000030
 8000784:	08003c2c 	.word	0x08003c2c
 8000788:	08000651 	.word	0x08000651
 800078c:	08003c34 	.word	0x08003c34
 8000790:	08000541 	.word	0x08000541

08000794 <start_dance>:

void start_dance(char *genre) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	uint8_t index;
	size_t length = sizeof(genre_table) / sizeof(genre_table[0]);
 800079c:	2303      	movs	r3, #3
 800079e:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < length; i++) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	e013      	b.n	80007ce <start_dance+0x3a>
		if (!strcmp(genre_table[i].genre, genre)) {
 80007a6:	693a      	ldr	r2, [r7, #16]
 80007a8:	4613      	mov	r3, r2
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	1a9b      	subs	r3, r3, r2
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <start_dance+0x60>)
 80007b2:	4413      	add	r3, r2
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd0e 	bl	80001d8 <strcmp>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d102      	bne.n	80007c8 <start_dance+0x34>
			index = i;
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	75fb      	strb	r3, [r7, #23]
			break;
 80007c6:	e006      	b.n	80007d6 <start_dance+0x42>
	for (size_t i = 0; i < length; i++) {
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	3301      	adds	r3, #1
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d3e7      	bcc.n	80007a6 <start_dance+0x12>
		}
	}
	(*genre_table[index].fun_ptr)(120);
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4906      	ldr	r1, [pc, #24]	@ (80007f4 <start_dance+0x60>)
 80007da:	4613      	mov	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	440b      	add	r3, r1
 80007e4:	3334      	adds	r3, #52	@ 0x34
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2078      	movs	r0, #120	@ 0x78
 80007ea:	4798      	blx	r3
	// straight_forward(60);
}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000030 	.word	0x20000030

080007f8 <HAL_UART_RxCpltCallback>:
#define CCR_MASK 0xFFFF

char genre[6];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	@ (8000824 <HAL_UART_RxCpltCallback+0x2c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d102      	bne.n	8000810 <HAL_UART_RxCpltCallback+0x18>
    {
//    	size_t len = strlen(genre) + 1;
//    	char new_genre[len];
//    	memcpy(new_genre, genre, len);

    	start_dance(genre);
 800080a:	4807      	ldr	r0, [pc, #28]	@ (8000828 <HAL_UART_RxCpltCallback+0x30>)
 800080c:	f7ff ffc2 	bl	8000794 <start_dance>
    }

    HAL_UART_Receive_IT(&huart1, &genre, sizeof(genre));
 8000810:	2206      	movs	r2, #6
 8000812:	4905      	ldr	r1, [pc, #20]	@ (8000828 <HAL_UART_RxCpltCallback+0x30>)
 8000814:	4805      	ldr	r0, [pc, #20]	@ (800082c <HAL_UART_RxCpltCallback+0x34>)
 8000816:	f002 faa9 	bl	8002d6c <HAL_UART_Receive_IT>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40011000 	.word	0x40011000
 8000828:	200001b0 	.word	0x200001b0
 800082c:	20000168 	.word	0x20000168

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	create_table();
 8000834:	f7ff ff4c 	bl	80006d0 <create_table>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 fbb0 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f820 	bl	8000880 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 f99e 	bl	8000b80 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000844:	f000 f886 	bl	8000954 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000848:	f000 f8fa 	bl	8000a40 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800084c:	f000 f96e 	bl	8000b2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000850:	2104      	movs	r1, #4
 8000852:	4807      	ldr	r0, [pc, #28]	@ (8000870 <main+0x40>)
 8000854:	f001 fcba 	bl	80021cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000858:	2100      	movs	r1, #0
 800085a:	4806      	ldr	r0, [pc, #24]	@ (8000874 <main+0x44>)
 800085c:	f001 fcb6 	bl	80021cc <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &genre, sizeof(genre));
 8000860:	2206      	movs	r2, #6
 8000862:	4905      	ldr	r1, [pc, #20]	@ (8000878 <main+0x48>)
 8000864:	4805      	ldr	r0, [pc, #20]	@ (800087c <main+0x4c>)
 8000866:	f002 fa81 	bl	8002d6c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086a:	bf00      	nop
 800086c:	e7fd      	b.n	800086a <main+0x3a>
 800086e:	bf00      	nop
 8000870:	200000d8 	.word	0x200000d8
 8000874:	20000120 	.word	0x20000120
 8000878:	200001b0 	.word	0x200001b0
 800087c:	20000168 	.word	0x20000168

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	@ 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	@ 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f003 f990 	bl	8003bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b28      	ldr	r3, [pc, #160]	@ (800094c <SystemClock_Config+0xcc>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ac:	4a27      	ldr	r2, [pc, #156]	@ (800094c <SystemClock_Config+0xcc>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b4:	4b25      	ldr	r3, [pc, #148]	@ (800094c <SystemClock_Config+0xcc>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <SystemClock_Config+0xd0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a21      	ldr	r2, [pc, #132]	@ (8000950 <SystemClock_Config+0xd0>)
 80008ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <SystemClock_Config+0xd0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008dc:	2302      	movs	r3, #2
 80008de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e0:	2301      	movs	r3, #1
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e4:	2310      	movs	r3, #16
 80008e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e8:	2302      	movs	r3, #2
 80008ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ec:	2300      	movs	r3, #0
 80008ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008f0:	2310      	movs	r3, #16
 80008f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008fa:	2304      	movs	r3, #4
 80008fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008fe:	2304      	movs	r3, #4
 8000900:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	4618      	mov	r0, r3
 8000908:	f000 ff20 	bl	800174c <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000912:	f000 f9b5 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	230f      	movs	r3, #15
 8000918:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091a:	2302      	movs	r3, #2
 800091c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000926:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2102      	movs	r1, #2
 8000932:	4618      	mov	r0, r3
 8000934:	f001 f982 	bl	8001c3c <HAL_RCC_ClockConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800093e:	f000 f99f 	bl	8000c80 <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	3750      	adds	r7, #80	@ 0x50
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	@ 0x38
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]
 8000982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000984:	4b2c      	ldr	r3, [pc, #176]	@ (8000a38 <MX_TIM3_Init+0xe4>)
 8000986:	4a2d      	ldr	r2, [pc, #180]	@ (8000a3c <MX_TIM3_Init+0xe8>)
 8000988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800098a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a38 <MX_TIM3_Init+0xe4>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b29      	ldr	r3, [pc, #164]	@ (8000a38 <MX_TIM3_Init+0xe4>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8000996:	4b28      	ldr	r3, [pc, #160]	@ (8000a38 <MX_TIM3_Init+0xe4>)
 8000998:	22c7      	movs	r2, #199	@ 0xc7
 800099a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099c:	4b26      	ldr	r3, [pc, #152]	@ (8000a38 <MX_TIM3_Init+0xe4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	4b25      	ldr	r3, [pc, #148]	@ (8000a38 <MX_TIM3_Init+0xe4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009a8:	4823      	ldr	r0, [pc, #140]	@ (8000a38 <MX_TIM3_Init+0xe4>)
 80009aa:	f001 fb67 	bl	800207c <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80009b4:	f000 f964 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009c2:	4619      	mov	r1, r3
 80009c4:	481c      	ldr	r0, [pc, #112]	@ (8000a38 <MX_TIM3_Init+0xe4>)
 80009c6:	f001 fd73 	bl	80024b0 <HAL_TIM_ConfigClockSource>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80009d0:	f000 f956 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009d4:	4818      	ldr	r0, [pc, #96]	@ (8000a38 <MX_TIM3_Init+0xe4>)
 80009d6:	f001 fba0 	bl	800211a <HAL_TIM_PWM_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80009e0:	f000 f94e 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	4619      	mov	r1, r3
 80009f2:	4811      	ldr	r0, [pc, #68]	@ (8000a38 <MX_TIM3_Init+0xe4>)
 80009f4:	f002 f8fc 	bl	8002bf0 <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80009fe:	f000 f93f 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a02:	2360      	movs	r3, #96	@ 0x60
 8000a04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2204      	movs	r2, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	4807      	ldr	r0, [pc, #28]	@ (8000a38 <MX_TIM3_Init+0xe4>)
 8000a1a:	f001 fc87 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000a24:	f000 f92c 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a28:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <MX_TIM3_Init+0xe4>)
 8000a2a:	f000 f98f 	bl	8000d4c <HAL_TIM_MspPostInit>

}
 8000a2e:	bf00      	nop
 8000a30:	3738      	adds	r7, #56	@ 0x38
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000d8 	.word	0x200000d8
 8000a3c:	40000400 	.word	0x40000400

08000a40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	@ 0x38
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]
 8000a6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a70:	4b2c      	ldr	r3, [pc, #176]	@ (8000b24 <MX_TIM4_Init+0xe4>)
 8000a72:	4a2d      	ldr	r2, [pc, #180]	@ (8000b28 <MX_TIM4_Init+0xe8>)
 8000a74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a76:	4b2b      	ldr	r3, [pc, #172]	@ (8000b24 <MX_TIM4_Init+0xe4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b29      	ldr	r3, [pc, #164]	@ (8000b24 <MX_TIM4_Init+0xe4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8000a82:	4b28      	ldr	r3, [pc, #160]	@ (8000b24 <MX_TIM4_Init+0xe4>)
 8000a84:	22c7      	movs	r2, #199	@ 0xc7
 8000a86:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a88:	4b26      	ldr	r3, [pc, #152]	@ (8000b24 <MX_TIM4_Init+0xe4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8e:	4b25      	ldr	r3, [pc, #148]	@ (8000b24 <MX_TIM4_Init+0xe4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a94:	4823      	ldr	r0, [pc, #140]	@ (8000b24 <MX_TIM4_Init+0xe4>)
 8000a96:	f001 faf1 	bl	800207c <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000aa0:	f000 f8ee 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000aaa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	481c      	ldr	r0, [pc, #112]	@ (8000b24 <MX_TIM4_Init+0xe4>)
 8000ab2:	f001 fcfd 	bl	80024b0 <HAL_TIM_ConfigClockSource>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000abc:	f000 f8e0 	bl	8000c80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ac0:	4818      	ldr	r0, [pc, #96]	@ (8000b24 <MX_TIM4_Init+0xe4>)
 8000ac2:	f001 fb2a 	bl	800211a <HAL_TIM_PWM_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000acc:	f000 f8d8 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	4619      	mov	r1, r3
 8000ade:	4811      	ldr	r0, [pc, #68]	@ (8000b24 <MX_TIM4_Init+0xe4>)
 8000ae0:	f002 f886 	bl	8002bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000aea:	f000 f8c9 	bl	8000c80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aee:	2360      	movs	r3, #96	@ 0x60
 8000af0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	4619      	mov	r1, r3
 8000b04:	4807      	ldr	r0, [pc, #28]	@ (8000b24 <MX_TIM4_Init+0xe4>)
 8000b06:	f001 fc11 	bl	800232c <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000b10:	f000 f8b6 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b14:	4803      	ldr	r0, [pc, #12]	@ (8000b24 <MX_TIM4_Init+0xe4>)
 8000b16:	f000 f919 	bl	8000d4c <HAL_TIM_MspPostInit>

}
 8000b1a:	bf00      	nop
 8000b1c:	3738      	adds	r7, #56	@ 0x38
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000120 	.word	0x20000120
 8000b28:	40000800 	.word	0x40000800

08000b2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <MX_USART1_UART_Init+0x50>)
 8000b34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_USART1_UART_Init+0x4c>)
 8000b64:	f002 f8b2 	bl	8002ccc <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b6e:	f000 f887 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000168 	.word	0x20000168
 8000b7c:	40011000 	.word	0x40011000

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b36      	ldr	r3, [pc, #216]	@ (8000c74 <MX_GPIO_Init+0xf4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a35      	ldr	r2, [pc, #212]	@ (8000c74 <MX_GPIO_Init+0xf4>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b33      	ldr	r3, [pc, #204]	@ (8000c74 <MX_GPIO_Init+0xf4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c74 <MX_GPIO_Init+0xf4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a2e      	ldr	r2, [pc, #184]	@ (8000c74 <MX_GPIO_Init+0xf4>)
 8000bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c74 <MX_GPIO_Init+0xf4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b28      	ldr	r3, [pc, #160]	@ (8000c74 <MX_GPIO_Init+0xf4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a27      	ldr	r2, [pc, #156]	@ (8000c74 <MX_GPIO_Init+0xf4>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b25      	ldr	r3, [pc, #148]	@ (8000c74 <MX_GPIO_Init+0xf4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <MX_GPIO_Init+0xf4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a20      	ldr	r2, [pc, #128]	@ (8000c74 <MX_GPIO_Init+0xf4>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <MX_GPIO_Init+0xf4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c0c:	481a      	ldr	r0, [pc, #104]	@ (8000c78 <MX_GPIO_Init+0xf8>)
 8000c0e:	f000 fd83 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c18:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4814      	ldr	r0, [pc, #80]	@ (8000c7c <MX_GPIO_Init+0xfc>)
 8000c2a:	f000 fbf1 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c2e:	230c      	movs	r3, #12
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3e:	2307      	movs	r3, #7
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	480b      	ldr	r0, [pc, #44]	@ (8000c78 <MX_GPIO_Init+0xf8>)
 8000c4a:	f000 fbe1 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000c4e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_GPIO_Init+0xf8>)
 8000c68:	f000 fbd2 	bl	8001410 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	@ 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	40020800 	.word	0x40020800

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <Error_Handler+0x8>

08000c8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f000 facc 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a15      	ldr	r2, [pc, #84]	@ (8000d40 <HAL_TIM_Base_MspInit+0x64>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10e      	bne.n	8000d0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <HAL_TIM_Base_MspInit+0x68>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	4a13      	ldr	r2, [pc, #76]	@ (8000d44 <HAL_TIM_Base_MspInit+0x68>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <HAL_TIM_Base_MspInit+0x68>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d0a:	e012      	b.n	8000d32 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <HAL_TIM_Base_MspInit+0x6c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d10d      	bne.n	8000d32 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_TIM_Base_MspInit+0x68>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a09      	ldr	r2, [pc, #36]	@ (8000d44 <HAL_TIM_Base_MspInit+0x68>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d26:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <HAL_TIM_Base_MspInit+0x68>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
}
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40000400 	.word	0x40000400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40000800 	.word	0x40000800

08000d4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a24      	ldr	r2, [pc, #144]	@ (8000dfc <HAL_TIM_MspPostInit+0xb0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d11e      	bne.n	8000dac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	4b23      	ldr	r3, [pc, #140]	@ (8000e00 <HAL_TIM_MspPostInit+0xb4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a22      	ldr	r2, [pc, #136]	@ (8000e00 <HAL_TIM_MspPostInit+0xb4>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b20      	ldr	r3, [pc, #128]	@ (8000e00 <HAL_TIM_MspPostInit+0xb4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d8a:	2380      	movs	r3, #128	@ 0x80
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4817      	ldr	r0, [pc, #92]	@ (8000e04 <HAL_TIM_MspPostInit+0xb8>)
 8000da6:	f000 fb33 	bl	8001410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000daa:	e022      	b.n	8000df2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a15      	ldr	r2, [pc, #84]	@ (8000e08 <HAL_TIM_MspPostInit+0xbc>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d11d      	bne.n	8000df2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <HAL_TIM_MspPostInit+0xb4>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a10      	ldr	r2, [pc, #64]	@ (8000e00 <HAL_TIM_MspPostInit+0xb4>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <HAL_TIM_MspPostInit+0xb4>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dd2:	2340      	movs	r3, #64	@ 0x40
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000de2:	2302      	movs	r3, #2
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4807      	ldr	r0, [pc, #28]	@ (8000e0c <HAL_TIM_MspPostInit+0xc0>)
 8000dee:	f000 fb0f 	bl	8001410 <HAL_GPIO_Init>
}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	@ 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40000400 	.word	0x40000400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40000800 	.word	0x40000800
 8000e0c:	40020400 	.word	0x40020400

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea4 <HAL_UART_MspInit+0x94>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d134      	bne.n	8000e9c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <HAL_UART_MspInit+0x98>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea8 <HAL_UART_MspInit+0x98>)
 8000e3c:	f043 0310 	orr.w	r3, r3, #16
 8000e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <HAL_UART_MspInit+0x98>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <HAL_UART_MspInit+0x98>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a14      	ldr	r2, [pc, #80]	@ (8000ea8 <HAL_UART_MspInit+0x98>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <HAL_UART_MspInit+0x98>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000e6a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4809      	ldr	r0, [pc, #36]	@ (8000eac <HAL_UART_MspInit+0x9c>)
 8000e88:	f000 fac2 	bl	8001410 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2025      	movs	r0, #37	@ 0x25
 8000e92:	f000 f9f4 	bl	800127e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e96:	2025      	movs	r0, #37	@ 0x25
 8000e98:	f000 fa0d 	bl	80012b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	@ 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40011000 	.word	0x40011000
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f06:	f000 f89b 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <USART1_IRQHandler+0x10>)
 8000f16:	f001 ff4f 	bl	8002db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000168 	.word	0x20000168

08000f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f4c:	f7ff ffea 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f002 fe25 	bl	8003bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fc59 	bl	8000830 <main>
  bx  lr    
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f8c:	08003c64 	.word	0x08003c64
  ldr r2, =_sbss
 8000f90:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f94:	200001bc 	.word	0x200001bc

08000f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <HAL_Init+0x40>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <HAL_Init+0x40>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	@ (8000fdc <HAL_Init+0x40>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f94f 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fe5c 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023c00 	.word	0x40023c00

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f967 	bl	80012d2 <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f92f 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	@ (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000008 	.word	0x20000008
 8001038:	20000010 	.word	0x20000010
 800103c:	2000000c 	.word	0x2000000c

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000010 	.word	0x20000010
 8001064:	200001b8 	.word	0x200001b8

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	@ (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	200001b8 	.word	0x200001b8

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000010 	.word	0x20000010

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	@ (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	@ (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	@ (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	@ (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	@ 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff29 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff3e 	bl	8001110 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff8e 	bl	80011bc <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff31 	bl	800112c <__NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffa2 	bl	8001224 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012f8:	f7ff feb6 	bl	8001068 <HAL_GetTick>
 80012fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d008      	beq.n	800131c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2280      	movs	r2, #128	@ 0x80
 800130e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e052      	b.n	80013c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0216 	bic.w	r2, r2, #22
 800132a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800133a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <HAL_DMA_Abort+0x62>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0208 	bic.w	r2, r2, #8
 800135a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0201 	bic.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800136c:	e013      	b.n	8001396 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800136e:	f7ff fe7b 	bl	8001068 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b05      	cmp	r3, #5
 800137a:	d90c      	bls.n	8001396 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2220      	movs	r2, #32
 8001380:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2203      	movs	r2, #3
 8001386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e015      	b.n	80013c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1e4      	bne.n	800136e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013a8:	223f      	movs	r2, #63	@ 0x3f
 80013aa:	409a      	lsls	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d004      	beq.n	80013e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2280      	movs	r2, #128	@ 0x80
 80013e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e00c      	b.n	8001402 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2205      	movs	r2, #5
 80013ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	e159      	b.n	80016e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800142c:	2201      	movs	r2, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	429a      	cmp	r2, r3
 8001446:	f040 8148 	bne.w	80016da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d005      	beq.n	8001462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145e:	2b02      	cmp	r3, #2
 8001460:	d130      	bne.n	80014c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001498:	2201      	movs	r2, #1
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 0201 	and.w	r2, r3, #1
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d017      	beq.n	8001500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d123      	bne.n	8001554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	691a      	ldr	r2, [r3, #16]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	69b9      	ldr	r1, [r7, #24]
 8001550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	2203      	movs	r2, #3
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80a2 	beq.w	80016da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b57      	ldr	r3, [pc, #348]	@ (80016f8 <HAL_GPIO_Init+0x2e8>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	4a56      	ldr	r2, [pc, #344]	@ (80016f8 <HAL_GPIO_Init+0x2e8>)
 80015a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a6:	4b54      	ldr	r3, [pc, #336]	@ (80016f8 <HAL_GPIO_Init+0x2e8>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b2:	4a52      	ldr	r2, [pc, #328]	@ (80016fc <HAL_GPIO_Init+0x2ec>)
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	220f      	movs	r2, #15
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a49      	ldr	r2, [pc, #292]	@ (8001700 <HAL_GPIO_Init+0x2f0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d019      	beq.n	8001612 <HAL_GPIO_Init+0x202>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a48      	ldr	r2, [pc, #288]	@ (8001704 <HAL_GPIO_Init+0x2f4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0x1fe>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a47      	ldr	r2, [pc, #284]	@ (8001708 <HAL_GPIO_Init+0x2f8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00d      	beq.n	800160a <HAL_GPIO_Init+0x1fa>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a46      	ldr	r2, [pc, #280]	@ (800170c <HAL_GPIO_Init+0x2fc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x1f6>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a45      	ldr	r2, [pc, #276]	@ (8001710 <HAL_GPIO_Init+0x300>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_GPIO_Init+0x1f2>
 80015fe:	2304      	movs	r3, #4
 8001600:	e008      	b.n	8001614 <HAL_GPIO_Init+0x204>
 8001602:	2307      	movs	r3, #7
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x204>
 8001606:	2303      	movs	r3, #3
 8001608:	e004      	b.n	8001614 <HAL_GPIO_Init+0x204>
 800160a:	2302      	movs	r3, #2
 800160c:	e002      	b.n	8001614 <HAL_GPIO_Init+0x204>
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_GPIO_Init+0x204>
 8001612:	2300      	movs	r3, #0
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	f002 0203 	and.w	r2, r2, #3
 800161a:	0092      	lsls	r2, r2, #2
 800161c:	4093      	lsls	r3, r2
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001624:	4935      	ldr	r1, [pc, #212]	@ (80016fc <HAL_GPIO_Init+0x2ec>)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3302      	adds	r3, #2
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001632:	4b38      	ldr	r3, [pc, #224]	@ (8001714 <HAL_GPIO_Init+0x304>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001656:	4a2f      	ldr	r2, [pc, #188]	@ (8001714 <HAL_GPIO_Init+0x304>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800165c:	4b2d      	ldr	r3, [pc, #180]	@ (8001714 <HAL_GPIO_Init+0x304>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001680:	4a24      	ldr	r2, [pc, #144]	@ (8001714 <HAL_GPIO_Init+0x304>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001686:	4b23      	ldr	r3, [pc, #140]	@ (8001714 <HAL_GPIO_Init+0x304>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001714 <HAL_GPIO_Init+0x304>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b0:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <HAL_GPIO_Init+0x304>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001714 <HAL_GPIO_Init+0x304>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3301      	adds	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	f67f aea2 	bls.w	800142c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3724      	adds	r7, #36	@ 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40013800 	.word	0x40013800
 8001700:	40020000 	.word	0x40020000
 8001704:	40020400 	.word	0x40020400
 8001708:	40020800 	.word	0x40020800
 800170c:	40020c00 	.word	0x40020c00
 8001710:	40021000 	.word	0x40021000
 8001714:	40013c00 	.word	0x40013c00

08001718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001734:	e003      	b.n	800173e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	041a      	lsls	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	619a      	str	r2, [r3, #24]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e267      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d075      	beq.n	8001856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800176a:	4b88      	ldr	r3, [pc, #544]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b04      	cmp	r3, #4
 8001774:	d00c      	beq.n	8001790 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001776:	4b85      	ldr	r3, [pc, #532]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800177e:	2b08      	cmp	r3, #8
 8001780:	d112      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001782:	4b82      	ldr	r3, [pc, #520]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800178e:	d10b      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	4b7e      	ldr	r3, [pc, #504]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d05b      	beq.n	8001854 <HAL_RCC_OscConfig+0x108>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d157      	bne.n	8001854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e242      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b0:	d106      	bne.n	80017c0 <HAL_RCC_OscConfig+0x74>
 80017b2:	4b76      	ldr	r3, [pc, #472]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a75      	ldr	r2, [pc, #468]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e01d      	b.n	80017fc <HAL_RCC_OscConfig+0xb0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x98>
 80017ca:	4b70      	ldr	r3, [pc, #448]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6f      	ldr	r2, [pc, #444]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b6d      	ldr	r3, [pc, #436]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6c      	ldr	r2, [pc, #432]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0xb0>
 80017e4:	4b69      	ldr	r3, [pc, #420]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a68      	ldr	r2, [pc, #416]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b66      	ldr	r3, [pc, #408]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a65      	ldr	r2, [pc, #404]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fc30 	bl	8001068 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fc2c 	bl	8001068 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	@ 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e207      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b5b      	ldr	r3, [pc, #364]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0xc0>
 800182a:	e014      	b.n	8001856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fc1c 	bl	8001068 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fc18 	bl	8001068 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	@ 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1f3      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	4b51      	ldr	r3, [pc, #324]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0xe8>
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d063      	beq.n	800192a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001862:	4b4a      	ldr	r3, [pc, #296]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186e:	4b47      	ldr	r3, [pc, #284]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001876:	2b08      	cmp	r3, #8
 8001878:	d11c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187a:	4b44      	ldr	r3, [pc, #272]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d116      	bne.n	80018b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	4b41      	ldr	r3, [pc, #260]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <HAL_RCC_OscConfig+0x152>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d001      	beq.n	800189e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e1c7      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189e:	4b3b      	ldr	r3, [pc, #236]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4937      	ldr	r1, [pc, #220]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	e03a      	b.n	800192a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018bc:	4b34      	ldr	r3, [pc, #208]	@ (8001990 <HAL_RCC_OscConfig+0x244>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff fbd1 	bl	8001068 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fbcd 	bl	8001068 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1a8      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b28      	ldr	r3, [pc, #160]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4925      	ldr	r1, [pc, #148]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
 80018fc:	e015      	b.n	800192a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fe:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <HAL_RCC_OscConfig+0x244>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fbb0 	bl	8001068 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff fbac 	bl	8001068 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e187      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191e:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d036      	beq.n	80019a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d016      	beq.n	800196c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <HAL_RCC_OscConfig+0x248>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fb90 	bl	8001068 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff fb8c 	bl	8001068 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e167      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195e:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x200>
 800196a:	e01b      	b.n	80019a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_RCC_OscConfig+0x248>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff fb79 	bl	8001068 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	e00e      	b.n	8001998 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197a:	f7ff fb75 	bl	8001068 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d907      	bls.n	8001998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e150      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
 800198c:	40023800 	.word	0x40023800
 8001990:	42470000 	.word	0x42470000
 8001994:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	4b88      	ldr	r3, [pc, #544]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 800199a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1ea      	bne.n	800197a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 8097 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b81      	ldr	r3, [pc, #516]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10f      	bne.n	80019e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b7d      	ldr	r3, [pc, #500]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	4a7c      	ldr	r2, [pc, #496]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d2:	4b7a      	ldr	r3, [pc, #488]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019de:	2301      	movs	r3, #1
 80019e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b77      	ldr	r3, [pc, #476]	@ (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d118      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	4b74      	ldr	r3, [pc, #464]	@ (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a73      	ldr	r2, [pc, #460]	@ (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fb35 	bl	8001068 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a02:	f7ff fb31 	bl	8001068 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e10c      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc0 <HAL_RCC_OscConfig+0x474>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x2ea>
 8001a28:	4b64      	ldr	r3, [pc, #400]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2c:	4a63      	ldr	r2, [pc, #396]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a34:	e01c      	b.n	8001a70 <HAL_RCC_OscConfig+0x324>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x30c>
 8001a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a42:	4a5e      	ldr	r2, [pc, #376]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0x324>
 8001a58:	4b58      	ldr	r3, [pc, #352]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5c:	4a57      	ldr	r2, [pc, #348]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a64:	4b55      	ldr	r3, [pc, #340]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a68:	4a54      	ldr	r2, [pc, #336]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a6a:	f023 0304 	bic.w	r3, r3, #4
 8001a6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d015      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff faf6 	bl	8001068 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7ff faf2 	bl	8001068 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e0cb      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a96:	4b49      	ldr	r3, [pc, #292]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0ee      	beq.n	8001a80 <HAL_RCC_OscConfig+0x334>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7ff fae0 	bl	8001068 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7ff fadc 	bl	8001068 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0b5      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ee      	bne.n	8001aac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad4:	4b39      	ldr	r3, [pc, #228]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	4a38      	ldr	r2, [pc, #224]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a1 	beq.w	8001c2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aea:	4b34      	ldr	r3, [pc, #208]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d05c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d141      	bne.n	8001b82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b31      	ldr	r3, [pc, #196]	@ (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fab0 	bl	8001068 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff faac 	bl	8001068 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e087      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1e:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	019b      	lsls	r3, r3, #6
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b40:	085b      	lsrs	r3, r3, #1
 8001b42:	3b01      	subs	r3, #1
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	061b      	lsls	r3, r3, #24
 8001b4e:	491b      	ldr	r1, [pc, #108]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b54:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7ff fa85 	bl	8001068 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff fa81 	bl	8001068 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e05c      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x416>
 8001b80:	e054      	b.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fa6e 	bl	8001068 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff fa6a 	bl	8001068 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e045      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x444>
 8001bae:	e03d      	b.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e038      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <HAL_RCC_OscConfig+0x4ec>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d028      	beq.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d121      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d11a      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d111      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	3b01      	subs	r3, #1
 8001c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0cc      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c50:	4b68      	ldr	r3, [pc, #416]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d90c      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b65      	ldr	r3, [pc, #404]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b63      	ldr	r3, [pc, #396]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0b8      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c90:	4b59      	ldr	r3, [pc, #356]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a58      	ldr	r2, [pc, #352]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca8:	4b53      	ldr	r3, [pc, #332]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a52      	ldr	r2, [pc, #328]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b50      	ldr	r3, [pc, #320]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	494d      	ldr	r1, [pc, #308]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d044      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b47      	ldr	r3, [pc, #284]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d119      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e07f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e06f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e067      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b37      	ldr	r3, [pc, #220]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4934      	ldr	r1, [pc, #208]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7ff f99c 	bl	8001068 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7ff f998 	bl	8001068 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e04f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d20c      	bcs.n	8001d84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e032      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4916      	ldr	r1, [pc, #88]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dae:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	490e      	ldr	r1, [pc, #56]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dc2:	f000 f821 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	490a      	ldr	r1, [pc, #40]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	5ccb      	ldrb	r3, [r1, r3]
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	4a09      	ldr	r2, [pc, #36]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f8fc 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	08003c3c 	.word	0x08003c3c
 8001e00:	20000008 	.word	0x20000008
 8001e04:	2000000c 	.word	0x2000000c

08001e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e0c:	b094      	sub	sp, #80	@ 0x50
 8001e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e20:	4b79      	ldr	r3, [pc, #484]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d00d      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x40>
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	f200 80e1 	bhi.w	8001ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x34>
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e3a:	e0db      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e3c:	4b73      	ldr	r3, [pc, #460]	@ (800200c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e40:	e0db      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e42:	4b73      	ldr	r3, [pc, #460]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e46:	e0d8      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e48:	4b6f      	ldr	r3, [pc, #444]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e50:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e52:	4b6d      	ldr	r3, [pc, #436]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d063      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	2200      	movs	r2, #0
 8001e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e72:	2300      	movs	r3, #0
 8001e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e7a:	4622      	mov	r2, r4
 8001e7c:	462b      	mov	r3, r5
 8001e7e:	f04f 0000 	mov.w	r0, #0
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	0159      	lsls	r1, r3, #5
 8001e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e8c:	0150      	lsls	r0, r2, #5
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4621      	mov	r1, r4
 8001e94:	1a51      	subs	r1, r2, r1
 8001e96:	6139      	str	r1, [r7, #16]
 8001e98:	4629      	mov	r1, r5
 8001e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001eac:	4659      	mov	r1, fp
 8001eae:	018b      	lsls	r3, r1, #6
 8001eb0:	4651      	mov	r1, sl
 8001eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eb6:	4651      	mov	r1, sl
 8001eb8:	018a      	lsls	r2, r1, #6
 8001eba:	4651      	mov	r1, sl
 8001ebc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ec0:	4659      	mov	r1, fp
 8001ec2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eda:	4690      	mov	r8, r2
 8001edc:	4699      	mov	r9, r3
 8001ede:	4623      	mov	r3, r4
 8001ee0:	eb18 0303 	adds.w	r3, r8, r3
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	462b      	mov	r3, r5
 8001ee8:	eb49 0303 	adc.w	r3, r9, r3
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001efa:	4629      	mov	r1, r5
 8001efc:	024b      	lsls	r3, r1, #9
 8001efe:	4621      	mov	r1, r4
 8001f00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f04:	4621      	mov	r1, r4
 8001f06:	024a      	lsls	r2, r1, #9
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f0e:	2200      	movs	r2, #0
 8001f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f18:	f7fe f968 	bl	80001ec <__aeabi_uldivmod>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4613      	mov	r3, r2
 8001f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f24:	e058      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f26:	4b38      	ldr	r3, [pc, #224]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	4611      	mov	r1, r2
 8001f32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f36:	623b      	str	r3, [r7, #32]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f40:	4642      	mov	r2, r8
 8001f42:	464b      	mov	r3, r9
 8001f44:	f04f 0000 	mov.w	r0, #0
 8001f48:	f04f 0100 	mov.w	r1, #0
 8001f4c:	0159      	lsls	r1, r3, #5
 8001f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f52:	0150      	lsls	r0, r2, #5
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4641      	mov	r1, r8
 8001f5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f5e:	4649      	mov	r1, r9
 8001f60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f78:	ebb2 040a 	subs.w	r4, r2, sl
 8001f7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	00eb      	lsls	r3, r5, #3
 8001f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f8e:	00e2      	lsls	r2, r4, #3
 8001f90:	4614      	mov	r4, r2
 8001f92:	461d      	mov	r5, r3
 8001f94:	4643      	mov	r3, r8
 8001f96:	18e3      	adds	r3, r4, r3
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	464b      	mov	r3, r9
 8001f9c:	eb45 0303 	adc.w	r3, r5, r3
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fae:	4629      	mov	r1, r5
 8001fb0:	028b      	lsls	r3, r1, #10
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb8:	4621      	mov	r1, r4
 8001fba:	028a      	lsls	r2, r1, #10
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	61fa      	str	r2, [r7, #28]
 8001fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fcc:	f7fe f90e 	bl	80001ec <__aeabi_uldivmod>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fe8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ff2:	e002      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	@ (800200c <HAL_RCC_GetSysClockFreq+0x204>)
 8001ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3750      	adds	r7, #80	@ 0x50
 8002000:	46bd      	mov	sp, r7
 8002002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	00f42400 	.word	0x00f42400
 8002010:	007a1200 	.word	0x007a1200

08002014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002018:	4b03      	ldr	r3, [pc, #12]	@ (8002028 <HAL_RCC_GetHCLKFreq+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000008 	.word	0x20000008

0800202c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002030:	f7ff fff0 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0a9b      	lsrs	r3, r3, #10
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	@ (8002050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	08003c4c 	.word	0x08003c4c

08002054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002058:	f7ff ffdc 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	0b5b      	lsrs	r3, r3, #13
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	4903      	ldr	r1, [pc, #12]	@ (8002078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800
 8002078:	08003c4c 	.word	0x08003c4c

0800207c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e041      	b.n	8002112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fe1a 	bl	8000cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3304      	adds	r3, #4
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f000 fac0 	bl	8002640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e041      	b.n	80021b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d106      	bne.n	8002146 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f839 	bl	80021b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3304      	adds	r3, #4
 8002156:	4619      	mov	r1, r3
 8002158:	4610      	mov	r0, r2
 800215a:	f000 fa71 	bl	8002640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <HAL_TIM_PWM_Start+0x24>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e022      	b.n	8002236 <HAL_TIM_PWM_Start+0x6a>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d109      	bne.n	800220a <HAL_TIM_PWM_Start+0x3e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b01      	cmp	r3, #1
 8002200:	bf14      	ite	ne
 8002202:	2301      	movne	r3, #1
 8002204:	2300      	moveq	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	e015      	b.n	8002236 <HAL_TIM_PWM_Start+0x6a>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b08      	cmp	r3, #8
 800220e:	d109      	bne.n	8002224 <HAL_TIM_PWM_Start+0x58>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	bf14      	ite	ne
 800221c:	2301      	movne	r3, #1
 800221e:	2300      	moveq	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	e008      	b.n	8002236 <HAL_TIM_PWM_Start+0x6a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e068      	b.n	8002310 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <HAL_TIM_PWM_Start+0x82>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800224c:	e013      	b.n	8002276 <HAL_TIM_PWM_Start+0xaa>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d104      	bne.n	800225e <HAL_TIM_PWM_Start+0x92>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800225c:	e00b      	b.n	8002276 <HAL_TIM_PWM_Start+0xaa>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d104      	bne.n	800226e <HAL_TIM_PWM_Start+0xa2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800226c:	e003      	b.n	8002276 <HAL_TIM_PWM_Start+0xaa>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fc90 	bl	8002ba4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a23      	ldr	r2, [pc, #140]	@ (8002318 <HAL_TIM_PWM_Start+0x14c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d107      	bne.n	800229e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800229c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002318 <HAL_TIM_PWM_Start+0x14c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d018      	beq.n	80022da <HAL_TIM_PWM_Start+0x10e>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b0:	d013      	beq.n	80022da <HAL_TIM_PWM_Start+0x10e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a19      	ldr	r2, [pc, #100]	@ (800231c <HAL_TIM_PWM_Start+0x150>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00e      	beq.n	80022da <HAL_TIM_PWM_Start+0x10e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a17      	ldr	r2, [pc, #92]	@ (8002320 <HAL_TIM_PWM_Start+0x154>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d009      	beq.n	80022da <HAL_TIM_PWM_Start+0x10e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a16      	ldr	r2, [pc, #88]	@ (8002324 <HAL_TIM_PWM_Start+0x158>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d004      	beq.n	80022da <HAL_TIM_PWM_Start+0x10e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a14      	ldr	r2, [pc, #80]	@ (8002328 <HAL_TIM_PWM_Start+0x15c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d111      	bne.n	80022fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d010      	beq.n	800230e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fc:	e007      	b.n	800230e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40010000 	.word	0x40010000
 800231c:	40000400 	.word	0x40000400
 8002320:	40000800 	.word	0x40000800
 8002324:	40000c00 	.word	0x40000c00
 8002328:	40014000 	.word	0x40014000

0800232c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002346:	2302      	movs	r3, #2
 8002348:	e0ae      	b.n	80024a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b0c      	cmp	r3, #12
 8002356:	f200 809f 	bhi.w	8002498 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800235a:	a201      	add	r2, pc, #4	@ (adr r2, 8002360 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800235c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002360:	08002395 	.word	0x08002395
 8002364:	08002499 	.word	0x08002499
 8002368:	08002499 	.word	0x08002499
 800236c:	08002499 	.word	0x08002499
 8002370:	080023d5 	.word	0x080023d5
 8002374:	08002499 	.word	0x08002499
 8002378:	08002499 	.word	0x08002499
 800237c:	08002499 	.word	0x08002499
 8002380:	08002417 	.word	0x08002417
 8002384:	08002499 	.word	0x08002499
 8002388:	08002499 	.word	0x08002499
 800238c:	08002499 	.word	0x08002499
 8002390:	08002457 	.word	0x08002457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f9dc 	bl	8002758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0208 	orr.w	r2, r2, #8
 80023ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0204 	bic.w	r2, r2, #4
 80023be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6999      	ldr	r1, [r3, #24]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	619a      	str	r2, [r3, #24]
      break;
 80023d2:	e064      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fa22 	bl	8002824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6999      	ldr	r1, [r3, #24]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	021a      	lsls	r2, r3, #8
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	619a      	str	r2, [r3, #24]
      break;
 8002414:	e043      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fa6d 	bl	80028fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0208 	orr.w	r2, r2, #8
 8002430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0204 	bic.w	r2, r2, #4
 8002440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69d9      	ldr	r1, [r3, #28]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	61da      	str	r2, [r3, #28]
      break;
 8002454:	e023      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fab7 	bl	80029d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69da      	ldr	r2, [r3, #28]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69d9      	ldr	r1, [r3, #28]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	021a      	lsls	r2, r3, #8
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	61da      	str	r2, [r3, #28]
      break;
 8002496:	e002      	b.n	800249e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	75fb      	strb	r3, [r7, #23]
      break;
 800249c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_TIM_ConfigClockSource+0x1c>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e0b4      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x186>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80024ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002504:	d03e      	beq.n	8002584 <HAL_TIM_ConfigClockSource+0xd4>
 8002506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800250a:	f200 8087 	bhi.w	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800250e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002512:	f000 8086 	beq.w	8002622 <HAL_TIM_ConfigClockSource+0x172>
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800251a:	d87f      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800251c:	2b70      	cmp	r3, #112	@ 0x70
 800251e:	d01a      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0xa6>
 8002520:	2b70      	cmp	r3, #112	@ 0x70
 8002522:	d87b      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 8002524:	2b60      	cmp	r3, #96	@ 0x60
 8002526:	d050      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x11a>
 8002528:	2b60      	cmp	r3, #96	@ 0x60
 800252a:	d877      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800252c:	2b50      	cmp	r3, #80	@ 0x50
 800252e:	d03c      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0xfa>
 8002530:	2b50      	cmp	r3, #80	@ 0x50
 8002532:	d873      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 8002534:	2b40      	cmp	r3, #64	@ 0x40
 8002536:	d058      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x13a>
 8002538:	2b40      	cmp	r3, #64	@ 0x40
 800253a:	d86f      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800253c:	2b30      	cmp	r3, #48	@ 0x30
 800253e:	d064      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002540:	2b30      	cmp	r3, #48	@ 0x30
 8002542:	d86b      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 8002544:	2b20      	cmp	r3, #32
 8002546:	d060      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002548:	2b20      	cmp	r3, #32
 800254a:	d867      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b00      	cmp	r3, #0
 800254e:	d05c      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002550:	2b10      	cmp	r3, #16
 8002552:	d05a      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002554:	e062      	b.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002566:	f000 fafd 	bl	8002b64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	609a      	str	r2, [r3, #8]
      break;
 8002582:	e04f      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002594:	f000 fae6 	bl	8002b64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025a6:	609a      	str	r2, [r3, #8]
      break;
 80025a8:	e03c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b6:	461a      	mov	r2, r3
 80025b8:	f000 fa5a 	bl	8002a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2150      	movs	r1, #80	@ 0x50
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fab3 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 80025c8:	e02c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d6:	461a      	mov	r2, r3
 80025d8:	f000 fa79 	bl	8002ace <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2160      	movs	r1, #96	@ 0x60
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 faa3 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 80025e8:	e01c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f6:	461a      	mov	r2, r3
 80025f8:	f000 fa3a 	bl	8002a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2140      	movs	r1, #64	@ 0x40
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fa93 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 8002608:	e00c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4619      	mov	r1, r3
 8002614:	4610      	mov	r0, r2
 8002616:	f000 fa8a 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 800261a:	e003      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e000      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a3a      	ldr	r2, [pc, #232]	@ (800273c <TIM_Base_SetConfig+0xfc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00f      	beq.n	8002678 <TIM_Base_SetConfig+0x38>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800265e:	d00b      	beq.n	8002678 <TIM_Base_SetConfig+0x38>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a37      	ldr	r2, [pc, #220]	@ (8002740 <TIM_Base_SetConfig+0x100>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d007      	beq.n	8002678 <TIM_Base_SetConfig+0x38>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a36      	ldr	r2, [pc, #216]	@ (8002744 <TIM_Base_SetConfig+0x104>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d003      	beq.n	8002678 <TIM_Base_SetConfig+0x38>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a35      	ldr	r2, [pc, #212]	@ (8002748 <TIM_Base_SetConfig+0x108>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d108      	bne.n	800268a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800267e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a2b      	ldr	r2, [pc, #172]	@ (800273c <TIM_Base_SetConfig+0xfc>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d01b      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002698:	d017      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a28      	ldr	r2, [pc, #160]	@ (8002740 <TIM_Base_SetConfig+0x100>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a27      	ldr	r2, [pc, #156]	@ (8002744 <TIM_Base_SetConfig+0x104>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00f      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a26      	ldr	r2, [pc, #152]	@ (8002748 <TIM_Base_SetConfig+0x108>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00b      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a25      	ldr	r2, [pc, #148]	@ (800274c <TIM_Base_SetConfig+0x10c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a24      	ldr	r2, [pc, #144]	@ (8002750 <TIM_Base_SetConfig+0x110>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d003      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a23      	ldr	r2, [pc, #140]	@ (8002754 <TIM_Base_SetConfig+0x114>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d108      	bne.n	80026dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a0e      	ldr	r2, [pc, #56]	@ (800273c <TIM_Base_SetConfig+0xfc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d103      	bne.n	8002710 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d105      	bne.n	800272e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f023 0201 	bic.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	611a      	str	r2, [r3, #16]
  }
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40010000 	.word	0x40010000
 8002740:	40000400 	.word	0x40000400
 8002744:	40000800 	.word	0x40000800
 8002748:	40000c00 	.word	0x40000c00
 800274c:	40014000 	.word	0x40014000
 8002750:	40014400 	.word	0x40014400
 8002754:	40014800 	.word	0x40014800

08002758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f023 0201 	bic.w	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f023 0302 	bic.w	r3, r3, #2
 80027a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002820 <TIM_OC1_SetConfig+0xc8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d10c      	bne.n	80027ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f023 0308 	bic.w	r3, r3, #8
 80027ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f023 0304 	bic.w	r3, r3, #4
 80027cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a13      	ldr	r2, [pc, #76]	@ (8002820 <TIM_OC1_SetConfig+0xc8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d111      	bne.n	80027fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80027e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	621a      	str	r2, [r3, #32]
}
 8002814:	bf00      	nop
 8002816:	371c      	adds	r7, #28
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	40010000 	.word	0x40010000

08002824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f023 0210 	bic.w	r2, r3, #16
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800285a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f023 0320 	bic.w	r3, r3, #32
 800286e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a1e      	ldr	r2, [pc, #120]	@ (80028f8 <TIM_OC2_SetConfig+0xd4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d10d      	bne.n	80028a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800288a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800289e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a15      	ldr	r2, [pc, #84]	@ (80028f8 <TIM_OC2_SetConfig+0xd4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d113      	bne.n	80028d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	621a      	str	r2, [r3, #32]
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40010000 	.word	0x40010000

080028fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800292a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0303 	bic.w	r3, r3, #3
 8002932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1d      	ldr	r2, [pc, #116]	@ (80029cc <TIM_OC3_SetConfig+0xd0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d10d      	bne.n	8002976 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <TIM_OC3_SetConfig+0xd0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d113      	bne.n	80029a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800298c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	621a      	str	r2, [r3, #32]
}
 80029c0:	bf00      	nop
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40010000 	.word	0x40010000

080029d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	031b      	lsls	r3, r3, #12
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a10      	ldr	r2, [pc, #64]	@ (8002a6c <TIM_OC4_SetConfig+0x9c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d109      	bne.n	8002a44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	019b      	lsls	r3, r3, #6
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	621a      	str	r2, [r3, #32]
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40010000 	.word	0x40010000

08002a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f023 0201 	bic.w	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f023 030a 	bic.w	r3, r3, #10
 8002aac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	621a      	str	r2, [r3, #32]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b087      	sub	sp, #28
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f023 0210 	bic.w	r2, r3, #16
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	031b      	lsls	r3, r3, #12
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	621a      	str	r2, [r3, #32]
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f043 0307 	orr.w	r3, r3, #7
 8002b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	609a      	str	r2, [r3, #8]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	021a      	lsls	r2, r3, #8
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	609a      	str	r2, [r3, #8]
}
 8002b98:	bf00      	nop
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1a      	ldr	r2, [r3, #32]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a1a      	ldr	r2, [r3, #32]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	621a      	str	r2, [r3, #32]
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e050      	b.n	8002caa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d018      	beq.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c54:	d013      	beq.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a18      	ldr	r2, [pc, #96]	@ (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00e      	beq.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a16      	ldr	r2, [pc, #88]	@ (8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d009      	beq.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a15      	ldr	r2, [pc, #84]	@ (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d004      	beq.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a13      	ldr	r2, [pc, #76]	@ (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10c      	bne.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40010000 	.word	0x40010000
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	40000800 	.word	0x40000800
 8002cc4:	40000c00 	.word	0x40000c00
 8002cc8:	40014000 	.word	0x40014000

08002ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e042      	b.n	8002d64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe f88c 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2224      	movs	r2, #36	@ 0x24
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fcdb 	bl	80036cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	4613      	mov	r3, r2
 8002d78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d112      	bne.n	8002dac <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_UART_Receive_IT+0x26>
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e00b      	b.n	8002dae <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 faba 	bl	800331c <UART_Start_Receive_IT>
 8002da8:	4603      	mov	r3, r0
 8002daa:	e000      	b.n	8002dae <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b0ba      	sub	sp, #232	@ 0xe8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10f      	bne.n	8002e1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_UART_IRQHandler+0x66>
 8002e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fb99 	bl	800354e <UART_Receive_IT>
      return;
 8002e1c:	e25b      	b.n	80032d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 80de 	beq.w	8002fe4 <HAL_UART_IRQHandler+0x22c>
 8002e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d106      	bne.n	8002e42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e38:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80d1 	beq.w	8002fe4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_UART_IRQHandler+0xae>
 8002e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_UART_IRQHandler+0xd2>
 8002e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	f043 0202 	orr.w	r2, r3, #2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_UART_IRQHandler+0xf6>
 8002e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	f043 0204 	orr.w	r2, r3, #4
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d011      	beq.n	8002ede <HAL_UART_IRQHandler+0x126>
 8002eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	f043 0208 	orr.w	r2, r3, #8
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 81f2 	beq.w	80032cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_UART_IRQHandler+0x14e>
 8002ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fb24 	bl	800354e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f10:	2b40      	cmp	r3, #64	@ 0x40
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <HAL_UART_IRQHandler+0x17a>
 8002f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d04f      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fa2c 	bl	8003390 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f42:	2b40      	cmp	r3, #64	@ 0x40
 8002f44:	d141      	bne.n	8002fca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3314      	adds	r3, #20
 8002f4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f54:	e853 3f00 	ldrex	r3, [r3]
 8002f58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3314      	adds	r3, #20
 8002f6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f82:	e841 2300 	strex	r3, r2, [r1]
 8002f86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1d9      	bne.n	8002f46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d013      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003198 <HAL_UART_IRQHandler+0x3e0>)
 8002fa0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fa0f 	bl	80013ca <HAL_DMA_Abort_IT>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d016      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc0:	e00e      	b.n	8002fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f994 	bl	80032f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc8:	e00a      	b.n	8002fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f990 	bl	80032f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd0:	e006      	b.n	8002fe0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f98c 	bl	80032f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002fde:	e175      	b.n	80032cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe0:	bf00      	nop
    return;
 8002fe2:	e173      	b.n	80032cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	f040 814f 	bne.w	800328c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8148 	beq.w	800328c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8141 	beq.w	800328c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302a:	2b40      	cmp	r3, #64	@ 0x40
 800302c:	f040 80b6 	bne.w	800319c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800303c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8145 	beq.w	80032d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800304a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800304e:	429a      	cmp	r2, r3
 8003050:	f080 813e 	bcs.w	80032d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800305a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003066:	f000 8088 	beq.w	800317a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003080:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003096:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800309a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030a6:	e841 2300 	strex	r3, r2, [r1]
 80030aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1d9      	bne.n	800306a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3314      	adds	r3, #20
 80030bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3314      	adds	r3, #20
 80030d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030e6:	e841 2300 	strex	r3, r2, [r1]
 80030ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e1      	bne.n	80030b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3314      	adds	r3, #20
 80030f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3314      	adds	r3, #20
 8003112:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003116:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003118:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800311c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800311e:	e841 2300 	strex	r3, r2, [r1]
 8003122:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003124:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1e3      	bne.n	80030f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	330c      	adds	r3, #12
 800313e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003142:	e853 3f00 	ldrex	r3, [r3]
 8003146:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800314a:	f023 0310 	bic.w	r3, r3, #16
 800314e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	330c      	adds	r3, #12
 8003158:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800315c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800315e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003160:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003162:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800316a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e3      	bne.n	8003138 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003174:	4618      	mov	r0, r3
 8003176:	f7fe f8b8 	bl	80012ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003188:	b29b      	uxth	r3, r3
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	b29b      	uxth	r3, r3
 800318e:	4619      	mov	r1, r3
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f8b7 	bl	8003304 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003196:	e09b      	b.n	80032d0 <HAL_UART_IRQHandler+0x518>
 8003198:	08003457 	.word	0x08003457
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 808e 	beq.w	80032d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80031b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 8089 	beq.w	80032d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	330c      	adds	r3, #12
 80031c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80031e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80031e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031ee:	e841 2300 	strex	r3, r2, [r1]
 80031f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e3      	bne.n	80031c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3314      	adds	r3, #20
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	623b      	str	r3, [r7, #32]
   return(result);
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3314      	adds	r3, #20
 800321a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800321e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800322c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e3      	bne.n	80031fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	330c      	adds	r3, #12
 8003246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	e853 3f00 	ldrex	r3, [r3]
 800324e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0310 	bic.w	r3, r3, #16
 8003256:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	330c      	adds	r3, #12
 8003260:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003264:	61fa      	str	r2, [r7, #28]
 8003266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003268:	69b9      	ldr	r1, [r7, #24]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	e841 2300 	strex	r3, r2, [r1]
 8003270:	617b      	str	r3, [r7, #20]
   return(result);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e3      	bne.n	8003240 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800327e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003282:	4619      	mov	r1, r3
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f83d 	bl	8003304 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800328a:	e023      	b.n	80032d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800328c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <HAL_UART_IRQHandler+0x4f4>
 8003298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800329c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f8ea 	bl	800347e <UART_Transmit_IT>
    return;
 80032aa:	e014      	b.n	80032d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <HAL_UART_IRQHandler+0x51e>
 80032b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f92a 	bl	800351e <UART_EndTransmit_IT>
    return;
 80032ca:	e004      	b.n	80032d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80032cc:	bf00      	nop
 80032ce:	e002      	b.n	80032d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80032d0:	bf00      	nop
 80032d2:	e000      	b.n	80032d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80032d4:	bf00      	nop
  }
}
 80032d6:	37e8      	adds	r7, #232	@ 0xe8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	88fa      	ldrh	r2, [r7, #6]
 8003334:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2222      	movs	r2, #34	@ 0x22
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003360:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0220 	orr.w	r2, r2, #32
 8003380:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003390:	b480      	push	{r7}
 8003392:	b095      	sub	sp, #84	@ 0x54
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80033ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033c0:	e841 2300 	strex	r3, r2, [r1]
 80033c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e5      	bne.n	8003398 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3314      	adds	r3, #20
 80033d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	e853 3f00 	ldrex	r3, [r3]
 80033da:	61fb      	str	r3, [r7, #28]
   return(result);
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3314      	adds	r3, #20
 80033ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033f4:	e841 2300 	strex	r3, r2, [r1]
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e5      	bne.n	80033cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003404:	2b01      	cmp	r3, #1
 8003406:	d119      	bne.n	800343c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	e853 3f00 	ldrex	r3, [r3]
 8003416:	60bb      	str	r3, [r7, #8]
   return(result);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f023 0310 	bic.w	r3, r3, #16
 800341e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	330c      	adds	r3, #12
 8003426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003428:	61ba      	str	r2, [r7, #24]
 800342a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342c:	6979      	ldr	r1, [r7, #20]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	e841 2300 	strex	r3, r2, [r1]
 8003434:	613b      	str	r3, [r7, #16]
   return(result);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e5      	bne.n	8003408 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800344a:	bf00      	nop
 800344c:	3754      	adds	r7, #84	@ 0x54
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003462:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7ff ff3d 	bl	80032f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b21      	cmp	r3, #33	@ 0x21
 8003490:	d13e      	bne.n	8003510 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800349a:	d114      	bne.n	80034c6 <UART_Transmit_IT+0x48>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d110      	bne.n	80034c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	1c9a      	adds	r2, r3, #2
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	621a      	str	r2, [r3, #32]
 80034c4:	e008      	b.n	80034d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	1c59      	adds	r1, r3, #1
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6211      	str	r1, [r2, #32]
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4619      	mov	r1, r3
 80034e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10f      	bne.n	800350c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800350a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	e000      	b.n	8003512 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003510:	2302      	movs	r3, #2
  }
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003534:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff fecc 	bl	80032dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b08c      	sub	sp, #48	@ 0x30
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b22      	cmp	r3, #34	@ 0x22
 8003560:	f040 80ae 	bne.w	80036c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356c:	d117      	bne.n	800359e <UART_Receive_IT+0x50>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d113      	bne.n	800359e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	b29b      	uxth	r3, r3
 8003588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358c:	b29a      	uxth	r2, r3
 800358e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003590:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003596:	1c9a      	adds	r2, r3, #2
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	629a      	str	r2, [r3, #40]	@ 0x28
 800359c:	e026      	b.n	80035ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b0:	d007      	beq.n	80035c2 <UART_Receive_IT+0x74>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10a      	bne.n	80035d0 <UART_Receive_IT+0x82>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	e008      	b.n	80035e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4619      	mov	r1, r3
 80035fa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d15d      	bne.n	80036bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0220 	bic.w	r2, r2, #32
 800360e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800361e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	2b01      	cmp	r3, #1
 8003644:	d135      	bne.n	80036b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	613b      	str	r3, [r7, #16]
   return(result);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f023 0310 	bic.w	r3, r3, #16
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366c:	623a      	str	r2, [r7, #32]
 800366e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	69f9      	ldr	r1, [r7, #28]
 8003672:	6a3a      	ldr	r2, [r7, #32]
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	61bb      	str	r3, [r7, #24]
   return(result);
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b10      	cmp	r3, #16
 800368c:	d10a      	bne.n	80036a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036a8:	4619      	mov	r1, r3
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fe2a 	bl	8003304 <HAL_UARTEx_RxEventCallback>
 80036b0:	e002      	b.n	80036b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd f8a0 	bl	80007f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e002      	b.n	80036c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	e000      	b.n	80036c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80036c0:	2302      	movs	r3, #2
  }
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3730      	adds	r7, #48	@ 0x30
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d0:	b0c0      	sub	sp, #256	@ 0x100
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e8:	68d9      	ldr	r1, [r3, #12]
 80036ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	ea40 0301 	orr.w	r3, r0, r1
 80036f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	431a      	orrs	r2, r3
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	431a      	orrs	r2, r3
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003724:	f021 010c 	bic.w	r1, r1, #12
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003732:	430b      	orrs	r3, r1
 8003734:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003746:	6999      	ldr	r1, [r3, #24]
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	ea40 0301 	orr.w	r3, r0, r1
 8003752:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4b8f      	ldr	r3, [pc, #572]	@ (8003998 <UART_SetConfig+0x2cc>)
 800375c:	429a      	cmp	r2, r3
 800375e:	d005      	beq.n	800376c <UART_SetConfig+0xa0>
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4b8d      	ldr	r3, [pc, #564]	@ (800399c <UART_SetConfig+0x2d0>)
 8003768:	429a      	cmp	r2, r3
 800376a:	d104      	bne.n	8003776 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800376c:	f7fe fc72 	bl	8002054 <HAL_RCC_GetPCLK2Freq>
 8003770:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003774:	e003      	b.n	800377e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003776:	f7fe fc59 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 800377a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003788:	f040 810c 	bne.w	80039a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800378c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003790:	2200      	movs	r2, #0
 8003792:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003796:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800379a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800379e:	4622      	mov	r2, r4
 80037a0:	462b      	mov	r3, r5
 80037a2:	1891      	adds	r1, r2, r2
 80037a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037a6:	415b      	adcs	r3, r3
 80037a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037ae:	4621      	mov	r1, r4
 80037b0:	eb12 0801 	adds.w	r8, r2, r1
 80037b4:	4629      	mov	r1, r5
 80037b6:	eb43 0901 	adc.w	r9, r3, r1
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ce:	4690      	mov	r8, r2
 80037d0:	4699      	mov	r9, r3
 80037d2:	4623      	mov	r3, r4
 80037d4:	eb18 0303 	adds.w	r3, r8, r3
 80037d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037dc:	462b      	mov	r3, r5
 80037de:	eb49 0303 	adc.w	r3, r9, r3
 80037e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80037f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037fa:	460b      	mov	r3, r1
 80037fc:	18db      	adds	r3, r3, r3
 80037fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003800:	4613      	mov	r3, r2
 8003802:	eb42 0303 	adc.w	r3, r2, r3
 8003806:	657b      	str	r3, [r7, #84]	@ 0x54
 8003808:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800380c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003810:	f7fc fcec 	bl	80001ec <__aeabi_uldivmod>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4b61      	ldr	r3, [pc, #388]	@ (80039a0 <UART_SetConfig+0x2d4>)
 800381a:	fba3 2302 	umull	r2, r3, r3, r2
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	011c      	lsls	r4, r3, #4
 8003822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003826:	2200      	movs	r2, #0
 8003828:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800382c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003830:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003834:	4642      	mov	r2, r8
 8003836:	464b      	mov	r3, r9
 8003838:	1891      	adds	r1, r2, r2
 800383a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800383c:	415b      	adcs	r3, r3
 800383e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003840:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003844:	4641      	mov	r1, r8
 8003846:	eb12 0a01 	adds.w	sl, r2, r1
 800384a:	4649      	mov	r1, r9
 800384c:	eb43 0b01 	adc.w	fp, r3, r1
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800385c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003860:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003864:	4692      	mov	sl, r2
 8003866:	469b      	mov	fp, r3
 8003868:	4643      	mov	r3, r8
 800386a:	eb1a 0303 	adds.w	r3, sl, r3
 800386e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003872:	464b      	mov	r3, r9
 8003874:	eb4b 0303 	adc.w	r3, fp, r3
 8003878:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003888:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800388c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003890:	460b      	mov	r3, r1
 8003892:	18db      	adds	r3, r3, r3
 8003894:	643b      	str	r3, [r7, #64]	@ 0x40
 8003896:	4613      	mov	r3, r2
 8003898:	eb42 0303 	adc.w	r3, r2, r3
 800389c:	647b      	str	r3, [r7, #68]	@ 0x44
 800389e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80038a6:	f7fc fca1 	bl	80001ec <__aeabi_uldivmod>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4611      	mov	r1, r2
 80038b0:	4b3b      	ldr	r3, [pc, #236]	@ (80039a0 <UART_SetConfig+0x2d4>)
 80038b2:	fba3 2301 	umull	r2, r3, r3, r1
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	2264      	movs	r2, #100	@ 0x64
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	1acb      	subs	r3, r1, r3
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80038c6:	4b36      	ldr	r3, [pc, #216]	@ (80039a0 <UART_SetConfig+0x2d4>)
 80038c8:	fba3 2302 	umull	r2, r3, r3, r2
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80038d4:	441c      	add	r4, r3
 80038d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038da:	2200      	movs	r2, #0
 80038dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80038e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80038e8:	4642      	mov	r2, r8
 80038ea:	464b      	mov	r3, r9
 80038ec:	1891      	adds	r1, r2, r2
 80038ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80038f0:	415b      	adcs	r3, r3
 80038f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80038f8:	4641      	mov	r1, r8
 80038fa:	1851      	adds	r1, r2, r1
 80038fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80038fe:	4649      	mov	r1, r9
 8003900:	414b      	adcs	r3, r1
 8003902:	637b      	str	r3, [r7, #52]	@ 0x34
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003910:	4659      	mov	r1, fp
 8003912:	00cb      	lsls	r3, r1, #3
 8003914:	4651      	mov	r1, sl
 8003916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800391a:	4651      	mov	r1, sl
 800391c:	00ca      	lsls	r2, r1, #3
 800391e:	4610      	mov	r0, r2
 8003920:	4619      	mov	r1, r3
 8003922:	4603      	mov	r3, r0
 8003924:	4642      	mov	r2, r8
 8003926:	189b      	adds	r3, r3, r2
 8003928:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800392c:	464b      	mov	r3, r9
 800392e:	460a      	mov	r2, r1
 8003930:	eb42 0303 	adc.w	r3, r2, r3
 8003934:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003944:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003948:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800394c:	460b      	mov	r3, r1
 800394e:	18db      	adds	r3, r3, r3
 8003950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003952:	4613      	mov	r3, r2
 8003954:	eb42 0303 	adc.w	r3, r2, r3
 8003958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800395a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800395e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003962:	f7fc fc43 	bl	80001ec <__aeabi_uldivmod>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4b0d      	ldr	r3, [pc, #52]	@ (80039a0 <UART_SetConfig+0x2d4>)
 800396c:	fba3 1302 	umull	r1, r3, r3, r2
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	2164      	movs	r1, #100	@ 0x64
 8003974:	fb01 f303 	mul.w	r3, r1, r3
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	3332      	adds	r3, #50	@ 0x32
 800397e:	4a08      	ldr	r2, [pc, #32]	@ (80039a0 <UART_SetConfig+0x2d4>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	f003 0207 	and.w	r2, r3, #7
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4422      	add	r2, r4
 8003992:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003994:	e106      	b.n	8003ba4 <UART_SetConfig+0x4d8>
 8003996:	bf00      	nop
 8003998:	40011000 	.word	0x40011000
 800399c:	40011400 	.word	0x40011400
 80039a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80039b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80039b6:	4642      	mov	r2, r8
 80039b8:	464b      	mov	r3, r9
 80039ba:	1891      	adds	r1, r2, r2
 80039bc:	6239      	str	r1, [r7, #32]
 80039be:	415b      	adcs	r3, r3
 80039c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039c6:	4641      	mov	r1, r8
 80039c8:	1854      	adds	r4, r2, r1
 80039ca:	4649      	mov	r1, r9
 80039cc:	eb43 0501 	adc.w	r5, r3, r1
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	00eb      	lsls	r3, r5, #3
 80039da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039de:	00e2      	lsls	r2, r4, #3
 80039e0:	4614      	mov	r4, r2
 80039e2:	461d      	mov	r5, r3
 80039e4:	4643      	mov	r3, r8
 80039e6:	18e3      	adds	r3, r4, r3
 80039e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80039ec:	464b      	mov	r3, r9
 80039ee:	eb45 0303 	adc.w	r3, r5, r3
 80039f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80039f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a12:	4629      	mov	r1, r5
 8003a14:	008b      	lsls	r3, r1, #2
 8003a16:	4621      	mov	r1, r4
 8003a18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	008a      	lsls	r2, r1, #2
 8003a20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a24:	f7fc fbe2 	bl	80001ec <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4b60      	ldr	r3, [pc, #384]	@ (8003bb0 <UART_SetConfig+0x4e4>)
 8003a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	011c      	lsls	r4, r3, #4
 8003a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a48:	4642      	mov	r2, r8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	1891      	adds	r1, r2, r2
 8003a4e:	61b9      	str	r1, [r7, #24]
 8003a50:	415b      	adcs	r3, r3
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a58:	4641      	mov	r1, r8
 8003a5a:	1851      	adds	r1, r2, r1
 8003a5c:	6139      	str	r1, [r7, #16]
 8003a5e:	4649      	mov	r1, r9
 8003a60:	414b      	adcs	r3, r1
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a70:	4659      	mov	r1, fp
 8003a72:	00cb      	lsls	r3, r1, #3
 8003a74:	4651      	mov	r1, sl
 8003a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a7a:	4651      	mov	r1, sl
 8003a7c:	00ca      	lsls	r2, r1, #3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	4603      	mov	r3, r0
 8003a84:	4642      	mov	r2, r8
 8003a86:	189b      	adds	r3, r3, r2
 8003a88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a8c:	464b      	mov	r3, r9
 8003a8e:	460a      	mov	r2, r1
 8003a90:	eb42 0303 	adc.w	r3, r2, r3
 8003a94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003aa2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	008b      	lsls	r3, r1, #2
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aba:	4641      	mov	r1, r8
 8003abc:	008a      	lsls	r2, r1, #2
 8003abe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ac2:	f7fc fb93 	bl	80001ec <__aeabi_uldivmod>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	4b38      	ldr	r3, [pc, #224]	@ (8003bb0 <UART_SetConfig+0x4e4>)
 8003ace:	fba3 2301 	umull	r2, r3, r3, r1
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2264      	movs	r2, #100	@ 0x64
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	1acb      	subs	r3, r1, r3
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	3332      	adds	r3, #50	@ 0x32
 8003ae0:	4a33      	ldr	r2, [pc, #204]	@ (8003bb0 <UART_SetConfig+0x4e4>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003aec:	441c      	add	r4, r3
 8003aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003af2:	2200      	movs	r2, #0
 8003af4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003af6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003af8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	1891      	adds	r1, r2, r2
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	415b      	adcs	r3, r3
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	1851      	adds	r1, r2, r1
 8003b10:	6039      	str	r1, [r7, #0]
 8003b12:	4649      	mov	r1, r9
 8003b14:	414b      	adcs	r3, r1
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b24:	4659      	mov	r1, fp
 8003b26:	00cb      	lsls	r3, r1, #3
 8003b28:	4651      	mov	r1, sl
 8003b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2e:	4651      	mov	r1, sl
 8003b30:	00ca      	lsls	r2, r1, #3
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	4642      	mov	r2, r8
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b3e:	464b      	mov	r3, r9
 8003b40:	460a      	mov	r2, r1
 8003b42:	eb42 0303 	adc.w	r3, r2, r3
 8003b46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b52:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003b60:	4649      	mov	r1, r9
 8003b62:	008b      	lsls	r3, r1, #2
 8003b64:	4641      	mov	r1, r8
 8003b66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	008a      	lsls	r2, r1, #2
 8003b6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003b72:	f7fc fb3b 	bl	80001ec <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb0 <UART_SetConfig+0x4e4>)
 8003b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	2164      	movs	r1, #100	@ 0x64
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	3332      	adds	r3, #50	@ 0x32
 8003b8e:	4a08      	ldr	r2, [pc, #32]	@ (8003bb0 <UART_SetConfig+0x4e4>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	f003 020f 	and.w	r2, r3, #15
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4422      	add	r2, r4
 8003ba2:	609a      	str	r2, [r3, #8]
}
 8003ba4:	bf00      	nop
 8003ba6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003baa:	46bd      	mov	sp, r7
 8003bac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb0:	51eb851f 	.word	0x51eb851f

08003bb4 <memset>:
 8003bb4:	4402      	add	r2, r0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d100      	bne.n	8003bbe <memset+0xa>
 8003bbc:	4770      	bx	lr
 8003bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc2:	e7f9      	b.n	8003bb8 <memset+0x4>

08003bc4 <__libc_init_array>:
 8003bc4:	b570      	push	{r4, r5, r6, lr}
 8003bc6:	4d0d      	ldr	r5, [pc, #52]	@ (8003bfc <__libc_init_array+0x38>)
 8003bc8:	4c0d      	ldr	r4, [pc, #52]	@ (8003c00 <__libc_init_array+0x3c>)
 8003bca:	1b64      	subs	r4, r4, r5
 8003bcc:	10a4      	asrs	r4, r4, #2
 8003bce:	2600      	movs	r6, #0
 8003bd0:	42a6      	cmp	r6, r4
 8003bd2:	d109      	bne.n	8003be8 <__libc_init_array+0x24>
 8003bd4:	4d0b      	ldr	r5, [pc, #44]	@ (8003c04 <__libc_init_array+0x40>)
 8003bd6:	4c0c      	ldr	r4, [pc, #48]	@ (8003c08 <__libc_init_array+0x44>)
 8003bd8:	f000 f818 	bl	8003c0c <_init>
 8003bdc:	1b64      	subs	r4, r4, r5
 8003bde:	10a4      	asrs	r4, r4, #2
 8003be0:	2600      	movs	r6, #0
 8003be2:	42a6      	cmp	r6, r4
 8003be4:	d105      	bne.n	8003bf2 <__libc_init_array+0x2e>
 8003be6:	bd70      	pop	{r4, r5, r6, pc}
 8003be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bec:	4798      	blx	r3
 8003bee:	3601      	adds	r6, #1
 8003bf0:	e7ee      	b.n	8003bd0 <__libc_init_array+0xc>
 8003bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf6:	4798      	blx	r3
 8003bf8:	3601      	adds	r6, #1
 8003bfa:	e7f2      	b.n	8003be2 <__libc_init_array+0x1e>
 8003bfc:	08003c5c 	.word	0x08003c5c
 8003c00:	08003c5c 	.word	0x08003c5c
 8003c04:	08003c5c 	.word	0x08003c5c
 8003c08:	08003c60 	.word	0x08003c60

08003c0c <_init>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr

08003c18 <_fini>:
 8003c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1a:	bf00      	nop
 8003c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1e:	bc08      	pop	{r3}
 8003c20:	469e      	mov	lr, r3
 8003c22:	4770      	bx	lr
