
ZumoWireless.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003378  08003378  00004378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a8  080033a8  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  080033a8  080033a8  000043a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033b0  080033b0  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033b0  080033b0  000043b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033b4  080033b4  000043b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080033b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000014  080033cc  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080033cc  000051b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd16  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018de  00000000  00000000  00010d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00012638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000957  00000000  00000000  00013218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001610a  00000000  00000000  00013b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf94  00000000  00000000  00029c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de11  00000000  00000000  00036c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4a1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d0  00000000  00000000  000c4a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000c7d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003360 	.word	0x08003360

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08003360 	.word	0x08003360

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <straight_forward>:

/*
 * Moves Zumo forward in a straight line
 * Arguments: bpm - Determines the linear velocity of the Zumo
 */
void straight_forward(int bpm) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  *tim3_ccr2 &= ~CCR_MASK;
 80004f4:	4b17      	ldr	r3, [pc, #92]	@ (8000554 <straight_forward+0x68>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a16      	ldr	r2, [pc, #88]	@ (8000554 <straight_forward+0x68>)
 80004fc:	6812      	ldr	r2, [r2, #0]
 80004fe:	0c1b      	lsrs	r3, r3, #16
 8000500:	041b      	lsls	r3, r3, #16
 8000502:	6013      	str	r3, [r2, #0]
  *tim3_ccr2 |= bpm; // sets right motor speed
 8000504:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <straight_forward+0x68>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6819      	ldr	r1, [r3, #0]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <straight_forward+0x68>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	430a      	orrs	r2, r1
 8000512:	601a      	str	r2, [r3, #0]
  *tim4_ccr1 &= ~CCR_MASK;
 8000514:	4b10      	ldr	r3, [pc, #64]	@ (8000558 <straight_forward+0x6c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a0f      	ldr	r2, [pc, #60]	@ (8000558 <straight_forward+0x6c>)
 800051c:	6812      	ldr	r2, [r2, #0]
 800051e:	0c1b      	lsrs	r3, r3, #16
 8000520:	041b      	lsls	r3, r3, #16
 8000522:	6013      	str	r3, [r2, #0]
  *tim4_ccr1 |= bpm; // sets left motor speed
 8000524:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <straight_forward+0x6c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6819      	ldr	r1, [r3, #0]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <straight_forward+0x6c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	430a      	orrs	r2, r1
 8000532:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // sets right motor direction
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800053a:	4808      	ldr	r0, [pc, #32]	@ (800055c <straight_forward+0x70>)
 800053c:	f000 ffe4 	bl	8001508 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0); // sets left motor direction
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000546:	4805      	ldr	r0, [pc, #20]	@ (800055c <straight_forward+0x70>)
 8000548:	f000 ffde 	bl	8001508 <HAL_GPIO_WritePin>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004
 800055c:	40020000 	.word	0x40020000

08000560 <spin_cw>:

/*
 * Spins Zumo in place clockwise
 * Arguments: bpm - Determines the angular velocity of the Zumo
 */
void spin_cw(int bpm) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  *tim3_ccr2 &= ~CCR_MASK;
 8000568:	4b17      	ldr	r3, [pc, #92]	@ (80005c8 <spin_cw+0x68>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a16      	ldr	r2, [pc, #88]	@ (80005c8 <spin_cw+0x68>)
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	0c1b      	lsrs	r3, r3, #16
 8000574:	041b      	lsls	r3, r3, #16
 8000576:	6013      	str	r3, [r2, #0]
  *tim3_ccr2 |= bpm; // sets right motor speed
 8000578:	4b13      	ldr	r3, [pc, #76]	@ (80005c8 <spin_cw+0x68>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	6819      	ldr	r1, [r3, #0]
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <spin_cw+0x68>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	430a      	orrs	r2, r1
 8000586:	601a      	str	r2, [r3, #0]
  *tim4_ccr1 &= ~CCR_MASK;
 8000588:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <spin_cw+0x6c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a0f      	ldr	r2, [pc, #60]	@ (80005cc <spin_cw+0x6c>)
 8000590:	6812      	ldr	r2, [r2, #0]
 8000592:	0c1b      	lsrs	r3, r3, #16
 8000594:	041b      	lsls	r3, r3, #16
 8000596:	6013      	str	r3, [r2, #0]
  *tim4_ccr1 |= bpm; // sets left motor speed
 8000598:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <spin_cw+0x6c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	6819      	ldr	r1, [r3, #0]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <spin_cw+0x6c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	430a      	orrs	r2, r1
 80005a6:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1); // sets right motor direction
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ae:	4808      	ldr	r0, [pc, #32]	@ (80005d0 <spin_cw+0x70>)
 80005b0:	f000 ffaa 	bl	8001508 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0); // sets left motor direction
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005ba:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <spin_cw+0x70>)
 80005bc:	f000 ffa4 	bl	8001508 <HAL_GPIO_WritePin>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20000004 	.word	0x20000004
 80005d0:	40020000 	.word	0x40020000

080005d4 <spin_ccw>:

/*
 * Spins Zumo in place counter-clockwise
 * Arguments: bpm - Determines the angular velocity of the Zumo
 */
void spin_ccw(int bpm) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  *tim3_ccr2 &= ~CCR_MASK;
 80005dc:	4b17      	ldr	r3, [pc, #92]	@ (800063c <spin_ccw+0x68>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a16      	ldr	r2, [pc, #88]	@ (800063c <spin_ccw+0x68>)
 80005e4:	6812      	ldr	r2, [r2, #0]
 80005e6:	0c1b      	lsrs	r3, r3, #16
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	6013      	str	r3, [r2, #0]
  *tim3_ccr2 |= bpm; // sets right motor speed
 80005ec:	4b13      	ldr	r3, [pc, #76]	@ (800063c <spin_ccw+0x68>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	6819      	ldr	r1, [r3, #0]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <spin_ccw+0x68>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	430a      	orrs	r2, r1
 80005fa:	601a      	str	r2, [r3, #0]
  *tim4_ccr1 &= ~CCR_MASK;
 80005fc:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <spin_ccw+0x6c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a0f      	ldr	r2, [pc, #60]	@ (8000640 <spin_ccw+0x6c>)
 8000604:	6812      	ldr	r2, [r2, #0]
 8000606:	0c1b      	lsrs	r3, r3, #16
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	6013      	str	r3, [r2, #0]
  *tim4_ccr1 |= bpm; // sets left motor speed
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <spin_ccw+0x6c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6819      	ldr	r1, [r3, #0]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <spin_ccw+0x6c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	430a      	orrs	r2, r1
 800061a:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // sets right motor direction
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000622:	4808      	ldr	r0, [pc, #32]	@ (8000644 <spin_ccw+0x70>)
 8000624:	f000 ff70 	bl	8001508 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1); // sets left motor direction
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800062e:	4805      	ldr	r0, [pc, #20]	@ (8000644 <spin_ccw+0x70>)
 8000630:	f000 ff6a 	bl	8001508 <HAL_GPIO_WritePin>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000000 	.word	0x20000000
 8000640:	20000004 	.word	0x20000004
 8000644:	40020000 	.word	0x40020000

08000648 <create_table>:
#ifndef INC_GENRE_TABLE_H_
#define INC_GENRE_TABLE_H_

struct table_entry genre_table[3];

void create_table() {
 8000648:	b4b0      	push	{r4, r5, r7}
 800064a:	b0ab      	sub	sp, #172	@ 0xac
 800064c:	af00      	add	r7, sp, #0
	// Rock
	struct table_entry rock_entry;
	strcpy(rock_entry.genre, "JAZZ");
 800064e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000652:	4a27      	ldr	r2, [pc, #156]	@ (80006f0 <create_table+0xa8>)
 8000654:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000658:	6018      	str	r0, [r3, #0]
 800065a:	3304      	adds	r3, #4
 800065c:	7019      	strb	r1, [r3, #0]
	rock_entry.fun_ptr = &spin_cw;
 800065e:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <create_table+0xac>)
 8000660:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	genre_table[0] = rock_entry;
 8000664:	4b24      	ldr	r3, [pc, #144]	@ (80006f8 <create_table+0xb0>)
 8000666:	461d      	mov	r5, r3
 8000668:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800066c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800066e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000678:	e894 0003 	ldmia.w	r4, {r0, r1}
 800067c:	e885 0003 	stmia.w	r5, {r0, r1}

	// Pop
	struct table_entry pop_entry;
	strcpy(pop_entry.genre, "ROCK");
 8000680:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000684:	4a1d      	ldr	r2, [pc, #116]	@ (80006fc <create_table+0xb4>)
 8000686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800068a:	6018      	str	r0, [r3, #0]
 800068c:	3304      	adds	r3, #4
 800068e:	7019      	strb	r1, [r3, #0]
	pop_entry.fun_ptr = &spin_ccw;
 8000690:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <create_table+0xb8>)
 8000692:	66fb      	str	r3, [r7, #108]	@ 0x6c
	genre_table[1] = pop_entry;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <create_table+0xb0>)
 8000696:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 800069a:	f107 0538 	add.w	r5, r7, #56	@ 0x38
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006ae:	e884 0003 	stmia.w	r4, {r0, r1}

	// Country
	struct table_entry country_entry;
	strcpy(country_entry.genre, "GROOVY");
 80006b2:	463b      	mov	r3, r7
 80006b4:	4a13      	ldr	r2, [pc, #76]	@ (8000704 <create_table+0xbc>)
 80006b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ba:	6018      	str	r0, [r3, #0]
 80006bc:	3304      	adds	r3, #4
 80006be:	8019      	strh	r1, [r3, #0]
 80006c0:	3302      	adds	r3, #2
 80006c2:	0c0a      	lsrs	r2, r1, #16
 80006c4:	701a      	strb	r2, [r3, #0]
	country_entry.fun_ptr = &straight_forward;
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <create_table+0xc0>)
 80006c8:	637b      	str	r3, [r7, #52]	@ 0x34
	genre_table[2] = country_entry;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <create_table+0xb0>)
 80006cc:	f103 0470 	add.w	r4, r3, #112	@ 0x70
 80006d0:	463d      	mov	r5, r7
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006e2:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80006e6:	bf00      	nop
 80006e8:	37ac      	adds	r7, #172	@ 0xac
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bcb0      	pop	{r4, r5, r7}
 80006ee:	4770      	bx	lr
 80006f0:	08003378 	.word	0x08003378
 80006f4:	08000561 	.word	0x08000561
 80006f8:	20000030 	.word	0x20000030
 80006fc:	08003380 	.word	0x08003380
 8000700:	080005d5 	.word	0x080005d5
 8000704:	08003388 	.word	0x08003388
 8000708:	080004ed 	.word	0x080004ed

0800070c <start_dance>:

void start_dance(char *genre, uint8_t bpm) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
	uint8_t index;
	size_t length = sizeof(genre_table) / sizeof(genre_table[0]);
 8000718:	2303      	movs	r3, #3
 800071a:	60fb      	str	r3, [r7, #12]
	for (size_t i; i < length; i++) {
 800071c:	e013      	b.n	8000746 <start_dance+0x3a>
		if (!strcmp(genre_table[i].genre, genre)) {
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	4613      	mov	r3, r2
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	1a9b      	subs	r3, r3, r2
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	4a11      	ldr	r2, [pc, #68]	@ (8000770 <start_dance+0x64>)
 800072a:	4413      	add	r3, r2
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fd52 	bl	80001d8 <strcmp>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d102      	bne.n	8000740 <start_dance+0x34>
			index = i;
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	75fb      	strb	r3, [r7, #23]
			break;
 800073e:	e006      	b.n	800074e <start_dance+0x42>
	for (size_t i; i < length; i++) {
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	3301      	adds	r3, #1
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	429a      	cmp	r2, r3
 800074c:	d3e7      	bcc.n	800071e <start_dance+0x12>
		}
	}
	(*genre_table[index].fun_ptr)(bpm);
 800074e:	7dfa      	ldrb	r2, [r7, #23]
 8000750:	4907      	ldr	r1, [pc, #28]	@ (8000770 <start_dance+0x64>)
 8000752:	4613      	mov	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	440b      	add	r3, r1
 800075c:	3334      	adds	r3, #52	@ 0x34
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	78fa      	ldrb	r2, [r7, #3]
 8000762:	4610      	mov	r0, r2
 8000764:	4798      	blx	r3
}
 8000766:	bf00      	nop
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000030 	.word	0x20000030

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000778:	b089      	sub	sp, #36	@ 0x24
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	create_table();
 800077c:	f7ff ff64 	bl	8000648 <create_table>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f000 fbe6 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f868 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f000 f9e6 	bl	8000b58 <MX_GPIO_Init>
  MX_TIM3_Init();
 800078c:	f000 f8ce 	bl	800092c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000790:	f000 f942 	bl	8000a18 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000794:	f000 f9b6 	bl	8000b04 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000798:	2104      	movs	r1, #4
 800079a:	482c      	ldr	r0, [pc, #176]	@ (800084c <main+0xd8>)
 800079c:	f001 fc0e 	bl	8001fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80007a0:	2100      	movs	r1, #0
 80007a2:	482b      	ldr	r0, [pc, #172]	@ (8000850 <main+0xdc>)
 80007a4:	f001 fc0a 	bl	8001fbc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 80007a8:	466b      	mov	r3, sp
 80007aa:	461e      	mov	r6, r3
    /* USER CODE END WHILE */
	ZumoPacket song;
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, &song, sizeof(song), HAL_MAX_DELAY);
 80007ac:	1d39      	adds	r1, r7, #4
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	2209      	movs	r2, #9
 80007b4:	4827      	ldr	r0, [pc, #156]	@ (8000854 <main+0xe0>)
 80007b6:	f002 f9d1 	bl	8002b5c <HAL_UART_Receive>
 80007ba:	4603      	mov	r3, r0
 80007bc:	77bb      	strb	r3, [r7, #30]
	size_t len = strlen(song.genre) + 1;
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fd13 	bl	80001ec <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	3301      	adds	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
	char new_genre[len];
 80007cc:	69b9      	ldr	r1, [r7, #24]
 80007ce:	460b      	mov	r3, r1
 80007d0:	3b01      	subs	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	2300      	movs	r3, #0
 80007d6:	460c      	mov	r4, r1
 80007d8:	461d      	mov	r5, r3
 80007da:	f04f 0200 	mov.w	r2, #0
 80007de:	f04f 0300 	mov.w	r3, #0
 80007e2:	00eb      	lsls	r3, r5, #3
 80007e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007e8:	00e2      	lsls	r2, r4, #3
 80007ea:	2300      	movs	r3, #0
 80007ec:	4688      	mov	r8, r1
 80007ee:	4699      	mov	r9, r3
 80007f0:	f04f 0200 	mov.w	r2, #0
 80007f4:	f04f 0300 	mov.w	r3, #0
 80007f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000800:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000804:	1dcb      	adds	r3, r1, #7
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	ebad 0d03 	sub.w	sp, sp, r3
 800080e:	466b      	mov	r3, sp
 8000810:	3300      	adds	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
	memcpy(new_genre, song.genre, len);
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	69ba      	ldr	r2, [r7, #24]
 8000818:	4619      	mov	r1, r3
 800081a:	6938      	ldr	r0, [r7, #16]
 800081c:	f002 fd92 	bl	8003344 <memcpy>

	uint8_t bpm;
	if (song.bpm > 199) {
 8000820:	7b3b      	ldrb	r3, [r7, #12]
 8000822:	2bc7      	cmp	r3, #199	@ 0xc7
 8000824:	d902      	bls.n	800082c <main+0xb8>
		bpm = 199;
 8000826:	23c7      	movs	r3, #199	@ 0xc7
 8000828:	77fb      	strb	r3, [r7, #31]
 800082a:	e007      	b.n	800083c <main+0xc8>
	}
	else if (song.bpm < 60) {
 800082c:	7b3b      	ldrb	r3, [r7, #12]
 800082e:	2b3b      	cmp	r3, #59	@ 0x3b
 8000830:	d802      	bhi.n	8000838 <main+0xc4>
		bpm = 60;
 8000832:	233c      	movs	r3, #60	@ 0x3c
 8000834:	77fb      	strb	r3, [r7, #31]
 8000836:	e001      	b.n	800083c <main+0xc8>
	}
	else {
		bpm = song.bpm;
 8000838:	7b3b      	ldrb	r3, [r7, #12]
 800083a:	77fb      	strb	r3, [r7, #31]
	}

	start_dance(new_genre, bpm);
 800083c:	7ffb      	ldrb	r3, [r7, #31]
 800083e:	4619      	mov	r1, r3
 8000840:	6938      	ldr	r0, [r7, #16]
 8000842:	f7ff ff63 	bl	800070c <start_dance>
 8000846:	46b5      	mov	sp, r6
  {
 8000848:	e7ae      	b.n	80007a8 <main+0x34>
 800084a:	bf00      	nop
 800084c:	200000d8 	.word	0x200000d8
 8000850:	20000120 	.word	0x20000120
 8000854:	20000168 	.word	0x20000168

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	@ 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	@ 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f002 fd40 	bl	80032ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000884:	4a27      	ldr	r2, [pc, #156]	@ (8000924 <SystemClock_Config+0xcc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	@ 0x40
 800088c:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a21      	ldr	r2, [pc, #132]	@ (8000928 <SystemClock_Config+0xd0>)
 80008a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2310      	movs	r3, #16
 80008be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008c8:	2310      	movs	r3, #16
 80008ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008d2:	2304      	movs	r3, #4
 80008d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d6:	2304      	movs	r3, #4
 80008d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fe2c 	bl	800153c <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008ea:	f000 f9b5 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2302      	movs	r3, #2
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2102      	movs	r1, #2
 800090a:	4618      	mov	r0, r3
 800090c:	f001 f88e 	bl	8001a2c <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000916:	f000 f99f 	bl	8000c58 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	@ 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800095c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 800095e:	4a2d      	ldr	r2, [pc, #180]	@ (8000a14 <MX_TIM3_Init+0xe8>)
 8000960:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000962:	4b2b      	ldr	r3, [pc, #172]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b29      	ldr	r3, [pc, #164]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 800096e:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 8000970:	22c7      	movs	r2, #199	@ 0xc7
 8000972:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b25      	ldr	r3, [pc, #148]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000980:	4823      	ldr	r0, [pc, #140]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 8000982:	f001 fa73 	bl	8001e6c <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800098c:	f000 f964 	bl	8000c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000996:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800099a:	4619      	mov	r1, r3
 800099c:	481c      	ldr	r0, [pc, #112]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 800099e:	f001 fc7f 	bl	80022a0 <HAL_TIM_ConfigClockSource>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80009a8:	f000 f956 	bl	8000c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009ac:	4818      	ldr	r0, [pc, #96]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 80009ae:	f001 faac 	bl	8001f0a <HAL_TIM_PWM_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80009b8:	f000 f94e 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c4:	f107 0320 	add.w	r3, r7, #32
 80009c8:	4619      	mov	r1, r3
 80009ca:	4811      	ldr	r0, [pc, #68]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 80009cc:	f002 f808 	bl	80029e0 <HAL_TIMEx_MasterConfigSynchronization>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80009d6:	f000 f93f 	bl	8000c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009da:	2360      	movs	r3, #96	@ 0x60
 80009dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2204      	movs	r2, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4807      	ldr	r0, [pc, #28]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 80009f2:	f001 fb93 	bl	800211c <HAL_TIM_PWM_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80009fc:	f000 f92c 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a00:	4803      	ldr	r0, [pc, #12]	@ (8000a10 <MX_TIM3_Init+0xe4>)
 8000a02:	f000 f98f 	bl	8000d24 <HAL_TIM_MspPostInit>

}
 8000a06:	bf00      	nop
 8000a08:	3738      	adds	r7, #56	@ 0x38
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000d8 	.word	0x200000d8
 8000a14:	40000400 	.word	0x40000400

08000a18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	@ 0x38
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a48:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8000b00 <MX_TIM4_Init+0xe8>)
 8000a4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8000a5a:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a5c:	22c7      	movs	r2, #199	@ 0xc7
 8000a5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a66:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a6c:	4823      	ldr	r0, [pc, #140]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a6e:	f001 f9fd 	bl	8001e6c <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000a78:	f000 f8ee 	bl	8000c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a86:	4619      	mov	r1, r3
 8000a88:	481c      	ldr	r0, [pc, #112]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a8a:	f001 fc09 	bl	80022a0 <HAL_TIM_ConfigClockSource>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000a94:	f000 f8e0 	bl	8000c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a98:	4818      	ldr	r0, [pc, #96]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000a9a:	f001 fa36 	bl	8001f0a <HAL_TIM_PWM_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000aa4:	f000 f8d8 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4811      	ldr	r0, [pc, #68]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000ab8:	f001 ff92 	bl	80029e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000ac2:	f000 f8c9 	bl	8000c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac6:	2360      	movs	r3, #96	@ 0x60
 8000ac8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	4807      	ldr	r0, [pc, #28]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000ade:	f001 fb1d 	bl	800211c <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000ae8:	f000 f8b6 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000aec:	4803      	ldr	r0, [pc, #12]	@ (8000afc <MX_TIM4_Init+0xe4>)
 8000aee:	f000 f919 	bl	8000d24 <HAL_TIM_MspPostInit>

}
 8000af2:	bf00      	nop
 8000af4:	3738      	adds	r7, #56	@ 0x38
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000120 	.word	0x20000120
 8000b00:	40000800 	.word	0x40000800

08000b04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <MX_USART1_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b10:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_USART1_UART_Init+0x4c>)
 8000b3c:	f001 ffbe 	bl	8002abc <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 f887 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000168 	.word	0x20000168
 8000b54:	40011000 	.word	0x40011000

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b36      	ldr	r3, [pc, #216]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a35      	ldr	r2, [pc, #212]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b33      	ldr	r3, [pc, #204]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a2e      	ldr	r2, [pc, #184]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b28      	ldr	r3, [pc, #160]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a27      	ldr	r2, [pc, #156]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b25      	ldr	r3, [pc, #148]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b21      	ldr	r3, [pc, #132]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a20      	ldr	r2, [pc, #128]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c4c <MX_GPIO_Init+0xf4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000be4:	481a      	ldr	r0, [pc, #104]	@ (8000c50 <MX_GPIO_Init+0xf8>)
 8000be6:	f000 fc8f 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4814      	ldr	r0, [pc, #80]	@ (8000c54 <MX_GPIO_Init+0xfc>)
 8000c02:	f000 fafd 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c06:	230c      	movs	r3, #12
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c16:	2307      	movs	r3, #7
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <MX_GPIO_Init+0xf8>)
 8000c22:	f000 faed 	bl	8001200 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000c26:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4804      	ldr	r0, [pc, #16]	@ (8000c50 <MX_GPIO_Init+0xf8>)
 8000c40:	f000 fade 	bl	8001200 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	@ 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020800 	.word	0x40020800

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <Error_Handler+0x8>

08000c64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f000 fa78 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a15      	ldr	r2, [pc, #84]	@ (8000d18 <HAL_TIM_Base_MspInit+0x64>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10e      	bne.n	8000ce4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <HAL_TIM_Base_MspInit+0x68>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	4a13      	ldr	r2, [pc, #76]	@ (8000d1c <HAL_TIM_Base_MspInit+0x68>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <HAL_TIM_Base_MspInit+0x68>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ce2:	e012      	b.n	8000d0a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <HAL_TIM_Base_MspInit+0x6c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10d      	bne.n	8000d0a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_TIM_Base_MspInit+0x68>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	4a09      	ldr	r2, [pc, #36]	@ (8000d1c <HAL_TIM_Base_MspInit+0x68>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfe:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <HAL_TIM_Base_MspInit+0x68>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40000800 	.word	0x40000800

08000d24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a24      	ldr	r2, [pc, #144]	@ (8000dd4 <HAL_TIM_MspPostInit+0xb0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d11e      	bne.n	8000d84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b23      	ldr	r3, [pc, #140]	@ (8000dd8 <HAL_TIM_MspPostInit+0xb4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a22      	ldr	r2, [pc, #136]	@ (8000dd8 <HAL_TIM_MspPostInit+0xb4>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <HAL_TIM_MspPostInit+0xb4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d62:	2380      	movs	r3, #128	@ 0x80
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d72:	2302      	movs	r3, #2
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4817      	ldr	r0, [pc, #92]	@ (8000ddc <HAL_TIM_MspPostInit+0xb8>)
 8000d7e:	f000 fa3f 	bl	8001200 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d82:	e022      	b.n	8000dca <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a15      	ldr	r2, [pc, #84]	@ (8000de0 <HAL_TIM_MspPostInit+0xbc>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d11d      	bne.n	8000dca <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <HAL_TIM_MspPostInit+0xb4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a10      	ldr	r2, [pc, #64]	@ (8000dd8 <HAL_TIM_MspPostInit+0xb4>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <HAL_TIM_MspPostInit+0xb4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000daa:	2340      	movs	r3, #64	@ 0x40
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	@ (8000de4 <HAL_TIM_MspPostInit+0xc0>)
 8000dc6:	f000 fa1b 	bl	8001200 <HAL_GPIO_Init>
}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	@ 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40000400 	.word	0x40000400
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	40000800 	.word	0x40000800
 8000de4:	40020400 	.word	0x40020400

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	@ 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a19      	ldr	r2, [pc, #100]	@ (8000e6c <HAL_UART_MspInit+0x84>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12c      	bne.n	8000e64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <HAL_UART_MspInit+0x88>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e12:	4a17      	ldr	r2, [pc, #92]	@ (8000e70 <HAL_UART_MspInit+0x88>)
 8000e14:	f043 0310 	orr.w	r3, r3, #16
 8000e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <HAL_UART_MspInit+0x88>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <HAL_UART_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a10      	ldr	r2, [pc, #64]	@ (8000e70 <HAL_UART_MspInit+0x88>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <HAL_UART_MspInit+0x88>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000e42:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e54:	2307      	movs	r3, #7
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <HAL_UART_MspInit+0x8c>)
 8000e60:	f000 f9ce 	bl	8001200 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	@ 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40011000 	.word	0x40011000
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020000 	.word	0x40020000

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <NMI_Handler+0x4>

08000e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <MemManage_Handler+0x4>

08000e90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <UsageFault_Handler+0x4>

08000ea0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ece:	f000 f891 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f00:	f7ff ffea 	bl	8000ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	@ (8000f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f002 f9e7 	bl	80032fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fc21 	bl	8000774 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f40:	080033b8 	.word	0x080033b8
  ldr r2, =_sbss
 8000f44:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f48:	200001b4 	.word	0x200001b4

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <HAL_Init+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <HAL_Init+0x40>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	@ (8000f90 <HAL_Init+0x40>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f90d 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f808 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff fe6e 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f917 	bl	80011e6 <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 f8ed 	bl	80011ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	@ (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000010 	.word	0x20000010
 8000ff0:	2000000c 	.word	0x2000000c

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000010 	.word	0x20000010
 8001018:	200001b0 	.word	0x200001b0

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200001b0 	.word	0x200001b0

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	@ (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	@ 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	@ 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f7ff ff8e 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff47 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff5c 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff8e 	bl	80010ec <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5d 	bl	8001098 <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffb0 	bl	8001154 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	@ 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e159      	b.n	80014d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	429a      	cmp	r2, r3
 8001236:	f040 8148 	bne.w	80014ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d005      	beq.n	8001252 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124e:	2b02      	cmp	r3, #2
 8001250:	d130      	bne.n	80012b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	f003 0201 	and.w	r2, r3, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d017      	beq.n	80012f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d123      	bne.n	8001344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	08da      	lsrs	r2, r3, #3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3208      	adds	r2, #8
 8001304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	220f      	movs	r2, #15
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	08da      	lsrs	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3208      	adds	r2, #8
 800133e:	69b9      	ldr	r1, [r7, #24]
 8001340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0203 	and.w	r2, r3, #3
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80a2 	beq.w	80014ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b57      	ldr	r3, [pc, #348]	@ (80014e8 <HAL_GPIO_Init+0x2e8>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138e:	4a56      	ldr	r2, [pc, #344]	@ (80014e8 <HAL_GPIO_Init+0x2e8>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001394:	6453      	str	r3, [r2, #68]	@ 0x44
 8001396:	4b54      	ldr	r3, [pc, #336]	@ (80014e8 <HAL_GPIO_Init+0x2e8>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a2:	4a52      	ldr	r2, [pc, #328]	@ (80014ec <HAL_GPIO_Init+0x2ec>)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	220f      	movs	r2, #15
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a49      	ldr	r2, [pc, #292]	@ (80014f0 <HAL_GPIO_Init+0x2f0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d019      	beq.n	8001402 <HAL_GPIO_Init+0x202>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a48      	ldr	r2, [pc, #288]	@ (80014f4 <HAL_GPIO_Init+0x2f4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d013      	beq.n	80013fe <HAL_GPIO_Init+0x1fe>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a47      	ldr	r2, [pc, #284]	@ (80014f8 <HAL_GPIO_Init+0x2f8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00d      	beq.n	80013fa <HAL_GPIO_Init+0x1fa>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a46      	ldr	r2, [pc, #280]	@ (80014fc <HAL_GPIO_Init+0x2fc>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d007      	beq.n	80013f6 <HAL_GPIO_Init+0x1f6>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a45      	ldr	r2, [pc, #276]	@ (8001500 <HAL_GPIO_Init+0x300>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_GPIO_Init+0x1f2>
 80013ee:	2304      	movs	r3, #4
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x204>
 80013f2:	2307      	movs	r3, #7
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x204>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x204>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x204>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x204>
 8001402:	2300      	movs	r3, #0
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001414:	4935      	ldr	r1, [pc, #212]	@ (80014ec <HAL_GPIO_Init+0x2ec>)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001422:	4b38      	ldr	r3, [pc, #224]	@ (8001504 <HAL_GPIO_Init+0x304>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001446:	4a2f      	ldr	r2, [pc, #188]	@ (8001504 <HAL_GPIO_Init+0x304>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800144c:	4b2d      	ldr	r3, [pc, #180]	@ (8001504 <HAL_GPIO_Init+0x304>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001470:	4a24      	ldr	r2, [pc, #144]	@ (8001504 <HAL_GPIO_Init+0x304>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001476:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <HAL_GPIO_Init+0x304>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149a:	4a1a      	ldr	r2, [pc, #104]	@ (8001504 <HAL_GPIO_Init+0x304>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <HAL_GPIO_Init+0x304>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001504 <HAL_GPIO_Init+0x304>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	f67f aea2 	bls.w	800121c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3724      	adds	r7, #36	@ 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40013800 	.word	0x40013800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40021000 	.word	0x40021000
 8001504:	40013c00 	.word	0x40013c00

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001524:	e003      	b.n	800152e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	041a      	lsls	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	619a      	str	r2, [r3, #24]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e267      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d075      	beq.n	8001646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800155a:	4b88      	ldr	r3, [pc, #544]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 030c 	and.w	r3, r3, #12
 8001562:	2b04      	cmp	r3, #4
 8001564:	d00c      	beq.n	8001580 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001566:	4b85      	ldr	r3, [pc, #532]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800156e:	2b08      	cmp	r3, #8
 8001570:	d112      	bne.n	8001598 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001572:	4b82      	ldr	r3, [pc, #520]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800157a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800157e:	d10b      	bne.n	8001598 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	4b7e      	ldr	r3, [pc, #504]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d05b      	beq.n	8001644 <HAL_RCC_OscConfig+0x108>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d157      	bne.n	8001644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e242      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a0:	d106      	bne.n	80015b0 <HAL_RCC_OscConfig+0x74>
 80015a2:	4b76      	ldr	r3, [pc, #472]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a75      	ldr	r2, [pc, #468]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e01d      	b.n	80015ec <HAL_RCC_OscConfig+0xb0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x98>
 80015ba:	4b70      	ldr	r3, [pc, #448]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a6f      	ldr	r2, [pc, #444]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b6d      	ldr	r3, [pc, #436]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a6c      	ldr	r2, [pc, #432]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0xb0>
 80015d4:	4b69      	ldr	r3, [pc, #420]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a68      	ldr	r2, [pc, #416]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b66      	ldr	r3, [pc, #408]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a65      	ldr	r2, [pc, #404]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fd12 	bl	800101c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fd0e 	bl	800101c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	@ 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e207      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	4b5b      	ldr	r3, [pc, #364]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0xc0>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fcfe 	bl	800101c <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fcfa 	bl	800101c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	@ 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1f3      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001636:	4b51      	ldr	r3, [pc, #324]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0xe8>
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d063      	beq.n	800171a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001652:	4b4a      	ldr	r3, [pc, #296]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00b      	beq.n	8001676 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165e:	4b47      	ldr	r3, [pc, #284]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001666:	2b08      	cmp	r3, #8
 8001668:	d11c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166a:	4b44      	ldr	r3, [pc, #272]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d116      	bne.n	80016a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001676:	4b41      	ldr	r3, [pc, #260]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_RCC_OscConfig+0x152>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d001      	beq.n	800168e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e1c7      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	4b3b      	ldr	r3, [pc, #236]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4937      	ldr	r1, [pc, #220]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	e03a      	b.n	800171a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d020      	beq.n	80016ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ac:	4b34      	ldr	r3, [pc, #208]	@ (8001780 <HAL_RCC_OscConfig+0x244>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b2:	f7ff fcb3 	bl	800101c <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ba:	f7ff fcaf 	bl	800101c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e1a8      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016cc:	4b2b      	ldr	r3, [pc, #172]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4b28      	ldr	r3, [pc, #160]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4925      	ldr	r1, [pc, #148]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
 80016ec:	e015      	b.n	800171a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ee:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <HAL_RCC_OscConfig+0x244>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fc92 	bl	800101c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff fc8e 	bl	800101c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e187      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170e:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d036      	beq.n	8001794 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d016      	beq.n	800175c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_RCC_OscConfig+0x248>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff fc72 	bl	800101c <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff fc6e 	bl	800101c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e167      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <HAL_RCC_OscConfig+0x240>)
 8001750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x200>
 800175a:	e01b      	b.n	8001794 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <HAL_RCC_OscConfig+0x248>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff fc5b 	bl	800101c <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	e00e      	b.n	8001788 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff fc57 	bl	800101c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d907      	bls.n	8001788 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e150      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
 800177c:	40023800 	.word	0x40023800
 8001780:	42470000 	.word	0x42470000
 8001784:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001788:	4b88      	ldr	r3, [pc, #544]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800178a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ea      	bne.n	800176a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 8097 	beq.w	80018d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a6:	4b81      	ldr	r3, [pc, #516]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10f      	bne.n	80017d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b7d      	ldr	r3, [pc, #500]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	4a7c      	ldr	r2, [pc, #496]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c2:	4b7a      	ldr	r3, [pc, #488]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ce:	2301      	movs	r3, #1
 80017d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d2:	4b77      	ldr	r3, [pc, #476]	@ (80019b0 <HAL_RCC_OscConfig+0x474>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d118      	bne.n	8001810 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017de:	4b74      	ldr	r3, [pc, #464]	@ (80019b0 <HAL_RCC_OscConfig+0x474>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a73      	ldr	r2, [pc, #460]	@ (80019b0 <HAL_RCC_OscConfig+0x474>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ea:	f7ff fc17 	bl	800101c <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f2:	f7ff fc13 	bl	800101c <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e10c      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	4b6a      	ldr	r3, [pc, #424]	@ (80019b0 <HAL_RCC_OscConfig+0x474>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x2ea>
 8001818:	4b64      	ldr	r3, [pc, #400]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181c:	4a63      	ldr	r2, [pc, #396]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6713      	str	r3, [r2, #112]	@ 0x70
 8001824:	e01c      	b.n	8001860 <HAL_RCC_OscConfig+0x324>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b05      	cmp	r3, #5
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x30c>
 800182e:	4b5f      	ldr	r3, [pc, #380]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001832:	4a5e      	ldr	r2, [pc, #376]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6713      	str	r3, [r2, #112]	@ 0x70
 800183a:	4b5c      	ldr	r3, [pc, #368]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800183c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800183e:	4a5b      	ldr	r2, [pc, #364]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6713      	str	r3, [r2, #112]	@ 0x70
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0x324>
 8001848:	4b58      	ldr	r3, [pc, #352]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184c:	4a57      	ldr	r2, [pc, #348]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	6713      	str	r3, [r2, #112]	@ 0x70
 8001854:	4b55      	ldr	r3, [pc, #340]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001858:	4a54      	ldr	r2, [pc, #336]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 800185a:	f023 0304 	bic.w	r3, r3, #4
 800185e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d015      	beq.n	8001894 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff fbd8 	bl	800101c <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186e:	e00a      	b.n	8001886 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001870:	f7ff fbd4 	bl	800101c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e0cb      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001886:	4b49      	ldr	r3, [pc, #292]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0ee      	beq.n	8001870 <HAL_RCC_OscConfig+0x334>
 8001892:	e014      	b.n	80018be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001894:	f7ff fbc2 	bl	800101c <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7ff fbbe 	bl	800101c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e0b5      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b2:	4b3e      	ldr	r3, [pc, #248]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ee      	bne.n	800189c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c4:	4b39      	ldr	r3, [pc, #228]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	4a38      	ldr	r2, [pc, #224]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80018ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a1 	beq.w	8001a1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018da:	4b34      	ldr	r3, [pc, #208]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d05c      	beq.n	80019a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d141      	bne.n	8001972 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b31      	ldr	r3, [pc, #196]	@ (80019b4 <HAL_RCC_OscConfig+0x478>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fb92 	bl	800101c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff fb8e 	bl	800101c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e087      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	4b27      	ldr	r3, [pc, #156]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	019b      	lsls	r3, r3, #6
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	3b01      	subs	r3, #1
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	491b      	ldr	r1, [pc, #108]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001944:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <HAL_RCC_OscConfig+0x478>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff fb67 	bl	800101c <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001952:	f7ff fb63 	bl	800101c <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e05c      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001964:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x416>
 8001970:	e054      	b.n	8001a1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <HAL_RCC_OscConfig+0x478>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fb50 	bl	800101c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff fb4c 	bl	800101c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e045      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_RCC_OscConfig+0x470>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x444>
 800199e:	e03d      	b.n	8001a1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e038      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40007000 	.word	0x40007000
 80019b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <HAL_RCC_OscConfig+0x4ec>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d028      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d121      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d11a      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d111      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fe:	085b      	lsrs	r3, r3, #1
 8001a00:	3b01      	subs	r3, #1
 8001a02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0cc      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a40:	4b68      	ldr	r3, [pc, #416]	@ (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d90c      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b65      	ldr	r3, [pc, #404]	@ (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b63      	ldr	r3, [pc, #396]	@ (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0b8      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d020      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a80:	4b59      	ldr	r3, [pc, #356]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a58      	ldr	r2, [pc, #352]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a98:	4b53      	ldr	r3, [pc, #332]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001aa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa4:	4b50      	ldr	r3, [pc, #320]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	494d      	ldr	r1, [pc, #308]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d044      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b47      	ldr	r3, [pc, #284]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d119      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e07f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d003      	beq.n	8001aea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	4b3f      	ldr	r3, [pc, #252]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e06f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afa:	4b3b      	ldr	r3, [pc, #236]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e067      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0a:	4b37      	ldr	r3, [pc, #220]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f023 0203 	bic.w	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4934      	ldr	r1, [pc, #208]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b1c:	f7ff fa7e 	bl	800101c <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7ff fa7a 	bl	800101c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e04f      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 020c 	and.w	r2, r3, #12
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d1eb      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d20c      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b20      	ldr	r3, [pc, #128]	@ (8001be4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e032      	b.n	8001bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4916      	ldr	r1, [pc, #88]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9e:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	490e      	ldr	r1, [pc, #56]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bb2:	f000 f821 	bl	8001bf8 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	490a      	ldr	r1, [pc, #40]	@ (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	4a09      	ldr	r2, [pc, #36]	@ (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bce:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f9de 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023c00 	.word	0x40023c00
 8001be8:	40023800 	.word	0x40023800
 8001bec:	08003390 	.word	0x08003390
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	2000000c 	.word	0x2000000c

08001bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bfc:	b094      	sub	sp, #80	@ 0x50
 8001bfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c10:	4b79      	ldr	r3, [pc, #484]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d00d      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x40>
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	f200 80e1 	bhi.w	8001de4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x34>
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c2a:	e0db      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b73      	ldr	r3, [pc, #460]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c30:	e0db      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c32:	4b73      	ldr	r3, [pc, #460]	@ (8001e00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c36:	e0d8      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c38:	4b6f      	ldr	r3, [pc, #444]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c42:	4b6d      	ldr	r3, [pc, #436]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d063      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	099b      	lsrs	r3, r3, #6
 8001c54:	2200      	movs	r2, #0
 8001c56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c60:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c62:	2300      	movs	r3, #0
 8001c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	f04f 0000 	mov.w	r0, #0
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	0159      	lsls	r1, r3, #5
 8001c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c7c:	0150      	lsls	r0, r2, #5
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4621      	mov	r1, r4
 8001c84:	1a51      	subs	r1, r2, r1
 8001c86:	6139      	str	r1, [r7, #16]
 8001c88:	4629      	mov	r1, r5
 8001c8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c9c:	4659      	mov	r1, fp
 8001c9e:	018b      	lsls	r3, r1, #6
 8001ca0:	4651      	mov	r1, sl
 8001ca2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca6:	4651      	mov	r1, sl
 8001ca8:	018a      	lsls	r2, r1, #6
 8001caa:	4651      	mov	r1, sl
 8001cac:	ebb2 0801 	subs.w	r8, r2, r1
 8001cb0:	4659      	mov	r1, fp
 8001cb2:	eb63 0901 	sbc.w	r9, r3, r1
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cca:	4690      	mov	r8, r2
 8001ccc:	4699      	mov	r9, r3
 8001cce:	4623      	mov	r3, r4
 8001cd0:	eb18 0303 	adds.w	r3, r8, r3
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	462b      	mov	r3, r5
 8001cd8:	eb49 0303 	adc.w	r3, r9, r3
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cea:	4629      	mov	r1, r5
 8001cec:	024b      	lsls	r3, r1, #9
 8001cee:	4621      	mov	r1, r4
 8001cf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cf4:	4621      	mov	r1, r4
 8001cf6:	024a      	lsls	r2, r1, #9
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cfe:	2200      	movs	r2, #0
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d08:	f7fe fa78 	bl	80001fc <__aeabi_uldivmod>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4613      	mov	r3, r2
 8001d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d14:	e058      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d16:	4b38      	ldr	r3, [pc, #224]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	099b      	lsrs	r3, r3, #6
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4611      	mov	r1, r2
 8001d22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d30:	4642      	mov	r2, r8
 8001d32:	464b      	mov	r3, r9
 8001d34:	f04f 0000 	mov.w	r0, #0
 8001d38:	f04f 0100 	mov.w	r1, #0
 8001d3c:	0159      	lsls	r1, r3, #5
 8001d3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d42:	0150      	lsls	r0, r2, #5
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4641      	mov	r1, r8
 8001d4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d4e:	4649      	mov	r1, r9
 8001d50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d68:	ebb2 040a 	subs.w	r4, r2, sl
 8001d6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	00eb      	lsls	r3, r5, #3
 8001d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d7e:	00e2      	lsls	r2, r4, #3
 8001d80:	4614      	mov	r4, r2
 8001d82:	461d      	mov	r5, r3
 8001d84:	4643      	mov	r3, r8
 8001d86:	18e3      	adds	r3, r4, r3
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	464b      	mov	r3, r9
 8001d8c:	eb45 0303 	adc.w	r3, r5, r3
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d9e:	4629      	mov	r1, r5
 8001da0:	028b      	lsls	r3, r1, #10
 8001da2:	4621      	mov	r1, r4
 8001da4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da8:	4621      	mov	r1, r4
 8001daa:	028a      	lsls	r2, r1, #10
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001db2:	2200      	movs	r2, #0
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	61fa      	str	r2, [r7, #28]
 8001db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dbc:	f7fe fa1e 	bl	80001fc <__aeabi_uldivmod>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001dd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001de2:	e002      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001de6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3750      	adds	r7, #80	@ 0x50
 8001df0:	46bd      	mov	sp, r7
 8001df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	00f42400 	.word	0x00f42400
 8001e00:	007a1200 	.word	0x007a1200

08001e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e08:	4b03      	ldr	r3, [pc, #12]	@ (8001e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000008 	.word	0x20000008

08001e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e20:	f7ff fff0 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0a9b      	lsrs	r3, r3, #10
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4903      	ldr	r1, [pc, #12]	@ (8001e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e32:	5ccb      	ldrb	r3, [r1, r3]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	080033a0 	.word	0x080033a0

08001e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e48:	f7ff ffdc 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0b5b      	lsrs	r3, r3, #13
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4903      	ldr	r1, [pc, #12]	@ (8001e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	080033a0 	.word	0x080033a0

08001e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e041      	b.n	8001f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe ff0e 	bl	8000cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f000 fac0 	bl	8002430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e041      	b.n	8001fa0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d106      	bne.n	8001f36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f839 	bl	8001fa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3304      	adds	r3, #4
 8001f46:	4619      	mov	r1, r3
 8001f48:	4610      	mov	r0, r2
 8001f4a:	f000 fa71 	bl	8002430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_TIM_PWM_Start+0x24>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	e022      	b.n	8002026 <HAL_TIM_PWM_Start+0x6a>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d109      	bne.n	8001ffa <HAL_TIM_PWM_Start+0x3e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	bf14      	ite	ne
 8001ff2:	2301      	movne	r3, #1
 8001ff4:	2300      	moveq	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	e015      	b.n	8002026 <HAL_TIM_PWM_Start+0x6a>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d109      	bne.n	8002014 <HAL_TIM_PWM_Start+0x58>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b01      	cmp	r3, #1
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	e008      	b.n	8002026 <HAL_TIM_PWM_Start+0x6a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	bf14      	ite	ne
 8002020:	2301      	movne	r3, #1
 8002022:	2300      	moveq	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e068      	b.n	8002100 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d104      	bne.n	800203e <HAL_TIM_PWM_Start+0x82>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800203c:	e013      	b.n	8002066 <HAL_TIM_PWM_Start+0xaa>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b04      	cmp	r3, #4
 8002042:	d104      	bne.n	800204e <HAL_TIM_PWM_Start+0x92>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800204c:	e00b      	b.n	8002066 <HAL_TIM_PWM_Start+0xaa>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d104      	bne.n	800205e <HAL_TIM_PWM_Start+0xa2>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800205c:	e003      	b.n	8002066 <HAL_TIM_PWM_Start+0xaa>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2202      	movs	r2, #2
 8002062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2201      	movs	r2, #1
 800206c:	6839      	ldr	r1, [r7, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fc90 	bl	8002994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a23      	ldr	r2, [pc, #140]	@ (8002108 <HAL_TIM_PWM_Start+0x14c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d107      	bne.n	800208e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800208c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1d      	ldr	r2, [pc, #116]	@ (8002108 <HAL_TIM_PWM_Start+0x14c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d018      	beq.n	80020ca <HAL_TIM_PWM_Start+0x10e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a0:	d013      	beq.n	80020ca <HAL_TIM_PWM_Start+0x10e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a19      	ldr	r2, [pc, #100]	@ (800210c <HAL_TIM_PWM_Start+0x150>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d00e      	beq.n	80020ca <HAL_TIM_PWM_Start+0x10e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a17      	ldr	r2, [pc, #92]	@ (8002110 <HAL_TIM_PWM_Start+0x154>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d009      	beq.n	80020ca <HAL_TIM_PWM_Start+0x10e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a16      	ldr	r2, [pc, #88]	@ (8002114 <HAL_TIM_PWM_Start+0x158>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d004      	beq.n	80020ca <HAL_TIM_PWM_Start+0x10e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a14      	ldr	r2, [pc, #80]	@ (8002118 <HAL_TIM_PWM_Start+0x15c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d111      	bne.n	80020ee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b06      	cmp	r3, #6
 80020da:	d010      	beq.n	80020fe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ec:	e007      	b.n	80020fe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0201 	orr.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40010000 	.word	0x40010000
 800210c:	40000400 	.word	0x40000400
 8002110:	40000800 	.word	0x40000800
 8002114:	40000c00 	.word	0x40000c00
 8002118:	40014000 	.word	0x40014000

0800211c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002136:	2302      	movs	r3, #2
 8002138:	e0ae      	b.n	8002298 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0c      	cmp	r3, #12
 8002146:	f200 809f 	bhi.w	8002288 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800214a:	a201      	add	r2, pc, #4	@ (adr r2, 8002150 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800214c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002150:	08002185 	.word	0x08002185
 8002154:	08002289 	.word	0x08002289
 8002158:	08002289 	.word	0x08002289
 800215c:	08002289 	.word	0x08002289
 8002160:	080021c5 	.word	0x080021c5
 8002164:	08002289 	.word	0x08002289
 8002168:	08002289 	.word	0x08002289
 800216c:	08002289 	.word	0x08002289
 8002170:	08002207 	.word	0x08002207
 8002174:	08002289 	.word	0x08002289
 8002178:	08002289 	.word	0x08002289
 800217c:	08002289 	.word	0x08002289
 8002180:	08002247 	.word	0x08002247
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f9dc 	bl	8002548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0208 	orr.w	r2, r2, #8
 800219e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0204 	bic.w	r2, r2, #4
 80021ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6999      	ldr	r1, [r3, #24]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	619a      	str	r2, [r3, #24]
      break;
 80021c2:	e064      	b.n	800228e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fa22 	bl	8002614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699a      	ldr	r2, [r3, #24]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6999      	ldr	r1, [r3, #24]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	021a      	lsls	r2, r3, #8
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	619a      	str	r2, [r3, #24]
      break;
 8002204:	e043      	b.n	800228e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fa6d 	bl	80026ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0208 	orr.w	r2, r2, #8
 8002220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69da      	ldr	r2, [r3, #28]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0204 	bic.w	r2, r2, #4
 8002230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69d9      	ldr	r1, [r3, #28]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	61da      	str	r2, [r3, #28]
      break;
 8002244:	e023      	b.n	800228e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fab7 	bl	80027c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69da      	ldr	r2, [r3, #28]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69d9      	ldr	r1, [r3, #28]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	021a      	lsls	r2, r3, #8
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	61da      	str	r2, [r3, #28]
      break;
 8002286:	e002      	b.n	800228e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	75fb      	strb	r3, [r7, #23]
      break;
 800228c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002296:	7dfb      	ldrb	r3, [r7, #23]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_TIM_ConfigClockSource+0x1c>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e0b4      	b.n	8002426 <HAL_TIM_ConfigClockSource+0x186>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80022da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022f4:	d03e      	beq.n	8002374 <HAL_TIM_ConfigClockSource+0xd4>
 80022f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022fa:	f200 8087 	bhi.w	800240c <HAL_TIM_ConfigClockSource+0x16c>
 80022fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002302:	f000 8086 	beq.w	8002412 <HAL_TIM_ConfigClockSource+0x172>
 8002306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800230a:	d87f      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 800230c:	2b70      	cmp	r3, #112	@ 0x70
 800230e:	d01a      	beq.n	8002346 <HAL_TIM_ConfigClockSource+0xa6>
 8002310:	2b70      	cmp	r3, #112	@ 0x70
 8002312:	d87b      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 8002314:	2b60      	cmp	r3, #96	@ 0x60
 8002316:	d050      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x11a>
 8002318:	2b60      	cmp	r3, #96	@ 0x60
 800231a:	d877      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 800231c:	2b50      	cmp	r3, #80	@ 0x50
 800231e:	d03c      	beq.n	800239a <HAL_TIM_ConfigClockSource+0xfa>
 8002320:	2b50      	cmp	r3, #80	@ 0x50
 8002322:	d873      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 8002324:	2b40      	cmp	r3, #64	@ 0x40
 8002326:	d058      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x13a>
 8002328:	2b40      	cmp	r3, #64	@ 0x40
 800232a:	d86f      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 800232c:	2b30      	cmp	r3, #48	@ 0x30
 800232e:	d064      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x15a>
 8002330:	2b30      	cmp	r3, #48	@ 0x30
 8002332:	d86b      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 8002334:	2b20      	cmp	r3, #32
 8002336:	d060      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x15a>
 8002338:	2b20      	cmp	r3, #32
 800233a:	d867      	bhi.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
 800233c:	2b00      	cmp	r3, #0
 800233e:	d05c      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x15a>
 8002340:	2b10      	cmp	r3, #16
 8002342:	d05a      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x15a>
 8002344:	e062      	b.n	800240c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002356:	f000 fafd 	bl	8002954 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	609a      	str	r2, [r3, #8]
      break;
 8002372:	e04f      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002384:	f000 fae6 	bl	8002954 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002396:	609a      	str	r2, [r3, #8]
      break;
 8002398:	e03c      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a6:	461a      	mov	r2, r3
 80023a8:	f000 fa5a 	bl	8002860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2150      	movs	r1, #80	@ 0x50
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fab3 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 80023b8:	e02c      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023c6:	461a      	mov	r2, r3
 80023c8:	f000 fa79 	bl	80028be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2160      	movs	r1, #96	@ 0x60
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 faa3 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 80023d8:	e01c      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e6:	461a      	mov	r2, r3
 80023e8:	f000 fa3a 	bl	8002860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2140      	movs	r1, #64	@ 0x40
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fa93 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 80023f8:	e00c      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4619      	mov	r1, r3
 8002404:	4610      	mov	r0, r2
 8002406:	f000 fa8a 	bl	800291e <TIM_ITRx_SetConfig>
      break;
 800240a:	e003      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
      break;
 8002410:	e000      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a3a      	ldr	r2, [pc, #232]	@ (800252c <TIM_Base_SetConfig+0xfc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00f      	beq.n	8002468 <TIM_Base_SetConfig+0x38>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800244e:	d00b      	beq.n	8002468 <TIM_Base_SetConfig+0x38>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a37      	ldr	r2, [pc, #220]	@ (8002530 <TIM_Base_SetConfig+0x100>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d007      	beq.n	8002468 <TIM_Base_SetConfig+0x38>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a36      	ldr	r2, [pc, #216]	@ (8002534 <TIM_Base_SetConfig+0x104>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d003      	beq.n	8002468 <TIM_Base_SetConfig+0x38>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a35      	ldr	r2, [pc, #212]	@ (8002538 <TIM_Base_SetConfig+0x108>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d108      	bne.n	800247a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800246e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a2b      	ldr	r2, [pc, #172]	@ (800252c <TIM_Base_SetConfig+0xfc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d01b      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002488:	d017      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a28      	ldr	r2, [pc, #160]	@ (8002530 <TIM_Base_SetConfig+0x100>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a27      	ldr	r2, [pc, #156]	@ (8002534 <TIM_Base_SetConfig+0x104>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00f      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a26      	ldr	r2, [pc, #152]	@ (8002538 <TIM_Base_SetConfig+0x108>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00b      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a25      	ldr	r2, [pc, #148]	@ (800253c <TIM_Base_SetConfig+0x10c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a24      	ldr	r2, [pc, #144]	@ (8002540 <TIM_Base_SetConfig+0x110>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d003      	beq.n	80024ba <TIM_Base_SetConfig+0x8a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a23      	ldr	r2, [pc, #140]	@ (8002544 <TIM_Base_SetConfig+0x114>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d108      	bne.n	80024cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a0e      	ldr	r2, [pc, #56]	@ (800252c <TIM_Base_SetConfig+0xfc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d103      	bne.n	8002500 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d105      	bne.n	800251e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f023 0201 	bic.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	611a      	str	r2, [r3, #16]
  }
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40010000 	.word	0x40010000
 8002530:	40000400 	.word	0x40000400
 8002534:	40000800 	.word	0x40000800
 8002538:	40000c00 	.word	0x40000c00
 800253c:	40014000 	.word	0x40014000
 8002540:	40014400 	.word	0x40014400
 8002544:	40014800 	.word	0x40014800

08002548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f023 0201 	bic.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f023 0302 	bic.w	r3, r3, #2
 8002590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a1c      	ldr	r2, [pc, #112]	@ (8002610 <TIM_OC1_SetConfig+0xc8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d10c      	bne.n	80025be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f023 0308 	bic.w	r3, r3, #8
 80025aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a13      	ldr	r2, [pc, #76]	@ (8002610 <TIM_OC1_SetConfig+0xc8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d111      	bne.n	80025ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	621a      	str	r2, [r3, #32]
}
 8002604:	bf00      	nop
 8002606:	371c      	adds	r7, #28
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	40010000 	.word	0x40010000

08002614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002614:	b480      	push	{r7}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f023 0210 	bic.w	r2, r3, #16
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800264a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f023 0320 	bic.w	r3, r3, #32
 800265e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a1e      	ldr	r2, [pc, #120]	@ (80026e8 <TIM_OC2_SetConfig+0xd4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d10d      	bne.n	8002690 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800267a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800268e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a15      	ldr	r2, [pc, #84]	@ (80026e8 <TIM_OC2_SetConfig+0xd4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d113      	bne.n	80026c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800269e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80026a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	621a      	str	r2, [r3, #32]
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40010000 	.word	0x40010000

080026ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800271a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0303 	bic.w	r3, r3, #3
 8002722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1d      	ldr	r2, [pc, #116]	@ (80027bc <TIM_OC3_SetConfig+0xd0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10d      	bne.n	8002766 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a14      	ldr	r2, [pc, #80]	@ (80027bc <TIM_OC3_SetConfig+0xd0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d113      	bne.n	8002796 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800277c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	621a      	str	r2, [r3, #32]
}
 80027b0:	bf00      	nop
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40010000 	.word	0x40010000

080027c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800280a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	031b      	lsls	r3, r3, #12
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a10      	ldr	r2, [pc, #64]	@ (800285c <TIM_OC4_SetConfig+0x9c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d109      	bne.n	8002834 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	019b      	lsls	r3, r3, #6
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	621a      	str	r2, [r3, #32]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40010000 	.word	0x40010000

08002860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	f023 0201 	bic.w	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800288a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f023 030a 	bic.w	r3, r3, #10
 800289c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	621a      	str	r2, [r3, #32]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028be:	b480      	push	{r7}
 80028c0:	b087      	sub	sp, #28
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f023 0210 	bic.w	r2, r3, #16
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80028e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	031b      	lsls	r3, r3, #12
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80028fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	621a      	str	r2, [r3, #32]
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	f043 0307 	orr.w	r3, r3, #7
 8002940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	609a      	str	r2, [r3, #8]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800296e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	021a      	lsls	r2, r3, #8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	431a      	orrs	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4313      	orrs	r3, r2
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	2201      	movs	r2, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a1a      	ldr	r2, [r3, #32]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	401a      	ands	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a1a      	ldr	r2, [r3, #32]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	431a      	orrs	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	621a      	str	r2, [r3, #32]
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e050      	b.n	8002a9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d018      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a44:	d013      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a18      	ldr	r2, [pc, #96]	@ (8002aac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a16      	ldr	r2, [pc, #88]	@ (8002ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a15      	ldr	r2, [pc, #84]	@ (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a13      	ldr	r2, [pc, #76]	@ (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d10c      	bne.n	8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	40000c00 	.word	0x40000c00
 8002ab8:	40014000 	.word	0x40014000

08002abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e042      	b.n	8002b54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe f980 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	@ 0x24
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f97f 	bl	8002e04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	@ 0x28
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	f040 8081 	bne.w	8002c80 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <HAL_UART_Receive+0x2e>
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e079      	b.n	8002c82 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2222      	movs	r2, #34	@ 0x22
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ba2:	f7fe fa3b 	bl	800101c <HAL_GetTick>
 8002ba6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	88fa      	ldrh	r2, [r7, #6]
 8002bac:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	88fa      	ldrh	r2, [r7, #6]
 8002bb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bbc:	d108      	bne.n	8002bd0 <HAL_UART_Receive+0x74>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d104      	bne.n	8002bd0 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	e003      	b.n	8002bd8 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002bd8:	e047      	b.n	8002c6a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2200      	movs	r2, #0
 8002be2:	2120      	movs	r1, #32
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f850 	bl	8002c8a <UART_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e042      	b.n	8002c82 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	3302      	adds	r3, #2
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	e01f      	b.n	8002c5c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c24:	d007      	beq.n	8002c36 <HAL_UART_Receive+0xda>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10a      	bne.n	8002c44 <HAL_UART_Receive+0xe8>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e008      	b.n	8002c56 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1b2      	bne.n	8002bda <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e000      	b.n	8002c82 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
  }
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	4613      	mov	r3, r2
 8002c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c9a:	e03b      	b.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d037      	beq.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca4:	f7fe f9ba 	bl	800101c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	6a3a      	ldr	r2, [r7, #32]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d302      	bcc.n	8002cba <UART_WaitOnFlagUntilTimeout+0x30>
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e03a      	b.n	8002d34 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d023      	beq.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b80      	cmp	r3, #128	@ 0x80
 8002cd0:	d020      	beq.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b40      	cmp	r3, #64	@ 0x40
 8002cd6:	d01d      	beq.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d116      	bne.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f81d 	bl	8002d3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2208      	movs	r2, #8
 8002d06:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e00f      	b.n	8002d34 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d0b4      	beq.n	8002c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b095      	sub	sp, #84	@ 0x54
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	330c      	adds	r3, #12
 8002d62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d64:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e5      	bne.n	8002d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3314      	adds	r3, #20
 8002d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3314      	adds	r3, #20
 8002d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002da0:	e841 2300 	strex	r3, r2, [r1]
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e5      	bne.n	8002d78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d119      	bne.n	8002de8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	e853 3f00 	ldrex	r3, [r3]
 8002dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f023 0310 	bic.w	r3, r3, #16
 8002dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dd4:	61ba      	str	r2, [r7, #24]
 8002dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd8:	6979      	ldr	r1, [r7, #20]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	e841 2300 	strex	r3, r2, [r1]
 8002de0:	613b      	str	r3, [r7, #16]
   return(result);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e5      	bne.n	8002db4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002df6:	bf00      	nop
 8002df8:	3754      	adds	r7, #84	@ 0x54
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e08:	b0c0      	sub	sp, #256	@ 0x100
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e20:	68d9      	ldr	r1, [r3, #12]
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	ea40 0301 	orr.w	r3, r0, r1
 8002e2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e5c:	f021 010c 	bic.w	r1, r1, #12
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7e:	6999      	ldr	r1, [r3, #24]
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	ea40 0301 	orr.w	r3, r0, r1
 8002e8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b8f      	ldr	r3, [pc, #572]	@ (80030d0 <UART_SetConfig+0x2cc>)
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d005      	beq.n	8002ea4 <UART_SetConfig+0xa0>
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b8d      	ldr	r3, [pc, #564]	@ (80030d4 <UART_SetConfig+0x2d0>)
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d104      	bne.n	8002eae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ea4:	f7fe ffce 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 8002ea8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002eac:	e003      	b.n	8002eb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eae:	f7fe ffb5 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 8002eb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ec0:	f040 810c 	bne.w	80030dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ece:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ed2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	462b      	mov	r3, r5
 8002eda:	1891      	adds	r1, r2, r2
 8002edc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ede:	415b      	adcs	r3, r3
 8002ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ee2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	eb12 0801 	adds.w	r8, r2, r1
 8002eec:	4629      	mov	r1, r5
 8002eee:	eb43 0901 	adc.w	r9, r3, r1
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002efe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f06:	4690      	mov	r8, r2
 8002f08:	4699      	mov	r9, r3
 8002f0a:	4623      	mov	r3, r4
 8002f0c:	eb18 0303 	adds.w	r3, r8, r3
 8002f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f14:	462b      	mov	r3, r5
 8002f16:	eb49 0303 	adc.w	r3, r9, r3
 8002f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f32:	460b      	mov	r3, r1
 8002f34:	18db      	adds	r3, r3, r3
 8002f36:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f38:	4613      	mov	r3, r2
 8002f3a:	eb42 0303 	adc.w	r3, r2, r3
 8002f3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f48:	f7fd f958 	bl	80001fc <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4b61      	ldr	r3, [pc, #388]	@ (80030d8 <UART_SetConfig+0x2d4>)
 8002f52:	fba3 2302 	umull	r2, r3, r3, r2
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	011c      	lsls	r4, r3, #4
 8002f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f6c:	4642      	mov	r2, r8
 8002f6e:	464b      	mov	r3, r9
 8002f70:	1891      	adds	r1, r2, r2
 8002f72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f74:	415b      	adcs	r3, r3
 8002f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	eb12 0a01 	adds.w	sl, r2, r1
 8002f82:	4649      	mov	r1, r9
 8002f84:	eb43 0b01 	adc.w	fp, r3, r1
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f9c:	4692      	mov	sl, r2
 8002f9e:	469b      	mov	fp, r3
 8002fa0:	4643      	mov	r3, r8
 8002fa2:	eb1a 0303 	adds.w	r3, sl, r3
 8002fa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002faa:	464b      	mov	r3, r9
 8002fac:	eb4b 0303 	adc.w	r3, fp, r3
 8002fb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	18db      	adds	r3, r3, r3
 8002fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fce:	4613      	mov	r3, r2
 8002fd0:	eb42 0303 	adc.w	r3, r2, r3
 8002fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fde:	f7fd f90d 	bl	80001fc <__aeabi_uldivmod>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80030d8 <UART_SetConfig+0x2d4>)
 8002fea:	fba3 2301 	umull	r2, r3, r3, r1
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	2264      	movs	r2, #100	@ 0x64
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	1acb      	subs	r3, r1, r3
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ffe:	4b36      	ldr	r3, [pc, #216]	@ (80030d8 <UART_SetConfig+0x2d4>)
 8003000:	fba3 2302 	umull	r2, r3, r3, r2
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800300c:	441c      	add	r4, r3
 800300e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003012:	2200      	movs	r2, #0
 8003014:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003018:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800301c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003020:	4642      	mov	r2, r8
 8003022:	464b      	mov	r3, r9
 8003024:	1891      	adds	r1, r2, r2
 8003026:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003028:	415b      	adcs	r3, r3
 800302a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800302c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003030:	4641      	mov	r1, r8
 8003032:	1851      	adds	r1, r2, r1
 8003034:	6339      	str	r1, [r7, #48]	@ 0x30
 8003036:	4649      	mov	r1, r9
 8003038:	414b      	adcs	r3, r1
 800303a:	637b      	str	r3, [r7, #52]	@ 0x34
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003048:	4659      	mov	r1, fp
 800304a:	00cb      	lsls	r3, r1, #3
 800304c:	4651      	mov	r1, sl
 800304e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003052:	4651      	mov	r1, sl
 8003054:	00ca      	lsls	r2, r1, #3
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	4603      	mov	r3, r0
 800305c:	4642      	mov	r2, r8
 800305e:	189b      	adds	r3, r3, r2
 8003060:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003064:	464b      	mov	r3, r9
 8003066:	460a      	mov	r2, r1
 8003068:	eb42 0303 	adc.w	r3, r2, r3
 800306c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800307c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003080:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003084:	460b      	mov	r3, r1
 8003086:	18db      	adds	r3, r3, r3
 8003088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800308a:	4613      	mov	r3, r2
 800308c:	eb42 0303 	adc.w	r3, r2, r3
 8003090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003092:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003096:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800309a:	f7fd f8af 	bl	80001fc <__aeabi_uldivmod>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4b0d      	ldr	r3, [pc, #52]	@ (80030d8 <UART_SetConfig+0x2d4>)
 80030a4:	fba3 1302 	umull	r1, r3, r3, r2
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	2164      	movs	r1, #100	@ 0x64
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	3332      	adds	r3, #50	@ 0x32
 80030b6:	4a08      	ldr	r2, [pc, #32]	@ (80030d8 <UART_SetConfig+0x2d4>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	f003 0207 	and.w	r2, r3, #7
 80030c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4422      	add	r2, r4
 80030ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030cc:	e106      	b.n	80032dc <UART_SetConfig+0x4d8>
 80030ce:	bf00      	nop
 80030d0:	40011000 	.word	0x40011000
 80030d4:	40011400 	.word	0x40011400
 80030d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030e0:	2200      	movs	r2, #0
 80030e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030ee:	4642      	mov	r2, r8
 80030f0:	464b      	mov	r3, r9
 80030f2:	1891      	adds	r1, r2, r2
 80030f4:	6239      	str	r1, [r7, #32]
 80030f6:	415b      	adcs	r3, r3
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030fe:	4641      	mov	r1, r8
 8003100:	1854      	adds	r4, r2, r1
 8003102:	4649      	mov	r1, r9
 8003104:	eb43 0501 	adc.w	r5, r3, r1
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	00eb      	lsls	r3, r5, #3
 8003112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003116:	00e2      	lsls	r2, r4, #3
 8003118:	4614      	mov	r4, r2
 800311a:	461d      	mov	r5, r3
 800311c:	4643      	mov	r3, r8
 800311e:	18e3      	adds	r3, r4, r3
 8003120:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003124:	464b      	mov	r3, r9
 8003126:	eb45 0303 	adc.w	r3, r5, r3
 800312a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800313a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800314a:	4629      	mov	r1, r5
 800314c:	008b      	lsls	r3, r1, #2
 800314e:	4621      	mov	r1, r4
 8003150:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003154:	4621      	mov	r1, r4
 8003156:	008a      	lsls	r2, r1, #2
 8003158:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800315c:	f7fd f84e 	bl	80001fc <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4b60      	ldr	r3, [pc, #384]	@ (80032e8 <UART_SetConfig+0x4e4>)
 8003166:	fba3 2302 	umull	r2, r3, r3, r2
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	011c      	lsls	r4, r3, #4
 800316e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003172:	2200      	movs	r2, #0
 8003174:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003178:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800317c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003180:	4642      	mov	r2, r8
 8003182:	464b      	mov	r3, r9
 8003184:	1891      	adds	r1, r2, r2
 8003186:	61b9      	str	r1, [r7, #24]
 8003188:	415b      	adcs	r3, r3
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003190:	4641      	mov	r1, r8
 8003192:	1851      	adds	r1, r2, r1
 8003194:	6139      	str	r1, [r7, #16]
 8003196:	4649      	mov	r1, r9
 8003198:	414b      	adcs	r3, r1
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031a8:	4659      	mov	r1, fp
 80031aa:	00cb      	lsls	r3, r1, #3
 80031ac:	4651      	mov	r1, sl
 80031ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031b2:	4651      	mov	r1, sl
 80031b4:	00ca      	lsls	r2, r1, #3
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	4642      	mov	r2, r8
 80031be:	189b      	adds	r3, r3, r2
 80031c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031c4:	464b      	mov	r3, r9
 80031c6:	460a      	mov	r2, r1
 80031c8:	eb42 0303 	adc.w	r3, r2, r3
 80031cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031e8:	4649      	mov	r1, r9
 80031ea:	008b      	lsls	r3, r1, #2
 80031ec:	4641      	mov	r1, r8
 80031ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031f2:	4641      	mov	r1, r8
 80031f4:	008a      	lsls	r2, r1, #2
 80031f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031fa:	f7fc ffff 	bl	80001fc <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4611      	mov	r1, r2
 8003204:	4b38      	ldr	r3, [pc, #224]	@ (80032e8 <UART_SetConfig+0x4e4>)
 8003206:	fba3 2301 	umull	r2, r3, r3, r1
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2264      	movs	r2, #100	@ 0x64
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	1acb      	subs	r3, r1, r3
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	3332      	adds	r3, #50	@ 0x32
 8003218:	4a33      	ldr	r2, [pc, #204]	@ (80032e8 <UART_SetConfig+0x4e4>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003224:	441c      	add	r4, r3
 8003226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800322a:	2200      	movs	r2, #0
 800322c:	673b      	str	r3, [r7, #112]	@ 0x70
 800322e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003230:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003234:	4642      	mov	r2, r8
 8003236:	464b      	mov	r3, r9
 8003238:	1891      	adds	r1, r2, r2
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	415b      	adcs	r3, r3
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003244:	4641      	mov	r1, r8
 8003246:	1851      	adds	r1, r2, r1
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	4649      	mov	r1, r9
 800324c:	414b      	adcs	r3, r1
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800325c:	4659      	mov	r1, fp
 800325e:	00cb      	lsls	r3, r1, #3
 8003260:	4651      	mov	r1, sl
 8003262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003266:	4651      	mov	r1, sl
 8003268:	00ca      	lsls	r2, r1, #3
 800326a:	4610      	mov	r0, r2
 800326c:	4619      	mov	r1, r3
 800326e:	4603      	mov	r3, r0
 8003270:	4642      	mov	r2, r8
 8003272:	189b      	adds	r3, r3, r2
 8003274:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003276:	464b      	mov	r3, r9
 8003278:	460a      	mov	r2, r1
 800327a:	eb42 0303 	adc.w	r3, r2, r3
 800327e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	663b      	str	r3, [r7, #96]	@ 0x60
 800328a:	667a      	str	r2, [r7, #100]	@ 0x64
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003298:	4649      	mov	r1, r9
 800329a:	008b      	lsls	r3, r1, #2
 800329c:	4641      	mov	r1, r8
 800329e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032a2:	4641      	mov	r1, r8
 80032a4:	008a      	lsls	r2, r1, #2
 80032a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032aa:	f7fc ffa7 	bl	80001fc <__aeabi_uldivmod>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4b0d      	ldr	r3, [pc, #52]	@ (80032e8 <UART_SetConfig+0x4e4>)
 80032b4:	fba3 1302 	umull	r1, r3, r3, r2
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	2164      	movs	r1, #100	@ 0x64
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	3332      	adds	r3, #50	@ 0x32
 80032c6:	4a08      	ldr	r2, [pc, #32]	@ (80032e8 <UART_SetConfig+0x4e4>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	f003 020f 	and.w	r2, r3, #15
 80032d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4422      	add	r2, r4
 80032da:	609a      	str	r2, [r3, #8]
}
 80032dc:	bf00      	nop
 80032de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032e2:	46bd      	mov	sp, r7
 80032e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e8:	51eb851f 	.word	0x51eb851f

080032ec <memset>:
 80032ec:	4402      	add	r2, r0
 80032ee:	4603      	mov	r3, r0
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d100      	bne.n	80032f6 <memset+0xa>
 80032f4:	4770      	bx	lr
 80032f6:	f803 1b01 	strb.w	r1, [r3], #1
 80032fa:	e7f9      	b.n	80032f0 <memset+0x4>

080032fc <__libc_init_array>:
 80032fc:	b570      	push	{r4, r5, r6, lr}
 80032fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003334 <__libc_init_array+0x38>)
 8003300:	4c0d      	ldr	r4, [pc, #52]	@ (8003338 <__libc_init_array+0x3c>)
 8003302:	1b64      	subs	r4, r4, r5
 8003304:	10a4      	asrs	r4, r4, #2
 8003306:	2600      	movs	r6, #0
 8003308:	42a6      	cmp	r6, r4
 800330a:	d109      	bne.n	8003320 <__libc_init_array+0x24>
 800330c:	4d0b      	ldr	r5, [pc, #44]	@ (800333c <__libc_init_array+0x40>)
 800330e:	4c0c      	ldr	r4, [pc, #48]	@ (8003340 <__libc_init_array+0x44>)
 8003310:	f000 f826 	bl	8003360 <_init>
 8003314:	1b64      	subs	r4, r4, r5
 8003316:	10a4      	asrs	r4, r4, #2
 8003318:	2600      	movs	r6, #0
 800331a:	42a6      	cmp	r6, r4
 800331c:	d105      	bne.n	800332a <__libc_init_array+0x2e>
 800331e:	bd70      	pop	{r4, r5, r6, pc}
 8003320:	f855 3b04 	ldr.w	r3, [r5], #4
 8003324:	4798      	blx	r3
 8003326:	3601      	adds	r6, #1
 8003328:	e7ee      	b.n	8003308 <__libc_init_array+0xc>
 800332a:	f855 3b04 	ldr.w	r3, [r5], #4
 800332e:	4798      	blx	r3
 8003330:	3601      	adds	r6, #1
 8003332:	e7f2      	b.n	800331a <__libc_init_array+0x1e>
 8003334:	080033b0 	.word	0x080033b0
 8003338:	080033b0 	.word	0x080033b0
 800333c:	080033b0 	.word	0x080033b0
 8003340:	080033b4 	.word	0x080033b4

08003344 <memcpy>:
 8003344:	440a      	add	r2, r1
 8003346:	4291      	cmp	r1, r2
 8003348:	f100 33ff 	add.w	r3, r0, #4294967295
 800334c:	d100      	bne.n	8003350 <memcpy+0xc>
 800334e:	4770      	bx	lr
 8003350:	b510      	push	{r4, lr}
 8003352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800335a:	4291      	cmp	r1, r2
 800335c:	d1f9      	bne.n	8003352 <memcpy+0xe>
 800335e:	bd10      	pop	{r4, pc}

08003360 <_init>:
 8003360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003362:	bf00      	nop
 8003364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003366:	bc08      	pop	{r3}
 8003368:	469e      	mov	lr, r3
 800336a:	4770      	bx	lr

0800336c <_fini>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	bf00      	nop
 8003370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003372:	bc08      	pop	{r3}
 8003374:	469e      	mov	lr, r3
 8003376:	4770      	bx	lr
