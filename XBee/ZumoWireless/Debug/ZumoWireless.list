
ZumoWireless.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003648  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080037e0  080037e0  000047e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f8  080037f8  00005014  2**0
                  CONTENTS
  4 .ARM          00000008  080037f8  080037f8  000047f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003800  08003800  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003800  08003800  00004800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003804  08003804  00004804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003808  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000014  0800381c  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  0800381c  0000510c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd00  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ed  00000000  00000000  00010d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00012638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000098d  00000000  00000000  00013258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001610a  00000000  00000000  00013be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d130  00000000  00000000  00029cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de4c  00000000  00000000  00036e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4c6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a8  00000000  00000000  000c4cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000c8158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080037c8 	.word	0x080037c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080037c8 	.word	0x080037c8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b96a 	b.w	8000d00 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	460c      	mov	r4, r1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d14e      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a50:	4694      	mov	ip, r2
 8000a52:	458c      	cmp	ip, r1
 8000a54:	4686      	mov	lr, r0
 8000a56:	fab2 f282 	clz	r2, r2
 8000a5a:	d962      	bls.n	8000b22 <__udivmoddi4+0xde>
 8000a5c:	b14a      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a5e:	f1c2 0320 	rsb	r3, r2, #32
 8000a62:	4091      	lsls	r1, r2
 8000a64:	fa20 f303 	lsr.w	r3, r0, r3
 8000a68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6c:	4319      	orrs	r1, r3
 8000a6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a76:	fa1f f68c 	uxth.w	r6, ip
 8000a7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a82:	fb07 1114 	mls	r1, r7, r4, r1
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb04 f106 	mul.w	r1, r4, r6
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a9a:	f080 8112 	bcs.w	8000cc2 <__udivmoddi4+0x27e>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 810f 	bls.w	8000cc2 <__udivmoddi4+0x27e>
 8000aa4:	3c02      	subs	r4, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a59      	subs	r1, r3, r1
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb00 f606 	mul.w	r6, r0, r6
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x94>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aca:	f080 80fc 	bcs.w	8000cc6 <__udivmoddi4+0x282>
 8000ace:	429e      	cmp	r6, r3
 8000ad0:	f240 80f9 	bls.w	8000cc6 <__udivmoddi4+0x282>
 8000ad4:	4463      	add	r3, ip
 8000ad6:	3802      	subs	r0, #2
 8000ad8:	1b9b      	subs	r3, r3, r6
 8000ada:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ade:	2100      	movs	r1, #0
 8000ae0:	b11d      	cbz	r5, 8000aea <__udivmoddi4+0xa6>
 8000ae2:	40d3      	lsrs	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d905      	bls.n	8000afe <__udivmoddi4+0xba>
 8000af2:	b10d      	cbz	r5, 8000af8 <__udivmoddi4+0xb4>
 8000af4:	e9c5 0100 	strd	r0, r1, [r5]
 8000af8:	2100      	movs	r1, #0
 8000afa:	4608      	mov	r0, r1
 8000afc:	e7f5      	b.n	8000aea <__udivmoddi4+0xa6>
 8000afe:	fab3 f183 	clz	r1, r3
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d146      	bne.n	8000b94 <__udivmoddi4+0x150>
 8000b06:	42a3      	cmp	r3, r4
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xcc>
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	f0c0 80f0 	bcc.w	8000cf0 <__udivmoddi4+0x2ac>
 8000b10:	1a86      	subs	r6, r0, r2
 8000b12:	eb64 0303 	sbc.w	r3, r4, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d0e6      	beq.n	8000aea <__udivmoddi4+0xa6>
 8000b1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b20:	e7e3      	b.n	8000aea <__udivmoddi4+0xa6>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	f040 8090 	bne.w	8000c48 <__udivmoddi4+0x204>
 8000b28:	eba1 040c 	sub.w	r4, r1, ip
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	fa1f f78c 	uxth.w	r7, ip
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b46:	fb07 f006 	mul.w	r0, r7, r6
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x11c>
 8000b4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x11a>
 8000b58:	4298      	cmp	r0, r3
 8000b5a:	f200 80cd 	bhi.w	8000cf8 <__udivmoddi4+0x2b4>
 8000b5e:	4626      	mov	r6, r4
 8000b60:	1a1c      	subs	r4, r3, r0
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b72:	fb00 f707 	mul.w	r7, r0, r7
 8000b76:	429f      	cmp	r7, r3
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x148>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b82:	d202      	bcs.n	8000b8a <__udivmoddi4+0x146>
 8000b84:	429f      	cmp	r7, r3
 8000b86:	f200 80b0 	bhi.w	8000cea <__udivmoddi4+0x2a6>
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	1bdb      	subs	r3, r3, r7
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	e7a5      	b.n	8000ae0 <__udivmoddi4+0x9c>
 8000b94:	f1c1 0620 	rsb	r6, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b9e:	431f      	orrs	r7, r3
 8000ba0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ba4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba8:	ea43 030c 	orr.w	r3, r3, ip
 8000bac:	40f4      	lsrs	r4, r6
 8000bae:	fa00 f801 	lsl.w	r8, r0, r1
 8000bb2:	0c38      	lsrs	r0, r7, #16
 8000bb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bcc:	45a1      	cmp	r9, r4
 8000bce:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd2:	d90a      	bls.n	8000bea <__udivmoddi4+0x1a6>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bda:	f080 8084 	bcs.w	8000ce6 <__udivmoddi4+0x2a2>
 8000bde:	45a1      	cmp	r9, r4
 8000be0:	f240 8081 	bls.w	8000ce6 <__udivmoddi4+0x2a2>
 8000be4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be8:	443c      	add	r4, r7
 8000bea:	eba4 0409 	sub.w	r4, r4, r9
 8000bee:	fa1f f983 	uxth.w	r9, r3
 8000bf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bf6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d907      	bls.n	8000c16 <__udivmoddi4+0x1d2>
 8000c06:	193c      	adds	r4, r7, r4
 8000c08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c0c:	d267      	bcs.n	8000cde <__udivmoddi4+0x29a>
 8000c0e:	45a4      	cmp	ip, r4
 8000c10:	d965      	bls.n	8000cde <__udivmoddi4+0x29a>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	443c      	add	r4, r7
 8000c16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c1e:	eba4 040c 	sub.w	r4, r4, ip
 8000c22:	429c      	cmp	r4, r3
 8000c24:	46ce      	mov	lr, r9
 8000c26:	469c      	mov	ip, r3
 8000c28:	d351      	bcc.n	8000cce <__udivmoddi4+0x28a>
 8000c2a:	d04e      	beq.n	8000cca <__udivmoddi4+0x286>
 8000c2c:	b155      	cbz	r5, 8000c44 <__udivmoddi4+0x200>
 8000c2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c32:	eb64 040c 	sbc.w	r4, r4, ip
 8000c36:	fa04 f606 	lsl.w	r6, r4, r6
 8000c3a:	40cb      	lsrs	r3, r1
 8000c3c:	431e      	orrs	r6, r3
 8000c3e:	40cc      	lsrs	r4, r1
 8000c40:	e9c5 6400 	strd	r6, r4, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	e750      	b.n	8000aea <__udivmoddi4+0xa6>
 8000c48:	f1c2 0320 	rsb	r3, r2, #32
 8000c4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	fa24 f303 	lsr.w	r3, r4, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	430c      	orrs	r4, r1
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c64:	fa1f f78c 	uxth.w	r7, ip
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c70:	0c23      	lsrs	r3, r4, #16
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f107 	mul.w	r1, r0, r7
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x24c>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c86:	d22c      	bcs.n	8000ce2 <__udivmoddi4+0x29e>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d92a      	bls.n	8000ce2 <__udivmoddi4+0x29e>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c98:	fb08 3311 	mls	r3, r8, r1, r3
 8000c9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca0:	fb01 f307 	mul.w	r3, r1, r7
 8000ca4:	42a3      	cmp	r3, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x276>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cb0:	d213      	bcs.n	8000cda <__udivmoddi4+0x296>
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	d911      	bls.n	8000cda <__udivmoddi4+0x296>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4464      	add	r4, ip
 8000cba:	1ae4      	subs	r4, r4, r3
 8000cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cc0:	e739      	b.n	8000b36 <__udivmoddi4+0xf2>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	e6f0      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e706      	b.n	8000ad8 <__udivmoddi4+0x94>
 8000cca:	45c8      	cmp	r8, r9
 8000ccc:	d2ae      	bcs.n	8000c2c <__udivmoddi4+0x1e8>
 8000cce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cd6:	3801      	subs	r0, #1
 8000cd8:	e7a8      	b.n	8000c2c <__udivmoddi4+0x1e8>
 8000cda:	4631      	mov	r1, r6
 8000cdc:	e7ed      	b.n	8000cba <__udivmoddi4+0x276>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	e799      	b.n	8000c16 <__udivmoddi4+0x1d2>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e7d4      	b.n	8000c90 <__udivmoddi4+0x24c>
 8000ce6:	46d6      	mov	lr, sl
 8000ce8:	e77f      	b.n	8000bea <__udivmoddi4+0x1a6>
 8000cea:	4463      	add	r3, ip
 8000cec:	3802      	subs	r0, #2
 8000cee:	e74d      	b.n	8000b8c <__udivmoddi4+0x148>
 8000cf0:	4606      	mov	r6, r0
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e70f      	b.n	8000b18 <__udivmoddi4+0xd4>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	e730      	b.n	8000b60 <__udivmoddi4+0x11c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <stop>:
};

/*
 * Stops Zumo by setting motor speeds to zero
 */
void stop(){
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
	  *tim3_ccr2 &= ~CCR_MASK;
 8000d08:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <stop+0x48>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d4c <stop+0x48>)
 8000d10:	6812      	ldr	r2, [r2, #0]
 8000d12:	0c1b      	lsrs	r3, r3, #16
 8000d14:	041b      	lsls	r3, r3, #16
 8000d16:	6013      	str	r3, [r2, #0]
	  *tim3_ccr2 |= 0; // sets right motor speed
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <stop+0x48>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <stop+0x48>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6812      	ldr	r2, [r2, #0]
 8000d22:	601a      	str	r2, [r3, #0]
	  *tim4_ccr1 &= ~CCR_MASK;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <stop+0x4c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a09      	ldr	r2, [pc, #36]	@ (8000d50 <stop+0x4c>)
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	0c1b      	lsrs	r3, r3, #16
 8000d30:	041b      	lsls	r3, r3, #16
 8000d32:	6013      	str	r3, [r2, #0]
	  *tim4_ccr1 |= 0; // sets left motor speed
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <stop+0x4c>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <stop+0x4c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6812      	ldr	r2, [r2, #0]
 8000d3e:	601a      	str	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000004 	.word	0x20000004

08000d54 <straight_forward>:

/*
 * Moves Zumo forward in a straight line
 * Arguments: speed - Determines the linear velocity of the Zumo
 */
void straight_forward(int speed) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  *tim3_ccr2 &= ~CCR_MASK;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <straight_forward+0x74>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a19      	ldr	r2, [pc, #100]	@ (8000dc8 <straight_forward+0x74>)
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	0c1b      	lsrs	r3, r3, #16
 8000d68:	041b      	lsls	r3, r3, #16
 8000d6a:	6013      	str	r3, [r2, #0]
  *tim3_ccr2 |= speed; // sets right motor speed
 8000d6c:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <straight_forward+0x74>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6819      	ldr	r1, [r3, #0]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <straight_forward+0x74>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	601a      	str	r2, [r3, #0]
  *tim4_ccr1 &= ~CCR_MASK;
 8000d7c:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <straight_forward+0x78>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a12      	ldr	r2, [pc, #72]	@ (8000dcc <straight_forward+0x78>)
 8000d84:	6812      	ldr	r2, [r2, #0]
 8000d86:	0c1b      	lsrs	r3, r3, #16
 8000d88:	041b      	lsls	r3, r3, #16
 8000d8a:	6013      	str	r3, [r2, #0]
  *tim4_ccr1 |= speed; // sets left motor speed
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <straight_forward+0x78>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6819      	ldr	r1, [r3, #0]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	4b0d      	ldr	r3, [pc, #52]	@ (8000dcc <straight_forward+0x78>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0); // sets right motor direction
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da2:	480b      	ldr	r0, [pc, #44]	@ (8000dd0 <straight_forward+0x7c>)
 8000da4:	f000 ff46 	bl	8001c34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0); // sets left motor direction
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dae:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <straight_forward+0x7c>)
 8000db0:	f000 ff40 	bl	8001c34 <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8000db4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000db8:	f000 fcae 	bl	8001718 <HAL_Delay>
  stop();
 8000dbc:	f7ff ffa2 	bl	8000d04 <stop>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000004 	.word	0x20000004
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	00000000 	.word	0x00000000

08000dd8 <spin_cw_angle>:

  HAL_Delay(2000);
  stop();
}

void spin_cw_angle(int w, float angle) {
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	ed87 0a00 	vstr	s0, [r7]
  int speed = (int)(23 + (w * 15));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	4613      	mov	r3, r2
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	1a9b      	subs	r3, r3, r2
 8000dec:	3317      	adds	r3, #23
 8000dee:	60fb      	str	r3, [r7, #12]
  *tim3_ccr2 &= ~CCR_MASK;
 8000df0:	4b33      	ldr	r3, [pc, #204]	@ (8000ec0 <spin_cw_angle+0xe8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a32      	ldr	r2, [pc, #200]	@ (8000ec0 <spin_cw_angle+0xe8>)
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	0c1b      	lsrs	r3, r3, #16
 8000dfc:	041b      	lsls	r3, r3, #16
 8000dfe:	6013      	str	r3, [r2, #0]
  *tim3_ccr2 |= speed; // sets right motor speed
 8000e00:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec0 <spin_cw_angle+0xe8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6819      	ldr	r1, [r3, #0]
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec0 <spin_cw_angle+0xe8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
  *tim4_ccr1 &= ~CCR_MASK;
 8000e10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <spin_cw_angle+0xec>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a2b      	ldr	r2, [pc, #172]	@ (8000ec4 <spin_cw_angle+0xec>)
 8000e18:	6812      	ldr	r2, [r2, #0]
 8000e1a:	0c1b      	lsrs	r3, r3, #16
 8000e1c:	041b      	lsls	r3, r3, #16
 8000e1e:	6013      	str	r3, [r2, #0]
  *tim4_ccr1 |= speed; // sets left motor speed
 8000e20:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <spin_cw_angle+0xec>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6819      	ldr	r1, [r3, #0]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <spin_cw_angle+0xec>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1); // sets right motor direction
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e36:	4824      	ldr	r0, [pc, #144]	@ (8000ec8 <spin_cw_angle+0xf0>)
 8000e38:	f000 fefc 	bl	8001c34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0); // sets left motor direction
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e42:	4821      	ldr	r0, [pc, #132]	@ (8000ec8 <spin_cw_angle+0xf0>)
 8000e44:	f000 fef6 	bl	8001c34 <HAL_GPIO_WritePin>

  float time = (angle * 3.1415 / 180) / w;
 8000e48:	6838      	ldr	r0, [r7, #0]
 8000e4a:	f7ff fb29 	bl	80004a0 <__aeabi_f2d>
 8000e4e:	a31a      	add	r3, pc, #104	@ (adr r3, 8000eb8 <spin_cw_angle+0xe0>)
 8000e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e54:	f7ff fb7c 	bl	8000550 <__aeabi_dmul>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f04f 0200 	mov.w	r2, #0
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <spin_cw_angle+0xf4>)
 8000e66:	f7ff fc9d 	bl	80007a4 <__aeabi_ddiv>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4614      	mov	r4, r2
 8000e70:	461d      	mov	r5, r3
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fb02 	bl	800047c <__aeabi_i2d>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	4629      	mov	r1, r5
 8000e80:	f7ff fc90 	bl	80007a4 <__aeabi_ddiv>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f7ff fd72 	bl	8000974 <__aeabi_d2f>
 8000e90:	4603      	mov	r3, r0
 8000e92:	60bb      	str	r3, [r7, #8]
  HAL_Delay(time * 1000);
 8000e94:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e98:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000ed0 <spin_cw_angle+0xf8>
 8000e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ea4:	ee17 0a90 	vmov	r0, s15
 8000ea8:	f000 fc36 	bl	8001718 <HAL_Delay>
  stop();
 8000eac:	f7ff ff2a 	bl	8000d04 <stop>
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb8:	c083126f 	.word	0xc083126f
 8000ebc:	400921ca 	.word	0x400921ca
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000004 	.word	0x20000004
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40668000 	.word	0x40668000
 8000ed0:	447a0000 	.word	0x447a0000

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f000 fbab 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f82d 	bl	8000f3c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 f9ab 	bl	800123c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000ee6:	f000 f893 	bl	8001010 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000eea:	f000 f907 	bl	80010fc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000eee:	f000 f97b 	bl	80011e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	480e      	ldr	r0, [pc, #56]	@ (8000f30 <main+0x5c>)
 8000ef6:	f001 fbf7 	bl	80026e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000efa:	2100      	movs	r1, #0
 8000efc:	480d      	ldr	r0, [pc, #52]	@ (8000f34 <main+0x60>)
 8000efe:	f001 fbf3 	bl	80026e8 <HAL_TIM_PWM_Start>
  // HAL_UART_Receive_IT(&huart1, &genre, sizeof(genre));
  HAL_Delay(10000);
 8000f02:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000f06:	f000 fc07 	bl	8001718 <HAL_Delay>
//  snake(20, 3, 1);
//  snake(20, 3, 0);
  for (int i = 0; i < 4; i++) {
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	e00a      	b.n	8000f26 <main+0x52>
	  straight_forward(100);
 8000f10:	2064      	movs	r0, #100	@ 0x64
 8000f12:	f7ff ff1f 	bl	8000d54 <straight_forward>
	  spin_cw_angle(3, 90);
 8000f16:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8000f38 <main+0x64>
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f7ff ff5c 	bl	8000dd8 <spin_cw_angle>
  for (int i = 0; i < 4; i++) {
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3301      	adds	r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	ddf1      	ble.n	8000f10 <main+0x3c>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <main+0x58>
 8000f30:	20000030 	.word	0x20000030
 8000f34:	20000078 	.word	0x20000078
 8000f38:	42b40000 	.word	0x42b40000

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	@ 0x50
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0320 	add.w	r3, r7, #32
 8000f46:	2230      	movs	r2, #48	@ 0x30
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fc10 	bl	8003770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	4b28      	ldr	r3, [pc, #160]	@ (8001008 <SystemClock_Config+0xcc>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	4a27      	ldr	r2, [pc, #156]	@ (8001008 <SystemClock_Config+0xcc>)
 8000f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f70:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <SystemClock_Config+0xcc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	4b22      	ldr	r3, [pc, #136]	@ (800100c <SystemClock_Config+0xd0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a21      	ldr	r2, [pc, #132]	@ (800100c <SystemClock_Config+0xd0>)
 8000f86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <SystemClock_Config+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fac:	2310      	movs	r3, #16
 8000fae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fb0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fb4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fe50 	bl	8001c68 <HAL_RCC_OscConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fce:	f000 f9b5 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2102      	movs	r1, #2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 f8b2 	bl	8002158 <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ffa:	f000 f99f 	bl	800133c <Error_Handler>
  }
}
 8000ffe:	bf00      	nop
 8001000:	3750      	adds	r7, #80	@ 0x50
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	@ 0x38
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
 800103c:	615a      	str	r2, [r3, #20]
 800103e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001040:	4b2c      	ldr	r3, [pc, #176]	@ (80010f4 <MX_TIM3_Init+0xe4>)
 8001042:	4a2d      	ldr	r2, [pc, #180]	@ (80010f8 <MX_TIM3_Init+0xe8>)
 8001044:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001046:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <MX_TIM3_Init+0xe4>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b29      	ldr	r3, [pc, #164]	@ (80010f4 <MX_TIM3_Init+0xe4>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8001052:	4b28      	ldr	r3, [pc, #160]	@ (80010f4 <MX_TIM3_Init+0xe4>)
 8001054:	22c7      	movs	r2, #199	@ 0xc7
 8001056:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001058:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <MX_TIM3_Init+0xe4>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <MX_TIM3_Init+0xe4>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001064:	4823      	ldr	r0, [pc, #140]	@ (80010f4 <MX_TIM3_Init+0xe4>)
 8001066:	f001 fa97 	bl	8002598 <HAL_TIM_Base_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001070:	f000 f964 	bl	800133c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800107a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800107e:	4619      	mov	r1, r3
 8001080:	481c      	ldr	r0, [pc, #112]	@ (80010f4 <MX_TIM3_Init+0xe4>)
 8001082:	f001 fca3 	bl	80029cc <HAL_TIM_ConfigClockSource>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800108c:	f000 f956 	bl	800133c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001090:	4818      	ldr	r0, [pc, #96]	@ (80010f4 <MX_TIM3_Init+0xe4>)
 8001092:	f001 fad0 	bl	8002636 <HAL_TIM_PWM_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800109c:	f000 f94e 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	4619      	mov	r1, r3
 80010ae:	4811      	ldr	r0, [pc, #68]	@ (80010f4 <MX_TIM3_Init+0xe4>)
 80010b0:	f002 f82c 	bl	800310c <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80010ba:	f000 f93f 	bl	800133c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010be:	2360      	movs	r3, #96	@ 0x60
 80010c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2204      	movs	r2, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4807      	ldr	r0, [pc, #28]	@ (80010f4 <MX_TIM3_Init+0xe4>)
 80010d6:	f001 fbb7 	bl	8002848 <HAL_TIM_PWM_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80010e0:	f000 f92c 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <MX_TIM3_Init+0xe4>)
 80010e6:	f000 f98f 	bl	8001408 <HAL_TIM_MspPostInit>

}
 80010ea:	bf00      	nop
 80010ec:	3738      	adds	r7, #56	@ 0x38
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000030 	.word	0x20000030
 80010f8:	40000400 	.word	0x40000400

080010fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	@ 0x38
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	615a      	str	r2, [r3, #20]
 800112a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800112c:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 800112e:	4a2d      	ldr	r2, [pc, #180]	@ (80011e4 <MX_TIM4_Init+0xe8>)
 8001130:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001132:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b29      	ldr	r3, [pc, #164]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 800113e:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 8001140:	22c7      	movs	r2, #199	@ 0xc7
 8001142:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001144:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b25      	ldr	r3, [pc, #148]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001150:	4823      	ldr	r0, [pc, #140]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 8001152:	f001 fa21 	bl	8002598 <HAL_TIM_Base_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800115c:	f000 f8ee 	bl	800133c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001166:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800116a:	4619      	mov	r1, r3
 800116c:	481c      	ldr	r0, [pc, #112]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 800116e:	f001 fc2d 	bl	80029cc <HAL_TIM_ConfigClockSource>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001178:	f000 f8e0 	bl	800133c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800117c:	4818      	ldr	r0, [pc, #96]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 800117e:	f001 fa5a 	bl	8002636 <HAL_TIM_PWM_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001188:	f000 f8d8 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4619      	mov	r1, r3
 800119a:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 800119c:	f001 ffb6 	bl	800310c <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80011a6:	f000 f8c9 	bl	800133c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011aa:	2360      	movs	r3, #96	@ 0x60
 80011ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	4807      	ldr	r0, [pc, #28]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 80011c2:	f001 fb41 	bl	8002848 <HAL_TIM_PWM_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80011cc:	f000 f8b6 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011d0:	4803      	ldr	r0, [pc, #12]	@ (80011e0 <MX_TIM4_Init+0xe4>)
 80011d2:	f000 f919 	bl	8001408 <HAL_TIM_MspPostInit>

}
 80011d6:	bf00      	nop
 80011d8:	3738      	adds	r7, #56	@ 0x38
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000078 	.word	0x20000078
 80011e4:	40000800 	.word	0x40000800

080011e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <MX_USART1_UART_Init+0x4c>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <MX_USART1_UART_Init+0x50>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <MX_USART1_UART_Init+0x4c>)
 80011f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <MX_USART1_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <MX_USART1_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <MX_USART1_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <MX_USART1_UART_Init+0x4c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <MX_USART1_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <MX_USART1_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <MX_USART1_UART_Init+0x4c>)
 8001220:	f001 ffe2 	bl	80031e8 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800122a:	f000 f887 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200000c0 	.word	0x200000c0
 8001238:	40011000 	.word	0x40011000

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b36      	ldr	r3, [pc, #216]	@ (8001330 <MX_GPIO_Init+0xf4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a35      	ldr	r2, [pc, #212]	@ (8001330 <MX_GPIO_Init+0xf4>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b33      	ldr	r3, [pc, #204]	@ (8001330 <MX_GPIO_Init+0xf4>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b2f      	ldr	r3, [pc, #188]	@ (8001330 <MX_GPIO_Init+0xf4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a2e      	ldr	r2, [pc, #184]	@ (8001330 <MX_GPIO_Init+0xf4>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b2c      	ldr	r3, [pc, #176]	@ (8001330 <MX_GPIO_Init+0xf4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <MX_GPIO_Init+0xf4>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a27      	ldr	r2, [pc, #156]	@ (8001330 <MX_GPIO_Init+0xf4>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <MX_GPIO_Init+0xf4>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <MX_GPIO_Init+0xf4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a20      	ldr	r2, [pc, #128]	@ (8001330 <MX_GPIO_Init+0xf4>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_GPIO_Init+0xf4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80012c8:	481a      	ldr	r0, [pc, #104]	@ (8001334 <MX_GPIO_Init+0xf8>)
 80012ca:	f000 fcb3 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4814      	ldr	r0, [pc, #80]	@ (8001338 <MX_GPIO_Init+0xfc>)
 80012e6:	f000 fb21 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ea:	230c      	movs	r3, #12
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012fa:	2307      	movs	r3, #7
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	480b      	ldr	r0, [pc, #44]	@ (8001334 <MX_GPIO_Init+0xf8>)
 8001306:	f000 fb11 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 800130a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4804      	ldr	r0, [pc, #16]	@ (8001334 <MX_GPIO_Init+0xf8>)
 8001324:	f000 fb02 	bl	800192c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	@ 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020800 	.word	0x40020800

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <Error_Handler+0x8>

08001348 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	4a0f      	ldr	r2, [pc, #60]	@ (8001394 <HAL_MspInit+0x4c>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135c:	6453      	str	r3, [r2, #68]	@ 0x44
 800135e:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <HAL_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	4a08      	ldr	r2, [pc, #32]	@ (8001394 <HAL_MspInit+0x4c>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	@ 0x40
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001386:	2007      	movs	r0, #7
 8001388:	f000 fa9c 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800

08001398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a15      	ldr	r2, [pc, #84]	@ (80013fc <HAL_TIM_Base_MspInit+0x64>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10e      	bne.n	80013c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <HAL_TIM_Base_MspInit+0x68>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	4a13      	ldr	r2, [pc, #76]	@ (8001400 <HAL_TIM_Base_MspInit+0x68>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <HAL_TIM_Base_MspInit+0x68>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013c6:	e012      	b.n	80013ee <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <HAL_TIM_Base_MspInit+0x6c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d10d      	bne.n	80013ee <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001400 <HAL_TIM_Base_MspInit+0x68>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	4a09      	ldr	r2, [pc, #36]	@ (8001400 <HAL_TIM_Base_MspInit+0x68>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e2:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <HAL_TIM_Base_MspInit+0x68>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40000400 	.word	0x40000400
 8001400:	40023800 	.word	0x40023800
 8001404:	40000800 	.word	0x40000800

08001408 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a24      	ldr	r2, [pc, #144]	@ (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d11e      	bne.n	8001468 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <HAL_TIM_MspPostInit+0xb4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a22      	ldr	r2, [pc, #136]	@ (80014bc <HAL_TIM_MspPostInit+0xb4>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <HAL_TIM_MspPostInit+0xb4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001446:	2380      	movs	r3, #128	@ 0x80
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001456:	2302      	movs	r3, #2
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4817      	ldr	r0, [pc, #92]	@ (80014c0 <HAL_TIM_MspPostInit+0xb8>)
 8001462:	f000 fa63 	bl	800192c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001466:	e022      	b.n	80014ae <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a15      	ldr	r2, [pc, #84]	@ (80014c4 <HAL_TIM_MspPostInit+0xbc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d11d      	bne.n	80014ae <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <HAL_TIM_MspPostInit+0xb4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a10      	ldr	r2, [pc, #64]	@ (80014bc <HAL_TIM_MspPostInit+0xb4>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <HAL_TIM_MspPostInit+0xb4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800148e:	2340      	movs	r3, #64	@ 0x40
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800149e:	2302      	movs	r3, #2
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4807      	ldr	r0, [pc, #28]	@ (80014c8 <HAL_TIM_MspPostInit+0xc0>)
 80014aa:	f000 fa3f 	bl	800192c <HAL_GPIO_Init>
}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	@ 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40000400 	.word	0x40000400
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40000800 	.word	0x40000800
 80014c8:	40020400 	.word	0x40020400

080014cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	@ 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a19      	ldr	r2, [pc, #100]	@ (8001550 <HAL_UART_MspInit+0x84>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d12c      	bne.n	8001548 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <HAL_UART_MspInit+0x88>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	4a17      	ldr	r2, [pc, #92]	@ (8001554 <HAL_UART_MspInit+0x88>)
 80014f8:	f043 0310 	orr.w	r3, r3, #16
 80014fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_UART_MspInit+0x88>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_UART_MspInit+0x88>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a10      	ldr	r2, [pc, #64]	@ (8001554 <HAL_UART_MspInit+0x88>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <HAL_UART_MspInit+0x88>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001526:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001538:	2307      	movs	r3, #7
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <HAL_UART_MspInit+0x8c>)
 8001544:	f000 f9f2 	bl	800192c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40011000 	.word	0x40011000
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <NMI_Handler+0x4>

08001564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <MemManage_Handler+0x4>

08001574 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <UsageFault_Handler+0x4>

08001584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b2:	f000 f891 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <SystemInit+0x20>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <SystemInit+0x20>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001618 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015e4:	f7ff ffea 	bl	80015bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ea:	490d      	ldr	r1, [pc, #52]	@ (8001620 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001600:	4c0a      	ldr	r4, [pc, #40]	@ (800162c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160e:	f002 f8b7 	bl	8003780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7ff fc5f 	bl	8000ed4 <main>
  bx  lr    
 8001616:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001618:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001624:	08003808 	.word	0x08003808
  ldr r2, =_sbss
 8001628:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800162c:	2000010c 	.word	0x2000010c

08001630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001638:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <HAL_Init+0x40>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <HAL_Init+0x40>)
 800164a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800164e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	@ (8001674 <HAL_Init+0x40>)
 8001656:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800165a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 f931 	bl	80018c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	2000      	movs	r0, #0
 8001664:	f000 f808 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff fe6e 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023c00 	.word	0x40023c00

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f93b 	bl	8001912 <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 f911 	bl	80018da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	@ (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000010 	.word	0x20000010
 80016d4:	2000000c 	.word	0x2000000c

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000010 	.word	0x20000010
 80016fc:	20000108 	.word	0x20000108

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000108 	.word	0x20000108

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000010 	.word	0x20000010

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	db0a      	blt.n	80017ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	490c      	ldr	r1, [pc, #48]	@ (8001810 <__NVIC_SetPriority+0x4c>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	0112      	lsls	r2, r2, #4
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	440b      	add	r3, r1
 80017e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ec:	e00a      	b.n	8001804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4908      	ldr	r1, [pc, #32]	@ (8001814 <__NVIC_SetPriority+0x50>)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	3b04      	subs	r3, #4
 80017fc:	0112      	lsls	r2, r2, #4
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	440b      	add	r3, r1
 8001802:	761a      	strb	r2, [r3, #24]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001818:	b480      	push	{r7}
 800181a:	b089      	sub	sp, #36	@ 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f1c3 0307 	rsb	r3, r3, #7
 8001832:	2b04      	cmp	r3, #4
 8001834:	bf28      	it	cs
 8001836:	2304      	movcs	r3, #4
 8001838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3304      	adds	r3, #4
 800183e:	2b06      	cmp	r3, #6
 8001840:	d902      	bls.n	8001848 <NVIC_EncodePriority+0x30>
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3b03      	subs	r3, #3
 8001846:	e000      	b.n	800184a <NVIC_EncodePriority+0x32>
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	f04f 32ff 	mov.w	r2, #4294967295
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	401a      	ands	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001860:	f04f 31ff 	mov.w	r1, #4294967295
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	43d9      	mvns	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	4313      	orrs	r3, r2
         );
}
 8001872:	4618      	mov	r0, r3
 8001874:	3724      	adds	r7, #36	@ 0x24
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001890:	d301      	bcc.n	8001896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001892:	2301      	movs	r3, #1
 8001894:	e00f      	b.n	80018b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001896:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <SysTick_Config+0x40>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189e:	210f      	movs	r1, #15
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f7ff ff8e 	bl	80017c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <SysTick_Config+0x40>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ae:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <SysTick_Config+0x40>)
 80018b0:	2207      	movs	r2, #7
 80018b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	e000e010 	.word	0xe000e010

080018c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff47 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ec:	f7ff ff5c 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 80018f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68b9      	ldr	r1, [r7, #8]
 80018f6:	6978      	ldr	r0, [r7, #20]
 80018f8:	f7ff ff8e 	bl	8001818 <NVIC_EncodePriority>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff5d 	bl	80017c4 <__NVIC_SetPriority>
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ffb0 	bl	8001880 <SysTick_Config>
 8001920:	4603      	mov	r3, r0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e159      	b.n	8001bfc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001948:	2201      	movs	r2, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	429a      	cmp	r2, r3
 8001962:	f040 8148 	bne.w	8001bf6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d005      	beq.n	800197e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197a:	2b02      	cmp	r3, #2
 800197c:	d130      	bne.n	80019e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 0201 	and.w	r2, r3, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d017      	beq.n	8001a1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d123      	bne.n	8001a70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	08da      	lsrs	r2, r3, #3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3208      	adds	r2, #8
 8001a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	220f      	movs	r2, #15
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	08da      	lsrs	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3208      	adds	r2, #8
 8001a6a:	69b9      	ldr	r1, [r7, #24]
 8001a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80a2 	beq.w	8001bf6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b57      	ldr	r3, [pc, #348]	@ (8001c14 <HAL_GPIO_Init+0x2e8>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	4a56      	ldr	r2, [pc, #344]	@ (8001c14 <HAL_GPIO_Init+0x2e8>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac2:	4b54      	ldr	r3, [pc, #336]	@ (8001c14 <HAL_GPIO_Init+0x2e8>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ace:	4a52      	ldr	r2, [pc, #328]	@ (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a49      	ldr	r2, [pc, #292]	@ (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0x202>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a48      	ldr	r2, [pc, #288]	@ (8001c20 <HAL_GPIO_Init+0x2f4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x1fe>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a47      	ldr	r2, [pc, #284]	@ (8001c24 <HAL_GPIO_Init+0x2f8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x1fa>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a46      	ldr	r2, [pc, #280]	@ (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x1f6>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a45      	ldr	r2, [pc, #276]	@ (8001c2c <HAL_GPIO_Init+0x300>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x1f2>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e008      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b1e:	2307      	movs	r3, #7
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b22:	2303      	movs	r3, #3
 8001b24:	e004      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	f002 0203 	and.w	r2, r2, #3
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	4093      	lsls	r3, r2
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b40:	4935      	ldr	r1, [pc, #212]	@ (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4e:	4b38      	ldr	r3, [pc, #224]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b72:	4a2f      	ldr	r2, [pc, #188]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b78:	4b2d      	ldr	r3, [pc, #180]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b9c:	4a24      	ldr	r2, [pc, #144]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ba2:	4b23      	ldr	r3, [pc, #140]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	2b0f      	cmp	r3, #15
 8001c00:	f67f aea2 	bls.w	8001948 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3724      	adds	r7, #36	@ 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40013800 	.word	0x40013800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40020800 	.word	0x40020800
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40013c00 	.word	0x40013c00

08001c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c50:	e003      	b.n	8001c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	041a      	lsls	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e267      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d075      	beq.n	8001d72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c86:	4b88      	ldr	r3, [pc, #544]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d00c      	beq.n	8001cac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c92:	4b85      	ldr	r3, [pc, #532]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d112      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c9e:	4b82      	ldr	r3, [pc, #520]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001caa:	d10b      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cac:	4b7e      	ldr	r3, [pc, #504]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d05b      	beq.n	8001d70 <HAL_RCC_OscConfig+0x108>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d157      	bne.n	8001d70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e242      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ccc:	d106      	bne.n	8001cdc <HAL_RCC_OscConfig+0x74>
 8001cce:	4b76      	ldr	r3, [pc, #472]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a75      	ldr	r2, [pc, #468]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e01d      	b.n	8001d18 <HAL_RCC_OscConfig+0xb0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x98>
 8001ce6:	4b70      	ldr	r3, [pc, #448]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a6f      	ldr	r2, [pc, #444]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6c      	ldr	r2, [pc, #432]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e00b      	b.n	8001d18 <HAL_RCC_OscConfig+0xb0>
 8001d00:	4b69      	ldr	r3, [pc, #420]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a68      	ldr	r2, [pc, #416]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a65      	ldr	r2, [pc, #404]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d013      	beq.n	8001d48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fcee 	bl	8001700 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fcea 	bl	8001700 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	@ 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e207      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0xc0>
 8001d46:	e014      	b.n	8001d72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fcda 	bl	8001700 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff fcd6 	bl	8001700 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	@ 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e1f3      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	4b51      	ldr	r3, [pc, #324]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0xe8>
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d063      	beq.n	8001e46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d11c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d96:	4b44      	ldr	r3, [pc, #272]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d116      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	4b41      	ldr	r3, [pc, #260]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_RCC_OscConfig+0x152>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e1c7      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4937      	ldr	r1, [pc, #220]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	e03a      	b.n	8001e46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd8:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <HAL_RCC_OscConfig+0x244>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff fc8f 	bl	8001700 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de6:	f7ff fc8b 	bl	8001700 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e1a8      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b28      	ldr	r3, [pc, #160]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4925      	ldr	r1, [pc, #148]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	600b      	str	r3, [r1, #0]
 8001e18:	e015      	b.n	8001e46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1a:	4b24      	ldr	r3, [pc, #144]	@ (8001eac <HAL_RCC_OscConfig+0x244>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff fc6e 	bl	8001700 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e28:	f7ff fc6a 	bl	8001700 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e187      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d036      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d016      	beq.n	8001e88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_RCC_OscConfig+0x248>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff fc4e 	bl	8001700 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff fc4a 	bl	8001700 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e167      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x200>
 8001e86:	e01b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e88:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_RCC_OscConfig+0x248>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff fc37 	bl	8001700 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	e00e      	b.n	8001eb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e96:	f7ff fc33 	bl	8001700 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d907      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e150      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	42470000 	.word	0x42470000
 8001eb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	4b88      	ldr	r3, [pc, #544]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ea      	bne.n	8001e96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8097 	beq.w	8001ffc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed2:	4b81      	ldr	r3, [pc, #516]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10f      	bne.n	8001efe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	4b7d      	ldr	r3, [pc, #500]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	4a7c      	ldr	r2, [pc, #496]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eee:	4b7a      	ldr	r3, [pc, #488]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efa:	2301      	movs	r3, #1
 8001efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efe:	4b77      	ldr	r3, [pc, #476]	@ (80020dc <HAL_RCC_OscConfig+0x474>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d118      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0a:	4b74      	ldr	r3, [pc, #464]	@ (80020dc <HAL_RCC_OscConfig+0x474>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a73      	ldr	r2, [pc, #460]	@ (80020dc <HAL_RCC_OscConfig+0x474>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f16:	f7ff fbf3 	bl	8001700 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7ff fbef 	bl	8001700 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e10c      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	4b6a      	ldr	r3, [pc, #424]	@ (80020dc <HAL_RCC_OscConfig+0x474>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x2ea>
 8001f44:	4b64      	ldr	r3, [pc, #400]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f48:	4a63      	ldr	r2, [pc, #396]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f50:	e01c      	b.n	8001f8c <HAL_RCC_OscConfig+0x324>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x30c>
 8001f5a:	4b5f      	ldr	r3, [pc, #380]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5e:	4a5e      	ldr	r2, [pc, #376]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f66:	4b5c      	ldr	r3, [pc, #368]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6a:	4a5b      	ldr	r2, [pc, #364]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0x324>
 8001f74:	4b58      	ldr	r3, [pc, #352]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f78:	4a57      	ldr	r2, [pc, #348]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f80:	4b55      	ldr	r3, [pc, #340]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f84:	4a54      	ldr	r2, [pc, #336]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001f86:	f023 0304 	bic.w	r3, r3, #4
 8001f8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d015      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff fbb4 	bl	8001700 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7ff fbb0 	bl	8001700 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e0cb      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb2:	4b49      	ldr	r3, [pc, #292]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0ee      	beq.n	8001f9c <HAL_RCC_OscConfig+0x334>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc0:	f7ff fb9e 	bl	8001700 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fb9a 	bl	8001700 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0b5      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fde:	4b3e      	ldr	r3, [pc, #248]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1ee      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff0:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	4a38      	ldr	r2, [pc, #224]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80a1 	beq.w	8002148 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002006:	4b34      	ldr	r3, [pc, #208]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b08      	cmp	r3, #8
 8002010:	d05c      	beq.n	80020cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d141      	bne.n	800209e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <HAL_RCC_OscConfig+0x478>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff fb6e 	bl	8001700 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff fb6a 	bl	8001700 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e087      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	4b27      	ldr	r3, [pc, #156]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	019b      	lsls	r3, r3, #6
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205c:	085b      	lsrs	r3, r3, #1
 800205e:	3b01      	subs	r3, #1
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	491b      	ldr	r1, [pc, #108]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_RCC_OscConfig+0x478>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff fb43 	bl	8001700 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207e:	f7ff fb3f 	bl	8001700 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e05c      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002090:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x416>
 800209c:	e054      	b.n	8002148 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209e:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <HAL_RCC_OscConfig+0x478>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fb2c 	bl	8001700 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff fb28 	bl	8001700 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e045      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_RCC_OscConfig+0x470>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x444>
 80020ca:	e03d      	b.n	8002148 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e038      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40007000 	.word	0x40007000
 80020e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <HAL_RCC_OscConfig+0x4ec>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d028      	beq.n	8002144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d121      	bne.n	8002144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d11a      	bne.n	8002144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002114:	4013      	ands	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800211a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800211c:	4293      	cmp	r3, r2
 800211e:	d111      	bne.n	8002144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212a:	085b      	lsrs	r3, r3, #1
 800212c:	3b01      	subs	r3, #1
 800212e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d107      	bne.n	8002144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800

08002158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0cc      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800216c:	4b68      	ldr	r3, [pc, #416]	@ (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d90c      	bls.n	8002194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b65      	ldr	r3, [pc, #404]	@ (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b63      	ldr	r3, [pc, #396]	@ (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0b8      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d020      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ac:	4b59      	ldr	r3, [pc, #356]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4a58      	ldr	r2, [pc, #352]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c4:	4b53      	ldr	r3, [pc, #332]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	4a52      	ldr	r2, [pc, #328]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d0:	4b50      	ldr	r3, [pc, #320]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	494d      	ldr	r1, [pc, #308]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d044      	beq.n	8002278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4b47      	ldr	r3, [pc, #284]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d119      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e07f      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d003      	beq.n	8002216 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002212:	2b03      	cmp	r3, #3
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002216:	4b3f      	ldr	r3, [pc, #252]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e06f      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002226:	4b3b      	ldr	r3, [pc, #236]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e067      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002236:	4b37      	ldr	r3, [pc, #220]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f023 0203 	bic.w	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4934      	ldr	r1, [pc, #208]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	4313      	orrs	r3, r2
 8002246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002248:	f7ff fa5a 	bl	8001700 <HAL_GetTick>
 800224c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	e00a      	b.n	8002266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002250:	f7ff fa56 	bl	8001700 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e04f      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	4b2b      	ldr	r3, [pc, #172]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 020c 	and.w	r2, r3, #12
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	429a      	cmp	r2, r3
 8002276:	d1eb      	bne.n	8002250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d20c      	bcs.n	80022a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b22      	ldr	r3, [pc, #136]	@ (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b20      	ldr	r3, [pc, #128]	@ (8002310 <HAL_RCC_ClockConfig+0x1b8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e032      	b.n	8002306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ac:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4916      	ldr	r1, [pc, #88]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ca:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	490e      	ldr	r1, [pc, #56]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022de:	f000 f821 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	490a      	ldr	r1, [pc, #40]	@ (8002318 <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	5ccb      	ldrb	r3, [r1, r3]
 80022f2:	fa22 f303 	lsr.w	r3, r2, r3
 80022f6:	4a09      	ldr	r2, [pc, #36]	@ (800231c <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022fa:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <HAL_RCC_ClockConfig+0x1c8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f9ba 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023c00 	.word	0x40023c00
 8002314:	40023800 	.word	0x40023800
 8002318:	080037e0 	.word	0x080037e0
 800231c:	20000008 	.word	0x20000008
 8002320:	2000000c 	.word	0x2000000c

08002324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002328:	b094      	sub	sp, #80	@ 0x50
 800232a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800233c:	4b79      	ldr	r3, [pc, #484]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x200>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d00d      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x40>
 8002348:	2b08      	cmp	r3, #8
 800234a:	f200 80e1 	bhi.w	8002510 <HAL_RCC_GetSysClockFreq+0x1ec>
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x34>
 8002352:	2b04      	cmp	r3, #4
 8002354:	d003      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x3a>
 8002356:	e0db      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002358:	4b73      	ldr	r3, [pc, #460]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x204>)
 800235a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800235c:	e0db      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800235e:	4b73      	ldr	r3, [pc, #460]	@ (800252c <HAL_RCC_GetSysClockFreq+0x208>)
 8002360:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002362:	e0d8      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002364:	4b6f      	ldr	r3, [pc, #444]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x200>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800236c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800236e:	4b6d      	ldr	r3, [pc, #436]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x200>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d063      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800237a:	4b6a      	ldr	r3, [pc, #424]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x200>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	2200      	movs	r2, #0
 8002382:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002384:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238c:	633b      	str	r3, [r7, #48]	@ 0x30
 800238e:	2300      	movs	r3, #0
 8002390:	637b      	str	r3, [r7, #52]	@ 0x34
 8002392:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002396:	4622      	mov	r2, r4
 8002398:	462b      	mov	r3, r5
 800239a:	f04f 0000 	mov.w	r0, #0
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	0159      	lsls	r1, r3, #5
 80023a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a8:	0150      	lsls	r0, r2, #5
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4621      	mov	r1, r4
 80023b0:	1a51      	subs	r1, r2, r1
 80023b2:	6139      	str	r1, [r7, #16]
 80023b4:	4629      	mov	r1, r5
 80023b6:	eb63 0301 	sbc.w	r3, r3, r1
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023c8:	4659      	mov	r1, fp
 80023ca:	018b      	lsls	r3, r1, #6
 80023cc:	4651      	mov	r1, sl
 80023ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023d2:	4651      	mov	r1, sl
 80023d4:	018a      	lsls	r2, r1, #6
 80023d6:	4651      	mov	r1, sl
 80023d8:	ebb2 0801 	subs.w	r8, r2, r1
 80023dc:	4659      	mov	r1, fp
 80023de:	eb63 0901 	sbc.w	r9, r3, r1
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023f6:	4690      	mov	r8, r2
 80023f8:	4699      	mov	r9, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	eb18 0303 	adds.w	r3, r8, r3
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	462b      	mov	r3, r5
 8002404:	eb49 0303 	adc.w	r3, r9, r3
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002416:	4629      	mov	r1, r5
 8002418:	024b      	lsls	r3, r1, #9
 800241a:	4621      	mov	r1, r4
 800241c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002420:	4621      	mov	r1, r4
 8002422:	024a      	lsls	r2, r1, #9
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800242a:	2200      	movs	r2, #0
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800242e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002430:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002434:	f7fe faee 	bl	8000a14 <__aeabi_uldivmod>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4613      	mov	r3, r2
 800243e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002440:	e058      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002442:	4b38      	ldr	r3, [pc, #224]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x200>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	099b      	lsrs	r3, r3, #6
 8002448:	2200      	movs	r2, #0
 800244a:	4618      	mov	r0, r3
 800244c:	4611      	mov	r1, r2
 800244e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	2300      	movs	r3, #0
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
 8002458:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800245c:	4642      	mov	r2, r8
 800245e:	464b      	mov	r3, r9
 8002460:	f04f 0000 	mov.w	r0, #0
 8002464:	f04f 0100 	mov.w	r1, #0
 8002468:	0159      	lsls	r1, r3, #5
 800246a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800246e:	0150      	lsls	r0, r2, #5
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4641      	mov	r1, r8
 8002476:	ebb2 0a01 	subs.w	sl, r2, r1
 800247a:	4649      	mov	r1, r9
 800247c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800248c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002490:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002494:	ebb2 040a 	subs.w	r4, r2, sl
 8002498:	eb63 050b 	sbc.w	r5, r3, fp
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	00eb      	lsls	r3, r5, #3
 80024a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024aa:	00e2      	lsls	r2, r4, #3
 80024ac:	4614      	mov	r4, r2
 80024ae:	461d      	mov	r5, r3
 80024b0:	4643      	mov	r3, r8
 80024b2:	18e3      	adds	r3, r4, r3
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	464b      	mov	r3, r9
 80024b8:	eb45 0303 	adc.w	r3, r5, r3
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ca:	4629      	mov	r1, r5
 80024cc:	028b      	lsls	r3, r1, #10
 80024ce:	4621      	mov	r1, r4
 80024d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024d4:	4621      	mov	r1, r4
 80024d6:	028a      	lsls	r2, r1, #10
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024de:	2200      	movs	r2, #0
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	61fa      	str	r2, [r7, #28]
 80024e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e8:	f7fe fa94 	bl	8000a14 <__aeabi_uldivmod>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4613      	mov	r3, r2
 80024f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	3301      	adds	r3, #1
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002504:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800250e:	e002      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002510:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x204>)
 8002512:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002518:	4618      	mov	r0, r3
 800251a:	3750      	adds	r7, #80	@ 0x50
 800251c:	46bd      	mov	sp, r7
 800251e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	00f42400 	.word	0x00f42400
 800252c:	007a1200 	.word	0x007a1200

08002530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002534:	4b03      	ldr	r3, [pc, #12]	@ (8002544 <HAL_RCC_GetHCLKFreq+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000008 	.word	0x20000008

08002548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800254c:	f7ff fff0 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b05      	ldr	r3, [pc, #20]	@ (8002568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	0a9b      	lsrs	r3, r3, #10
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4903      	ldr	r1, [pc, #12]	@ (800256c <HAL_RCC_GetPCLK1Freq+0x24>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002564:	4618      	mov	r0, r3
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40023800 	.word	0x40023800
 800256c:	080037f0 	.word	0x080037f0

08002570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002574:	f7ff ffdc 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	0b5b      	lsrs	r3, r3, #13
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4903      	ldr	r1, [pc, #12]	@ (8002594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800258c:	4618      	mov	r0, r3
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40023800 	.word	0x40023800
 8002594:	080037f0 	.word	0x080037f0

08002598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e041      	b.n	800262e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe feea 	bl	8001398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f000 fac0 	bl	8002b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e041      	b.n	80026cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d106      	bne.n	8002662 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f839 	bl	80026d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f000 fa71 	bl	8002b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_TIM_PWM_Start+0x24>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	bf14      	ite	ne
 8002704:	2301      	movne	r3, #1
 8002706:	2300      	moveq	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	e022      	b.n	8002752 <HAL_TIM_PWM_Start+0x6a>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b04      	cmp	r3, #4
 8002710:	d109      	bne.n	8002726 <HAL_TIM_PWM_Start+0x3e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b01      	cmp	r3, #1
 800271c:	bf14      	ite	ne
 800271e:	2301      	movne	r3, #1
 8002720:	2300      	moveq	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	e015      	b.n	8002752 <HAL_TIM_PWM_Start+0x6a>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b08      	cmp	r3, #8
 800272a:	d109      	bne.n	8002740 <HAL_TIM_PWM_Start+0x58>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	bf14      	ite	ne
 8002738:	2301      	movne	r3, #1
 800273a:	2300      	moveq	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	e008      	b.n	8002752 <HAL_TIM_PWM_Start+0x6a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	bf14      	ite	ne
 800274c:	2301      	movne	r3, #1
 800274e:	2300      	moveq	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e068      	b.n	800282c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d104      	bne.n	800276a <HAL_TIM_PWM_Start+0x82>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002768:	e013      	b.n	8002792 <HAL_TIM_PWM_Start+0xaa>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b04      	cmp	r3, #4
 800276e:	d104      	bne.n	800277a <HAL_TIM_PWM_Start+0x92>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002778:	e00b      	b.n	8002792 <HAL_TIM_PWM_Start+0xaa>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d104      	bne.n	800278a <HAL_TIM_PWM_Start+0xa2>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002788:	e003      	b.n	8002792 <HAL_TIM_PWM_Start+0xaa>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2202      	movs	r2, #2
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2201      	movs	r2, #1
 8002798:	6839      	ldr	r1, [r7, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fc90 	bl	80030c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a23      	ldr	r2, [pc, #140]	@ (8002834 <HAL_TIM_PWM_Start+0x14c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d107      	bne.n	80027ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a1d      	ldr	r2, [pc, #116]	@ (8002834 <HAL_TIM_PWM_Start+0x14c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d018      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x10e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027cc:	d013      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x10e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a19      	ldr	r2, [pc, #100]	@ (8002838 <HAL_TIM_PWM_Start+0x150>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d00e      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x10e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a17      	ldr	r2, [pc, #92]	@ (800283c <HAL_TIM_PWM_Start+0x154>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x10e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a16      	ldr	r2, [pc, #88]	@ (8002840 <HAL_TIM_PWM_Start+0x158>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d004      	beq.n	80027f6 <HAL_TIM_PWM_Start+0x10e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a14      	ldr	r2, [pc, #80]	@ (8002844 <HAL_TIM_PWM_Start+0x15c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d111      	bne.n	800281a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b06      	cmp	r3, #6
 8002806:	d010      	beq.n	800282a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002818:	e007      	b.n	800282a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40010000 	.word	0x40010000
 8002838:	40000400 	.word	0x40000400
 800283c:	40000800 	.word	0x40000800
 8002840:	40000c00 	.word	0x40000c00
 8002844:	40014000 	.word	0x40014000

08002848 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002862:	2302      	movs	r3, #2
 8002864:	e0ae      	b.n	80029c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0c      	cmp	r3, #12
 8002872:	f200 809f 	bhi.w	80029b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002876:	a201      	add	r2, pc, #4	@ (adr r2, 800287c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	080028b1 	.word	0x080028b1
 8002880:	080029b5 	.word	0x080029b5
 8002884:	080029b5 	.word	0x080029b5
 8002888:	080029b5 	.word	0x080029b5
 800288c:	080028f1 	.word	0x080028f1
 8002890:	080029b5 	.word	0x080029b5
 8002894:	080029b5 	.word	0x080029b5
 8002898:	080029b5 	.word	0x080029b5
 800289c:	08002933 	.word	0x08002933
 80028a0:	080029b5 	.word	0x080029b5
 80028a4:	080029b5 	.word	0x080029b5
 80028a8:	080029b5 	.word	0x080029b5
 80028ac:	08002973 	.word	0x08002973
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f9dc 	bl	8002c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699a      	ldr	r2, [r3, #24]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0208 	orr.w	r2, r2, #8
 80028ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0204 	bic.w	r2, r2, #4
 80028da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6999      	ldr	r1, [r3, #24]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	619a      	str	r2, [r3, #24]
      break;
 80028ee:	e064      	b.n	80029ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fa22 	bl	8002d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800290a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800291a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6999      	ldr	r1, [r3, #24]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	021a      	lsls	r2, r3, #8
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	619a      	str	r2, [r3, #24]
      break;
 8002930:	e043      	b.n	80029ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fa6d 	bl	8002e18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0208 	orr.w	r2, r2, #8
 800294c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	69da      	ldr	r2, [r3, #28]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0204 	bic.w	r2, r2, #4
 800295c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69d9      	ldr	r1, [r3, #28]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	61da      	str	r2, [r3, #28]
      break;
 8002970:	e023      	b.n	80029ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fab7 	bl	8002eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	69da      	ldr	r2, [r3, #28]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800298c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800299c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	69d9      	ldr	r1, [r3, #28]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	021a      	lsls	r2, r3, #8
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	61da      	str	r2, [r3, #28]
      break;
 80029b2:	e002      	b.n	80029ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	75fb      	strb	r3, [r7, #23]
      break;
 80029b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_TIM_ConfigClockSource+0x1c>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e0b4      	b.n	8002b52 <HAL_TIM_ConfigClockSource+0x186>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a20:	d03e      	beq.n	8002aa0 <HAL_TIM_ConfigClockSource+0xd4>
 8002a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a26:	f200 8087 	bhi.w	8002b38 <HAL_TIM_ConfigClockSource+0x16c>
 8002a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a2e:	f000 8086 	beq.w	8002b3e <HAL_TIM_ConfigClockSource+0x172>
 8002a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a36:	d87f      	bhi.n	8002b38 <HAL_TIM_ConfigClockSource+0x16c>
 8002a38:	2b70      	cmp	r3, #112	@ 0x70
 8002a3a:	d01a      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0xa6>
 8002a3c:	2b70      	cmp	r3, #112	@ 0x70
 8002a3e:	d87b      	bhi.n	8002b38 <HAL_TIM_ConfigClockSource+0x16c>
 8002a40:	2b60      	cmp	r3, #96	@ 0x60
 8002a42:	d050      	beq.n	8002ae6 <HAL_TIM_ConfigClockSource+0x11a>
 8002a44:	2b60      	cmp	r3, #96	@ 0x60
 8002a46:	d877      	bhi.n	8002b38 <HAL_TIM_ConfigClockSource+0x16c>
 8002a48:	2b50      	cmp	r3, #80	@ 0x50
 8002a4a:	d03c      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0xfa>
 8002a4c:	2b50      	cmp	r3, #80	@ 0x50
 8002a4e:	d873      	bhi.n	8002b38 <HAL_TIM_ConfigClockSource+0x16c>
 8002a50:	2b40      	cmp	r3, #64	@ 0x40
 8002a52:	d058      	beq.n	8002b06 <HAL_TIM_ConfigClockSource+0x13a>
 8002a54:	2b40      	cmp	r3, #64	@ 0x40
 8002a56:	d86f      	bhi.n	8002b38 <HAL_TIM_ConfigClockSource+0x16c>
 8002a58:	2b30      	cmp	r3, #48	@ 0x30
 8002a5a:	d064      	beq.n	8002b26 <HAL_TIM_ConfigClockSource+0x15a>
 8002a5c:	2b30      	cmp	r3, #48	@ 0x30
 8002a5e:	d86b      	bhi.n	8002b38 <HAL_TIM_ConfigClockSource+0x16c>
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d060      	beq.n	8002b26 <HAL_TIM_ConfigClockSource+0x15a>
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d867      	bhi.n	8002b38 <HAL_TIM_ConfigClockSource+0x16c>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d05c      	beq.n	8002b26 <HAL_TIM_ConfigClockSource+0x15a>
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	d05a      	beq.n	8002b26 <HAL_TIM_ConfigClockSource+0x15a>
 8002a70:	e062      	b.n	8002b38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a82:	f000 fafd 	bl	8003080 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	609a      	str	r2, [r3, #8]
      break;
 8002a9e:	e04f      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ab0:	f000 fae6 	bl	8003080 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ac2:	609a      	str	r2, [r3, #8]
      break;
 8002ac4:	e03c      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f000 fa5a 	bl	8002f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2150      	movs	r1, #80	@ 0x50
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fab3 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002ae4:	e02c      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af2:	461a      	mov	r2, r3
 8002af4:	f000 fa79 	bl	8002fea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2160      	movs	r1, #96	@ 0x60
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 faa3 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002b04:	e01c      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b12:	461a      	mov	r2, r3
 8002b14:	f000 fa3a 	bl	8002f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2140      	movs	r1, #64	@ 0x40
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fa93 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002b24:	e00c      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4610      	mov	r0, r2
 8002b32:	f000 fa8a 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002b36:	e003      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e000      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a3a      	ldr	r2, [pc, #232]	@ (8002c58 <TIM_Base_SetConfig+0xfc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00f      	beq.n	8002b94 <TIM_Base_SetConfig+0x38>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7a:	d00b      	beq.n	8002b94 <TIM_Base_SetConfig+0x38>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a37      	ldr	r2, [pc, #220]	@ (8002c5c <TIM_Base_SetConfig+0x100>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <TIM_Base_SetConfig+0x38>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a36      	ldr	r2, [pc, #216]	@ (8002c60 <TIM_Base_SetConfig+0x104>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <TIM_Base_SetConfig+0x38>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a35      	ldr	r2, [pc, #212]	@ (8002c64 <TIM_Base_SetConfig+0x108>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d108      	bne.n	8002ba6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8002c58 <TIM_Base_SetConfig+0xfc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01b      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb4:	d017      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a28      	ldr	r2, [pc, #160]	@ (8002c5c <TIM_Base_SetConfig+0x100>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a27      	ldr	r2, [pc, #156]	@ (8002c60 <TIM_Base_SetConfig+0x104>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00f      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a26      	ldr	r2, [pc, #152]	@ (8002c64 <TIM_Base_SetConfig+0x108>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00b      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a25      	ldr	r2, [pc, #148]	@ (8002c68 <TIM_Base_SetConfig+0x10c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a24      	ldr	r2, [pc, #144]	@ (8002c6c <TIM_Base_SetConfig+0x110>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d003      	beq.n	8002be6 <TIM_Base_SetConfig+0x8a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a23      	ldr	r2, [pc, #140]	@ (8002c70 <TIM_Base_SetConfig+0x114>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d108      	bne.n	8002bf8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c58 <TIM_Base_SetConfig+0xfc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d103      	bne.n	8002c2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d105      	bne.n	8002c4a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f023 0201 	bic.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	611a      	str	r2, [r3, #16]
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800
 8002c64:	40000c00 	.word	0x40000c00
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800

08002c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f023 0201 	bic.w	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f023 0302 	bic.w	r3, r3, #2
 8002cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a1c      	ldr	r2, [pc, #112]	@ (8002d3c <TIM_OC1_SetConfig+0xc8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d10c      	bne.n	8002cea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f023 0308 	bic.w	r3, r3, #8
 8002cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f023 0304 	bic.w	r3, r3, #4
 8002ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a13      	ldr	r2, [pc, #76]	@ (8002d3c <TIM_OC1_SetConfig+0xc8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d111      	bne.n	8002d16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	621a      	str	r2, [r3, #32]
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40010000 	.word	0x40010000

08002d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f023 0210 	bic.w	r2, r3, #16
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 0320 	bic.w	r3, r3, #32
 8002d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002e14 <TIM_OC2_SetConfig+0xd4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d10d      	bne.n	8002dbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a15      	ldr	r2, [pc, #84]	@ (8002e14 <TIM_OC2_SetConfig+0xd4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d113      	bne.n	8002dec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40010000 	.word	0x40010000

08002e18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee8 <TIM_OC3_SetConfig+0xd0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10d      	bne.n	8002e92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a14      	ldr	r2, [pc, #80]	@ (8002ee8 <TIM_OC3_SetConfig+0xd0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d113      	bne.n	8002ec2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	621a      	str	r2, [r3, #32]
}
 8002edc:	bf00      	nop
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40010000 	.word	0x40010000

08002eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	031b      	lsls	r3, r3, #12
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a10      	ldr	r2, [pc, #64]	@ (8002f88 <TIM_OC4_SetConfig+0x9c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d109      	bne.n	8002f60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	019b      	lsls	r3, r3, #6
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	621a      	str	r2, [r3, #32]
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40010000 	.word	0x40010000

08002f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f023 0201 	bic.w	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f023 030a 	bic.w	r3, r3, #10
 8002fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	621a      	str	r2, [r3, #32]
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b087      	sub	sp, #28
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f023 0210 	bic.w	r2, r3, #16
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003014:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	031b      	lsls	r3, r3, #12
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003026:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	621a      	str	r2, [r3, #32]
}
 800303e:	bf00      	nop
 8003040:	371c      	adds	r7, #28
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	f043 0307 	orr.w	r3, r3, #7
 800306c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	609a      	str	r2, [r3, #8]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800309a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	021a      	lsls	r2, r3, #8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	609a      	str	r2, [r3, #8]
}
 80030b4:	bf00      	nop
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2201      	movs	r2, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1a      	ldr	r2, [r3, #32]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	401a      	ands	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	621a      	str	r2, [r3, #32]
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003120:	2302      	movs	r3, #2
 8003122:	e050      	b.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800314a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1c      	ldr	r2, [pc, #112]	@ (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d018      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003170:	d013      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a18      	ldr	r2, [pc, #96]	@ (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00e      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a16      	ldr	r2, [pc, #88]	@ (80031dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d009      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a15      	ldr	r2, [pc, #84]	@ (80031e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d004      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a13      	ldr	r2, [pc, #76]	@ (80031e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d10c      	bne.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40010000 	.word	0x40010000
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40000800 	.word	0x40000800
 80031e0:	40000c00 	.word	0x40000c00
 80031e4:	40014000 	.word	0x40014000

080031e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e042      	b.n	8003280 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe f95c 	bl	80014cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2224      	movs	r2, #36	@ 0x24
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800322a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f82b 	bl	8003288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800328c:	b0c0      	sub	sp, #256	@ 0x100
 800328e:	af00      	add	r7, sp, #0
 8003290:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a4:	68d9      	ldr	r1, [r3, #12]
 80032a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	ea40 0301 	orr.w	r3, r0, r1
 80032b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	431a      	orrs	r2, r3
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032e0:	f021 010c 	bic.w	r1, r1, #12
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032ee:	430b      	orrs	r3, r1
 80032f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003302:	6999      	ldr	r1, [r3, #24]
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	ea40 0301 	orr.w	r3, r0, r1
 800330e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b8f      	ldr	r3, [pc, #572]	@ (8003554 <UART_SetConfig+0x2cc>)
 8003318:	429a      	cmp	r2, r3
 800331a:	d005      	beq.n	8003328 <UART_SetConfig+0xa0>
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b8d      	ldr	r3, [pc, #564]	@ (8003558 <UART_SetConfig+0x2d0>)
 8003324:	429a      	cmp	r2, r3
 8003326:	d104      	bne.n	8003332 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003328:	f7ff f922 	bl	8002570 <HAL_RCC_GetPCLK2Freq>
 800332c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003330:	e003      	b.n	800333a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003332:	f7ff f909 	bl	8002548 <HAL_RCC_GetPCLK1Freq>
 8003336:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003344:	f040 810c 	bne.w	8003560 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800334c:	2200      	movs	r2, #0
 800334e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003352:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003356:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800335a:	4622      	mov	r2, r4
 800335c:	462b      	mov	r3, r5
 800335e:	1891      	adds	r1, r2, r2
 8003360:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003362:	415b      	adcs	r3, r3
 8003364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003366:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800336a:	4621      	mov	r1, r4
 800336c:	eb12 0801 	adds.w	r8, r2, r1
 8003370:	4629      	mov	r1, r5
 8003372:	eb43 0901 	adc.w	r9, r3, r1
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800338a:	4690      	mov	r8, r2
 800338c:	4699      	mov	r9, r3
 800338e:	4623      	mov	r3, r4
 8003390:	eb18 0303 	adds.w	r3, r8, r3
 8003394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003398:	462b      	mov	r3, r5
 800339a:	eb49 0303 	adc.w	r3, r9, r3
 800339e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80033b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033b6:	460b      	mov	r3, r1
 80033b8:	18db      	adds	r3, r3, r3
 80033ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80033bc:	4613      	mov	r3, r2
 80033be:	eb42 0303 	adc.w	r3, r2, r3
 80033c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80033c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033cc:	f7fd fb22 	bl	8000a14 <__aeabi_uldivmod>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4b61      	ldr	r3, [pc, #388]	@ (800355c <UART_SetConfig+0x2d4>)
 80033d6:	fba3 2302 	umull	r2, r3, r3, r2
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	011c      	lsls	r4, r3, #4
 80033de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033f0:	4642      	mov	r2, r8
 80033f2:	464b      	mov	r3, r9
 80033f4:	1891      	adds	r1, r2, r2
 80033f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033f8:	415b      	adcs	r3, r3
 80033fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003400:	4641      	mov	r1, r8
 8003402:	eb12 0a01 	adds.w	sl, r2, r1
 8003406:	4649      	mov	r1, r9
 8003408:	eb43 0b01 	adc.w	fp, r3, r1
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003418:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800341c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003420:	4692      	mov	sl, r2
 8003422:	469b      	mov	fp, r3
 8003424:	4643      	mov	r3, r8
 8003426:	eb1a 0303 	adds.w	r3, sl, r3
 800342a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800342e:	464b      	mov	r3, r9
 8003430:	eb4b 0303 	adc.w	r3, fp, r3
 8003434:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003444:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003448:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800344c:	460b      	mov	r3, r1
 800344e:	18db      	adds	r3, r3, r3
 8003450:	643b      	str	r3, [r7, #64]	@ 0x40
 8003452:	4613      	mov	r3, r2
 8003454:	eb42 0303 	adc.w	r3, r2, r3
 8003458:	647b      	str	r3, [r7, #68]	@ 0x44
 800345a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800345e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003462:	f7fd fad7 	bl	8000a14 <__aeabi_uldivmod>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4611      	mov	r1, r2
 800346c:	4b3b      	ldr	r3, [pc, #236]	@ (800355c <UART_SetConfig+0x2d4>)
 800346e:	fba3 2301 	umull	r2, r3, r3, r1
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	2264      	movs	r2, #100	@ 0x64
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	1acb      	subs	r3, r1, r3
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003482:	4b36      	ldr	r3, [pc, #216]	@ (800355c <UART_SetConfig+0x2d4>)
 8003484:	fba3 2302 	umull	r2, r3, r3, r2
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003490:	441c      	add	r4, r3
 8003492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003496:	2200      	movs	r2, #0
 8003498:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800349c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80034a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80034a4:	4642      	mov	r2, r8
 80034a6:	464b      	mov	r3, r9
 80034a8:	1891      	adds	r1, r2, r2
 80034aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034ac:	415b      	adcs	r3, r3
 80034ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034b4:	4641      	mov	r1, r8
 80034b6:	1851      	adds	r1, r2, r1
 80034b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80034ba:	4649      	mov	r1, r9
 80034bc:	414b      	adcs	r3, r1
 80034be:	637b      	str	r3, [r7, #52]	@ 0x34
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034cc:	4659      	mov	r1, fp
 80034ce:	00cb      	lsls	r3, r1, #3
 80034d0:	4651      	mov	r1, sl
 80034d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034d6:	4651      	mov	r1, sl
 80034d8:	00ca      	lsls	r2, r1, #3
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	4603      	mov	r3, r0
 80034e0:	4642      	mov	r2, r8
 80034e2:	189b      	adds	r3, r3, r2
 80034e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034e8:	464b      	mov	r3, r9
 80034ea:	460a      	mov	r2, r1
 80034ec:	eb42 0303 	adc.w	r3, r2, r3
 80034f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003500:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003504:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003508:	460b      	mov	r3, r1
 800350a:	18db      	adds	r3, r3, r3
 800350c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800350e:	4613      	mov	r3, r2
 8003510:	eb42 0303 	adc.w	r3, r2, r3
 8003514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003516:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800351a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800351e:	f7fd fa79 	bl	8000a14 <__aeabi_uldivmod>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4b0d      	ldr	r3, [pc, #52]	@ (800355c <UART_SetConfig+0x2d4>)
 8003528:	fba3 1302 	umull	r1, r3, r3, r2
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	2164      	movs	r1, #100	@ 0x64
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	3332      	adds	r3, #50	@ 0x32
 800353a:	4a08      	ldr	r2, [pc, #32]	@ (800355c <UART_SetConfig+0x2d4>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	f003 0207 	and.w	r2, r3, #7
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4422      	add	r2, r4
 800354e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003550:	e106      	b.n	8003760 <UART_SetConfig+0x4d8>
 8003552:	bf00      	nop
 8003554:	40011000 	.word	0x40011000
 8003558:	40011400 	.word	0x40011400
 800355c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003564:	2200      	movs	r2, #0
 8003566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800356a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800356e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003572:	4642      	mov	r2, r8
 8003574:	464b      	mov	r3, r9
 8003576:	1891      	adds	r1, r2, r2
 8003578:	6239      	str	r1, [r7, #32]
 800357a:	415b      	adcs	r3, r3
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24
 800357e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003582:	4641      	mov	r1, r8
 8003584:	1854      	adds	r4, r2, r1
 8003586:	4649      	mov	r1, r9
 8003588:	eb43 0501 	adc.w	r5, r3, r1
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	00eb      	lsls	r3, r5, #3
 8003596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800359a:	00e2      	lsls	r2, r4, #3
 800359c:	4614      	mov	r4, r2
 800359e:	461d      	mov	r5, r3
 80035a0:	4643      	mov	r3, r8
 80035a2:	18e3      	adds	r3, r4, r3
 80035a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035a8:	464b      	mov	r3, r9
 80035aa:	eb45 0303 	adc.w	r3, r5, r3
 80035ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035ce:	4629      	mov	r1, r5
 80035d0:	008b      	lsls	r3, r1, #2
 80035d2:	4621      	mov	r1, r4
 80035d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035d8:	4621      	mov	r1, r4
 80035da:	008a      	lsls	r2, r1, #2
 80035dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035e0:	f7fd fa18 	bl	8000a14 <__aeabi_uldivmod>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4b60      	ldr	r3, [pc, #384]	@ (800376c <UART_SetConfig+0x4e4>)
 80035ea:	fba3 2302 	umull	r2, r3, r3, r2
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	011c      	lsls	r4, r3, #4
 80035f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003600:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003604:	4642      	mov	r2, r8
 8003606:	464b      	mov	r3, r9
 8003608:	1891      	adds	r1, r2, r2
 800360a:	61b9      	str	r1, [r7, #24]
 800360c:	415b      	adcs	r3, r3
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003614:	4641      	mov	r1, r8
 8003616:	1851      	adds	r1, r2, r1
 8003618:	6139      	str	r1, [r7, #16]
 800361a:	4649      	mov	r1, r9
 800361c:	414b      	adcs	r3, r1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800362c:	4659      	mov	r1, fp
 800362e:	00cb      	lsls	r3, r1, #3
 8003630:	4651      	mov	r1, sl
 8003632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003636:	4651      	mov	r1, sl
 8003638:	00ca      	lsls	r2, r1, #3
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	4603      	mov	r3, r0
 8003640:	4642      	mov	r2, r8
 8003642:	189b      	adds	r3, r3, r2
 8003644:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003648:	464b      	mov	r3, r9
 800364a:	460a      	mov	r2, r1
 800364c:	eb42 0303 	adc.w	r3, r2, r3
 8003650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800365e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800366c:	4649      	mov	r1, r9
 800366e:	008b      	lsls	r3, r1, #2
 8003670:	4641      	mov	r1, r8
 8003672:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003676:	4641      	mov	r1, r8
 8003678:	008a      	lsls	r2, r1, #2
 800367a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800367e:	f7fd f9c9 	bl	8000a14 <__aeabi_uldivmod>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4611      	mov	r1, r2
 8003688:	4b38      	ldr	r3, [pc, #224]	@ (800376c <UART_SetConfig+0x4e4>)
 800368a:	fba3 2301 	umull	r2, r3, r3, r1
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2264      	movs	r2, #100	@ 0x64
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	1acb      	subs	r3, r1, r3
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	3332      	adds	r3, #50	@ 0x32
 800369c:	4a33      	ldr	r2, [pc, #204]	@ (800376c <UART_SetConfig+0x4e4>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036a8:	441c      	add	r4, r3
 80036aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ae:	2200      	movs	r2, #0
 80036b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80036b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80036b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80036b8:	4642      	mov	r2, r8
 80036ba:	464b      	mov	r3, r9
 80036bc:	1891      	adds	r1, r2, r2
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	415b      	adcs	r3, r3
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036c8:	4641      	mov	r1, r8
 80036ca:	1851      	adds	r1, r2, r1
 80036cc:	6039      	str	r1, [r7, #0]
 80036ce:	4649      	mov	r1, r9
 80036d0:	414b      	adcs	r3, r1
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036e0:	4659      	mov	r1, fp
 80036e2:	00cb      	lsls	r3, r1, #3
 80036e4:	4651      	mov	r1, sl
 80036e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ea:	4651      	mov	r1, sl
 80036ec:	00ca      	lsls	r2, r1, #3
 80036ee:	4610      	mov	r0, r2
 80036f0:	4619      	mov	r1, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	4642      	mov	r2, r8
 80036f6:	189b      	adds	r3, r3, r2
 80036f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036fa:	464b      	mov	r3, r9
 80036fc:	460a      	mov	r2, r1
 80036fe:	eb42 0303 	adc.w	r3, r2, r3
 8003702:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	663b      	str	r3, [r7, #96]	@ 0x60
 800370e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800371c:	4649      	mov	r1, r9
 800371e:	008b      	lsls	r3, r1, #2
 8003720:	4641      	mov	r1, r8
 8003722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003726:	4641      	mov	r1, r8
 8003728:	008a      	lsls	r2, r1, #2
 800372a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800372e:	f7fd f971 	bl	8000a14 <__aeabi_uldivmod>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4b0d      	ldr	r3, [pc, #52]	@ (800376c <UART_SetConfig+0x4e4>)
 8003738:	fba3 1302 	umull	r1, r3, r3, r2
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	2164      	movs	r1, #100	@ 0x64
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	3332      	adds	r3, #50	@ 0x32
 800374a:	4a08      	ldr	r2, [pc, #32]	@ (800376c <UART_SetConfig+0x4e4>)
 800374c:	fba2 2303 	umull	r2, r3, r2, r3
 8003750:	095b      	lsrs	r3, r3, #5
 8003752:	f003 020f 	and.w	r2, r3, #15
 8003756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4422      	add	r2, r4
 800375e:	609a      	str	r2, [r3, #8]
}
 8003760:	bf00      	nop
 8003762:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003766:	46bd      	mov	sp, r7
 8003768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800376c:	51eb851f 	.word	0x51eb851f

08003770 <memset>:
 8003770:	4402      	add	r2, r0
 8003772:	4603      	mov	r3, r0
 8003774:	4293      	cmp	r3, r2
 8003776:	d100      	bne.n	800377a <memset+0xa>
 8003778:	4770      	bx	lr
 800377a:	f803 1b01 	strb.w	r1, [r3], #1
 800377e:	e7f9      	b.n	8003774 <memset+0x4>

08003780 <__libc_init_array>:
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	4d0d      	ldr	r5, [pc, #52]	@ (80037b8 <__libc_init_array+0x38>)
 8003784:	4c0d      	ldr	r4, [pc, #52]	@ (80037bc <__libc_init_array+0x3c>)
 8003786:	1b64      	subs	r4, r4, r5
 8003788:	10a4      	asrs	r4, r4, #2
 800378a:	2600      	movs	r6, #0
 800378c:	42a6      	cmp	r6, r4
 800378e:	d109      	bne.n	80037a4 <__libc_init_array+0x24>
 8003790:	4d0b      	ldr	r5, [pc, #44]	@ (80037c0 <__libc_init_array+0x40>)
 8003792:	4c0c      	ldr	r4, [pc, #48]	@ (80037c4 <__libc_init_array+0x44>)
 8003794:	f000 f818 	bl	80037c8 <_init>
 8003798:	1b64      	subs	r4, r4, r5
 800379a:	10a4      	asrs	r4, r4, #2
 800379c:	2600      	movs	r6, #0
 800379e:	42a6      	cmp	r6, r4
 80037a0:	d105      	bne.n	80037ae <__libc_init_array+0x2e>
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a8:	4798      	blx	r3
 80037aa:	3601      	adds	r6, #1
 80037ac:	e7ee      	b.n	800378c <__libc_init_array+0xc>
 80037ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b2:	4798      	blx	r3
 80037b4:	3601      	adds	r6, #1
 80037b6:	e7f2      	b.n	800379e <__libc_init_array+0x1e>
 80037b8:	08003800 	.word	0x08003800
 80037bc:	08003800 	.word	0x08003800
 80037c0:	08003800 	.word	0x08003800
 80037c4:	08003804 	.word	0x08003804

080037c8 <_init>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	bf00      	nop
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr

080037d4 <_fini>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	bf00      	nop
 80037d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037da:	bc08      	pop	{r3}
 80037dc:	469e      	mov	lr, r3
 80037de:	4770      	bx	lr
