
ZigbeeHostBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003940  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003afc  08003afc  00004afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b6c  08003b6c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b6c  08003b6c  00004b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b74  08003b74  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b74  08003b74  00004b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b78  08003b78  00004b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20040000  08003b7c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2004000c  08003b88  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200400c0  08003b88  000050c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c744  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa4  00000000  00000000  00011780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00013228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000792  00000000  00000000  00013c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002852e  00000000  00000000  00014392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6bd  00000000  00000000  0003c8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f947b  00000000  00000000  00048f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001423f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027cc  00000000  00000000  0014243c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00144c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2004000c 	.word	0x2004000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003ae4 	.word	0x08003ae4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040010 	.word	0x20040010
 80001f8:	08003ae4 	.word	0x08003ae4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 fbfa 	bl	8000cea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f81b 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f8ab 	bl	8000654 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004fe:	f000 f85d 	bl	80005bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data[4];
  data[0] = 50;
 8000502:	2332      	movs	r3, #50	@ 0x32
 8000504:	713b      	strb	r3, [r7, #4]
  data[1] = 50;
 8000506:	2332      	movs	r3, #50	@ 0x32
 8000508:	717b      	strb	r3, [r7, #5]
  data[2] = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	71bb      	strb	r3, [r7, #6]
  data[3] = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart1, &data[0], sizeof(data), HAL_MAX_DELAY);
 8000512:	1d39      	adds	r1, r7, #4
 8000514:	f04f 33ff 	mov.w	r3, #4294967295
 8000518:	2204      	movs	r2, #4
 800051a:	4804      	ldr	r0, [pc, #16]	@ (800052c <main+0x40>)
 800051c:	f002 fc0a 	bl	8002d34 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000520:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000524:	f000 fc56 	bl	8000dd4 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, &data[0], sizeof(data), HAL_MAX_DELAY);
 8000528:	bf00      	nop
 800052a:	e7f2      	b.n	8000512 <main+0x26>
 800052c:	20040028 	.word	0x20040028

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	@ 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	@ 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f003 faa4 	bl	8003a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000556:	f000 fef9 	bl	800134c <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 face 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000564:	2310      	movs	r3, #16
 8000566:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000570:	2360      	movs	r3, #96	@ 0x60
 8000572:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000574:	2300      	movs	r3, #0
 8000576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4618      	mov	r0, r3
 800057e:	f000 ff99 	bl	80014b4 <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000588:	f000 faba 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a0:	463b      	mov	r3, r7
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 fb9f 	bl	8001ce8 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005b0:	f000 faa6 	bl	8000b00 <Error_Handler>
  }
}
 80005b4:	bf00      	nop
 80005b6:	3758      	adds	r7, #88	@ 0x58
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c0:	4b22      	ldr	r3, [pc, #136]	@ (800064c <MX_USART1_UART_Init+0x90>)
 80005c2:	4a23      	ldr	r2, [pc, #140]	@ (8000650 <MX_USART1_UART_Init+0x94>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005c6:	4b21      	ldr	r3, [pc, #132]	@ (800064c <MX_USART1_UART_Init+0x90>)
 80005c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80005cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <MX_USART1_UART_Init+0x90>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	@ (800064c <MX_USART1_UART_Init+0x90>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <MX_USART1_UART_Init+0x90>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <MX_USART1_UART_Init+0x90>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	@ (800064c <MX_USART1_UART_Init+0x90>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b17      	ldr	r3, [pc, #92]	@ (800064c <MX_USART1_UART_Init+0x90>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f2:	4b16      	ldr	r3, [pc, #88]	@ (800064c <MX_USART1_UART_Init+0x90>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005f8:	4b14      	ldr	r3, [pc, #80]	@ (800064c <MX_USART1_UART_Init+0x90>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fe:	4b13      	ldr	r3, [pc, #76]	@ (800064c <MX_USART1_UART_Init+0x90>)
 8000600:	2200      	movs	r2, #0
 8000602:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000604:	4811      	ldr	r0, [pc, #68]	@ (800064c <MX_USART1_UART_Init+0x90>)
 8000606:	f002 fb45 	bl	8002c94 <HAL_UART_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000610:	f000 fa76 	bl	8000b00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000614:	2100      	movs	r1, #0
 8000616:	480d      	ldr	r0, [pc, #52]	@ (800064c <MX_USART1_UART_Init+0x90>)
 8000618:	f003 f96e 	bl	80038f8 <HAL_UARTEx_SetTxFifoThreshold>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000622:	f000 fa6d 	bl	8000b00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000626:	2100      	movs	r1, #0
 8000628:	4808      	ldr	r0, [pc, #32]	@ (800064c <MX_USART1_UART_Init+0x90>)
 800062a:	f003 f9a3 	bl	8003974 <HAL_UARTEx_SetRxFifoThreshold>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000634:	f000 fa64 	bl	8000b00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	@ (800064c <MX_USART1_UART_Init+0x90>)
 800063a:	f003 f924 	bl	8003886 <HAL_UARTEx_DisableFifoMode>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000644:	f000 fa5c 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20040028 	.word	0x20040028
 8000650:	40013800 	.word	0x40013800

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08e      	sub	sp, #56	@ 0x38
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800066a:	4bb2      	ldr	r3, [pc, #712]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	4ab1      	ldr	r2, [pc, #708]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 8000670:	f043 0310 	orr.w	r3, r3, #16
 8000674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000676:	4baf      	ldr	r3, [pc, #700]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	f003 0310 	and.w	r3, r3, #16
 800067e:	623b      	str	r3, [r7, #32]
 8000680:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	4bac      	ldr	r3, [pc, #688]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4aab      	ldr	r2, [pc, #684]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4ba9      	ldr	r3, [pc, #676]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	61fb      	str	r3, [r7, #28]
 8000698:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069a:	4ba6      	ldr	r3, [pc, #664]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	4aa5      	ldr	r2, [pc, #660]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 80006a0:	f043 0320 	orr.w	r3, r3, #32
 80006a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a6:	4ba3      	ldr	r3, [pc, #652]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	f003 0320 	and.w	r3, r3, #32
 80006ae:	61bb      	str	r3, [r7, #24]
 80006b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	4ba0      	ldr	r3, [pc, #640]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	4a9f      	ldr	r2, [pc, #636]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006be:	4b9d      	ldr	r3, [pc, #628]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b9a      	ldr	r3, [pc, #616]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	4a99      	ldr	r2, [pc, #612]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006d6:	4b97      	ldr	r3, [pc, #604]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	4b94      	ldr	r3, [pc, #592]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a93      	ldr	r2, [pc, #588]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b91      	ldr	r3, [pc, #580]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	4b8e      	ldr	r3, [pc, #568]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a8d      	ldr	r2, [pc, #564]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b8b      	ldr	r3, [pc, #556]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000712:	4b88      	ldr	r3, [pc, #544]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	4a87      	ldr	r2, [pc, #540]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 8000718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800071c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071e:	4b85      	ldr	r3, [pc, #532]	@ (8000934 <MX_GPIO_Init+0x2e0>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800072a:	f000 feb3 	bl	8001494 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800072e:	230c      	movs	r3, #12
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800073e:	230d      	movs	r3, #13
 8000740:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000746:	4619      	mov	r1, r3
 8000748:	487b      	ldr	r0, [pc, #492]	@ (8000938 <MX_GPIO_Init+0x2e4>)
 800074a:	f000 fc4d 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800074e:	2307      	movs	r3, #7
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000752:	2312      	movs	r3, #18
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800075e:	2304      	movs	r3, #4
 8000760:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000766:	4619      	mov	r1, r3
 8000768:	4874      	ldr	r0, [pc, #464]	@ (800093c <MX_GPIO_Init+0x2e8>)
 800076a:	f000 fc3d 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800076e:	2380      	movs	r3, #128	@ 0x80
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800077e:	230d      	movs	r3, #13
 8000780:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000786:	4619      	mov	r1, r3
 8000788:	486c      	ldr	r0, [pc, #432]	@ (800093c <MX_GPIO_Init+0x2e8>)
 800078a:	f000 fc2d 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800078e:	233f      	movs	r3, #63	@ 0x3f
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000792:	230b      	movs	r3, #11
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079e:	4619      	mov	r1, r3
 80007a0:	4867      	ldr	r0, [pc, #412]	@ (8000940 <MX_GPIO_Init+0x2ec>)
 80007a2:	f000 fc21 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a6:	2301      	movs	r3, #1
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007b6:	2301      	movs	r3, #1
 80007b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c4:	f000 fc10 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80007c8:	230a      	movs	r3, #10
 80007ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007cc:	230b      	movs	r3, #11
 80007ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d8:	4619      	mov	r1, r3
 80007da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007de:	f000 fc03 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007e2:	23f0      	movs	r3, #240	@ 0xf0
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ee:	2303      	movs	r3, #3
 80007f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007f2:	2305      	movs	r3, #5
 80007f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000800:	f000 fbf2 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000804:	2301      	movs	r3, #1
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000814:	2302      	movs	r3, #2
 8000816:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081c:	4619      	mov	r1, r3
 800081e:	4849      	ldr	r0, [pc, #292]	@ (8000944 <MX_GPIO_Init+0x2f0>)
 8000820:	f000 fbe2 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000824:	2302      	movs	r3, #2
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000828:	230b      	movs	r3, #11
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000834:	4619      	mov	r1, r3
 8000836:	4843      	ldr	r0, [pc, #268]	@ (8000944 <MX_GPIO_Init+0x2f0>)
 8000838:	f000 fbd6 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800083c:	2344      	movs	r3, #68	@ 0x44
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000840:	2303      	movs	r3, #3
 8000842:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084c:	4619      	mov	r1, r3
 800084e:	483d      	ldr	r0, [pc, #244]	@ (8000944 <MX_GPIO_Init+0x2f0>)
 8000850:	f000 fbca 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000854:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000866:	2301      	movs	r3, #1
 8000868:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086e:	4619      	mov	r1, r3
 8000870:	4831      	ldr	r0, [pc, #196]	@ (8000938 <MX_GPIO_Init+0x2e4>)
 8000872:	f000 fbb9 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000876:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000888:	2303      	movs	r3, #3
 800088a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	4829      	ldr	r0, [pc, #164]	@ (8000938 <MX_GPIO_Init+0x2e4>)
 8000894:	f000 fba8 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000898:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008aa:	2301      	movs	r3, #1
 80008ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	4823      	ldr	r0, [pc, #140]	@ (8000944 <MX_GPIO_Init+0x2f0>)
 80008b6:	f000 fb97 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80008ba:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80008cc:	230d      	movs	r3, #13
 80008ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d4:	4619      	mov	r1, r3
 80008d6:	481b      	ldr	r0, [pc, #108]	@ (8000944 <MX_GPIO_Init+0x2f0>)
 80008d8:	f000 fb86 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80008ee:	230e      	movs	r3, #14
 80008f0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f6:	4619      	mov	r1, r3
 80008f8:	4812      	ldr	r0, [pc, #72]	@ (8000944 <MX_GPIO_Init+0x2f0>)
 80008fa:	f000 fb75 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000910:	2307      	movs	r3, #7
 8000912:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000914:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000918:	4619      	mov	r1, r3
 800091a:	480b      	ldr	r0, [pc, #44]	@ (8000948 <MX_GPIO_Init+0x2f4>)
 800091c:	f000 fb64 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000920:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	e00c      	b.n	800094c <MX_GPIO_Init+0x2f8>
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000
 8000938:	48001000 	.word	0x48001000
 800093c:	48001400 	.word	0x48001400
 8000940:	48000800 	.word	0x48000800
 8000944:	48000400 	.word	0x48000400
 8000948:	48000c00 	.word	0x48000c00
 800094c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800094e:	2302      	movs	r3, #2
 8000950:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	4864      	ldr	r0, [pc, #400]	@ (8000aec <MX_GPIO_Init+0x498>)
 800095a:	f000 fb45 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800095e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000970:	2308      	movs	r3, #8
 8000972:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	485d      	ldr	r0, [pc, #372]	@ (8000af0 <MX_GPIO_Init+0x49c>)
 800097c:	f000 fb34 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000980:	2340      	movs	r3, #64	@ 0x40
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000990:	230d      	movs	r3, #13
 8000992:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000998:	4619      	mov	r1, r3
 800099a:	4856      	ldr	r0, [pc, #344]	@ (8000af4 <MX_GPIO_Init+0x4a0>)
 800099c:	f000 fb24 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009a0:	2380      	movs	r3, #128	@ 0x80
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009b0:	2302      	movs	r3, #2
 80009b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b8:	4619      	mov	r1, r3
 80009ba:	484e      	ldr	r0, [pc, #312]	@ (8000af4 <MX_GPIO_Init+0x4a0>)
 80009bc:	f000 fb14 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80009c0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009d2:	230c      	movs	r3, #12
 80009d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4845      	ldr	r0, [pc, #276]	@ (8000af4 <MX_GPIO_Init+0x4a0>)
 80009de:	f000 fb03 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80009e2:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009f4:	230a      	movs	r3, #10
 80009f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a02:	f000 faf1 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1e:	f000 fae3 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a22:	2301      	movs	r3, #1
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a32:	2309      	movs	r3, #9
 8000a34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	482b      	ldr	r0, [pc, #172]	@ (8000aec <MX_GPIO_Init+0x498>)
 8000a3e:	f000 fad3 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a42:	2304      	movs	r3, #4
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a52:	230c      	movs	r3, #12
 8000a54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4823      	ldr	r0, [pc, #140]	@ (8000aec <MX_GPIO_Init+0x498>)
 8000a5e:	f000 fac3 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000a62:	2378      	movs	r3, #120	@ 0x78
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a72:	2307      	movs	r3, #7
 8000a74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481b      	ldr	r0, [pc, #108]	@ (8000aec <MX_GPIO_Init+0x498>)
 8000a7e:	f000 fab3 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a82:	2338      	movs	r3, #56	@ 0x38
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a92:	2306      	movs	r3, #6
 8000a94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4816      	ldr	r0, [pc, #88]	@ (8000af8 <MX_GPIO_Init+0x4a4>)
 8000a9e:	f000 faa3 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aa2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa8:	2312      	movs	r3, #18
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	480e      	ldr	r0, [pc, #56]	@ (8000af8 <MX_GPIO_Init+0x4a4>)
 8000ac0:	f000 fa92 	bl	8000fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	4807      	ldr	r0, [pc, #28]	@ (8000afc <MX_GPIO_Init+0x4a8>)
 8000ae0:	f000 fa82 	bl	8000fe8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae4:	bf00      	nop
 8000ae6:	3738      	adds	r7, #56	@ 0x38
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	48000c00 	.word	0x48000c00
 8000af0:	48001800 	.word	0x48001800
 8000af4:	48000800 	.word	0x48000800
 8000af8:	48000400 	.word	0x48000400
 8000afc:	48001000 	.word	0x48001000

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <Error_Handler+0x8>

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b16:	4a0e      	ldr	r2, [pc, #56]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2e:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_MspInit+0x44>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0ae      	sub	sp, #184	@ 0xb8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	2294      	movs	r2, #148	@ 0x94
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 ff89 	bl	8003a8c <memset>
  if(huart->Instance==USART1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a22      	ldr	r2, [pc, #136]	@ (8000c08 <HAL_UART_MspInit+0xb4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d13d      	bne.n	8000c00 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 fb67 	bl	8002264 <HAL_RCCEx_PeriphCLKConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b9c:	f7ff ffb0 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <HAL_UART_MspInit+0xb8>)
 8000ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba4:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <HAL_UART_MspInit+0xb8>)
 8000ba6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000baa:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bac:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <HAL_UART_MspInit+0xb8>)
 8000bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <HAL_UART_MspInit+0xb8>)
 8000bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbc:	4a13      	ldr	r2, [pc, #76]	@ (8000c0c <HAL_UART_MspInit+0xb8>)
 8000bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc4:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <HAL_UART_MspInit+0xb8>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000bd0:	f000 fc60 	bl	8001494 <HAL_PWREx_EnableVddIO2>
    /**USART1 GPIO Configuration
    PG9     ------> USART1_TX
    PG10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bd4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <HAL_UART_MspInit+0xbc>)
 8000bfc:	f000 f9f4 	bl	8000fe8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c00:	bf00      	nop
 8000c02:	37b8      	adds	r7, #184	@ 0xb8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40013800 	.word	0x40013800
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	48001800 	.word	0x48001800

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6a:	f000 f893 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c9c:	f7ff ffea 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	@ (8000cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <LoopForever+0xe>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce4 <LoopForever+0x16>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f002 fee9 	bl	8003a9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cca:	f7ff fc0f 	bl	80004ec <main>

08000cce <LoopForever>:

LoopForever:
    b LoopForever
 8000cce:	e7fe      	b.n	8000cce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000cd4:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8000cd8:	2004000c 	.word	0x2004000c
  ldr r2, =_sidata
 8000cdc:	08003b7c 	.word	0x08003b7c
  ldr r2, =_sbss
 8000ce0:	2004000c 	.word	0x2004000c
  ldr r4, =_ebss
 8000ce4:	200400c0 	.word	0x200400c0

08000ce8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_IRQHandler>

08000cea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f943 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f80e 	bl	8000d1c <HAL_InitTick>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	e001      	b.n	8000d10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d0c:	f7ff fefe 	bl	8000b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d10:	79fb      	ldrb	r3, [r7, #7]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d28:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <HAL_InitTick+0x6c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d023      	beq.n	8000d78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d30:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <HAL_InitTick+0x70>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <HAL_InitTick+0x6c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f941 	bl	8000fce <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10f      	bne.n	8000d72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d809      	bhi.n	8000d6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f000 f919 	bl	8000f96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d64:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <HAL_InitTick+0x74>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e007      	b.n	8000d7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e004      	b.n	8000d7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	e001      	b.n	8000d7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20040008 	.word	0x20040008
 8000d8c:	20040000 	.word	0x20040000
 8000d90:	20040004 	.word	0x20040004

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	@ (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20040008 	.word	0x20040008
 8000db8:	200400bc 	.word	0x200400bc

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	@ (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	200400bc 	.word	0x200400bc

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff ffee 	bl	8000dbc <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffde 	bl	8000dbc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20040008 	.word	0x20040008

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	@ (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	@ (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	@ 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f7ff ff8e 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff47 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa8:	f7ff ff5c 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff ff8e 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff5d 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ffb0 	bl	8000f3c <SysTick_Config>
 8000fdc:	4603      	mov	r3, r0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff6:	e166      	b.n	80012c6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8158 	beq.w	80012c0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b01      	cmp	r3, #1
 800101a:	d005      	beq.n	8001028 <HAL_GPIO_Init+0x40>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d130      	bne.n	800108a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105e:	2201      	movs	r2, #1
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	f003 0201 	and.w	r2, r3, #1
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b03      	cmp	r3, #3
 8001094:	d017      	beq.n	80010c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d123      	bne.n	800111a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	691a      	ldr	r2, [r3, #16]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	6939      	ldr	r1, [r7, #16]
 8001116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0203 	and.w	r2, r3, #3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 80b2 	beq.w	80012c0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115c:	4b61      	ldr	r3, [pc, #388]	@ (80012e4 <HAL_GPIO_Init+0x2fc>)
 800115e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001160:	4a60      	ldr	r2, [pc, #384]	@ (80012e4 <HAL_GPIO_Init+0x2fc>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6613      	str	r3, [r2, #96]	@ 0x60
 8001168:	4b5e      	ldr	r3, [pc, #376]	@ (80012e4 <HAL_GPIO_Init+0x2fc>)
 800116a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001174:	4a5c      	ldr	r2, [pc, #368]	@ (80012e8 <HAL_GPIO_Init+0x300>)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800119e:	d02b      	beq.n	80011f8 <HAL_GPIO_Init+0x210>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a52      	ldr	r2, [pc, #328]	@ (80012ec <HAL_GPIO_Init+0x304>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d025      	beq.n	80011f4 <HAL_GPIO_Init+0x20c>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a51      	ldr	r2, [pc, #324]	@ (80012f0 <HAL_GPIO_Init+0x308>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d01f      	beq.n	80011f0 <HAL_GPIO_Init+0x208>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a50      	ldr	r2, [pc, #320]	@ (80012f4 <HAL_GPIO_Init+0x30c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d019      	beq.n	80011ec <HAL_GPIO_Init+0x204>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a4f      	ldr	r2, [pc, #316]	@ (80012f8 <HAL_GPIO_Init+0x310>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d013      	beq.n	80011e8 <HAL_GPIO_Init+0x200>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a4e      	ldr	r2, [pc, #312]	@ (80012fc <HAL_GPIO_Init+0x314>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00d      	beq.n	80011e4 <HAL_GPIO_Init+0x1fc>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a4d      	ldr	r2, [pc, #308]	@ (8001300 <HAL_GPIO_Init+0x318>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d007      	beq.n	80011e0 <HAL_GPIO_Init+0x1f8>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001304 <HAL_GPIO_Init+0x31c>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d101      	bne.n	80011dc <HAL_GPIO_Init+0x1f4>
 80011d8:	2307      	movs	r3, #7
 80011da:	e00e      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011dc:	2308      	movs	r3, #8
 80011de:	e00c      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011e0:	2306      	movs	r3, #6
 80011e2:	e00a      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011e4:	2305      	movs	r3, #5
 80011e6:	e008      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011e8:	2304      	movs	r3, #4
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011ec:	2303      	movs	r3, #3
 80011ee:	e004      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <HAL_GPIO_Init+0x212>
 80011f8:	2300      	movs	r3, #0
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	f002 0203 	and.w	r2, r2, #3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4093      	lsls	r3, r2
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800120a:	4937      	ldr	r1, [pc, #220]	@ (80012e8 <HAL_GPIO_Init+0x300>)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001218:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <HAL_GPIO_Init+0x320>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800123c:	4a32      	ldr	r2, [pc, #200]	@ (8001308 <HAL_GPIO_Init+0x320>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001242:	4b31      	ldr	r3, [pc, #196]	@ (8001308 <HAL_GPIO_Init+0x320>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001266:	4a28      	ldr	r2, [pc, #160]	@ (8001308 <HAL_GPIO_Init+0x320>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800126c:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <HAL_GPIO_Init+0x320>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001290:	4a1d      	ldr	r2, [pc, #116]	@ (8001308 <HAL_GPIO_Init+0x320>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <HAL_GPIO_Init+0x320>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ba:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <HAL_GPIO_Init+0x320>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f47f ae91 	bne.w	8000ff8 <HAL_GPIO_Init+0x10>
  }
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	48000400 	.word	0x48000400
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000c00 	.word	0x48000c00
 80012f8:	48001000 	.word	0x48001000
 80012fc:	48001400 	.word	0x48001400
 8001300:	48001800 	.word	0x48001800
 8001304:	48001c00 	.word	0x48001c00
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001310:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800131c:	d102      	bne.n	8001324 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800131e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001322:	e00b      	b.n	800133c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800132a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001332:	d102      	bne.n	800133a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001338:	e000      	b.n	800133c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800133a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40007000 	.word	0x40007000

0800134c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d141      	bne.n	80013de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800135a:	4b4b      	ldr	r3, [pc, #300]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001366:	d131      	bne.n	80013cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001368:	4b47      	ldr	r3, [pc, #284]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800136e:	4a46      	ldr	r2, [pc, #280]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001374:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001378:	4b43      	ldr	r3, [pc, #268]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001380:	4a41      	ldr	r2, [pc, #260]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001382:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001386:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001388:	4b40      	ldr	r3, [pc, #256]	@ (800148c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2232      	movs	r2, #50	@ 0x32
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	4a3f      	ldr	r2, [pc, #252]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	0c9b      	lsrs	r3, r3, #18
 800139a:	3301      	adds	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139e:	e002      	b.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a6:	4b38      	ldr	r3, [pc, #224]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013b2:	d102      	bne.n	80013ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f2      	bne.n	80013a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ba:	4b33      	ldr	r3, [pc, #204]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c6:	d158      	bne.n	800147a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e057      	b.n	800147c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013dc:	e04d      	b.n	800147a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013e4:	d141      	bne.n	800146a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e6:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f2:	d131      	bne.n	8001458 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013f4:	4b24      	ldr	r3, [pc, #144]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013fa:	4a23      	ldr	r2, [pc, #140]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001400:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001404:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800140c:	4a1e      	ldr	r2, [pc, #120]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001412:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001414:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2232      	movs	r2, #50	@ 0x32
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	4a1c      	ldr	r2, [pc, #112]	@ (8001490 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	0c9b      	lsrs	r3, r3, #18
 8001426:	3301      	adds	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800142a:	e002      	b.n	8001432 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3b01      	subs	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800143e:	d102      	bne.n	8001446 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f2      	bne.n	800142c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001452:	d112      	bne.n	800147a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e011      	b.n	800147c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001458:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001464:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001468:	e007      	b.n	800147a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800146a:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001472:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001478:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40007000 	.word	0x40007000
 800148c:	20040000 	.word	0x20040000
 8001490:	431bde83 	.word	0x431bde83

08001494 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001498:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800149e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014a2:	6053      	str	r3, [r2, #4]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40007000 	.word	0x40007000

080014b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f000 bc08 	b.w	8001cd8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c8:	4b96      	ldr	r3, [pc, #600]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d2:	4b94      	ldr	r3, [pc, #592]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0310 	and.w	r3, r3, #16
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80e4 	beq.w	80016b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <HAL_RCC_OscConfig+0x4c>
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	f040 808b 	bne.w	800160e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	f040 8087 	bne.w	800160e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001500:	4b88      	ldr	r3, [pc, #544]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_OscConfig+0x64>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e3df      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1a      	ldr	r2, [r3, #32]
 800151c:	4b81      	ldr	r3, [pc, #516]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	2b00      	cmp	r3, #0
 8001526:	d004      	beq.n	8001532 <HAL_RCC_OscConfig+0x7e>
 8001528:	4b7e      	ldr	r3, [pc, #504]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001530:	e005      	b.n	800153e <HAL_RCC_OscConfig+0x8a>
 8001532:	4b7c      	ldr	r3, [pc, #496]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800153e:	4293      	cmp	r3, r2
 8001540:	d223      	bcs.n	800158a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fdcc 	bl	80020e4 <RCC_SetFlashLatencyFromMSIRange>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e3c0      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001556:	4b73      	ldr	r3, [pc, #460]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a72      	ldr	r2, [pc, #456]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b70      	ldr	r3, [pc, #448]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	496d      	ldr	r1, [pc, #436]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001574:	4b6b      	ldr	r3, [pc, #428]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	4968      	ldr	r1, [pc, #416]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
 8001588:	e025      	b.n	80015d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800158a:	4b66      	ldr	r3, [pc, #408]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a65      	ldr	r2, [pc, #404]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b63      	ldr	r3, [pc, #396]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4960      	ldr	r1, [pc, #384]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	495b      	ldr	r1, [pc, #364]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d109      	bne.n	80015d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fd8c 	bl	80020e4 <RCC_SetFlashLatencyFromMSIRange>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e380      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015d6:	f000 fcc1 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 80015da:	4602      	mov	r2, r0
 80015dc:	4b51      	ldr	r3, [pc, #324]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	4950      	ldr	r1, [pc, #320]	@ (8001728 <HAL_RCC_OscConfig+0x274>)
 80015e8:	5ccb      	ldrb	r3, [r1, r3]
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	fa22 f303 	lsr.w	r3, r2, r3
 80015f2:	4a4e      	ldr	r2, [pc, #312]	@ (800172c <HAL_RCC_OscConfig+0x278>)
 80015f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001730 <HAL_RCC_OscConfig+0x27c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fb8e 	bl	8000d1c <HAL_InitTick>
 8001600:	4603      	mov	r3, r0
 8001602:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d052      	beq.n	80016b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	e364      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d032      	beq.n	800167c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001616:	4b43      	ldr	r3, [pc, #268]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a42      	ldr	r2, [pc, #264]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001622:	f7ff fbcb 	bl	8000dbc <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800162a:	f7ff fbc7 	bl	8000dbc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e34d      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800163c:	4b39      	ldr	r3, [pc, #228]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001648:	4b36      	ldr	r3, [pc, #216]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a35      	ldr	r2, [pc, #212]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800164e:	f043 0308 	orr.w	r3, r3, #8
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b33      	ldr	r3, [pc, #204]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4930      	ldr	r1, [pc, #192]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001666:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	492b      	ldr	r1, [pc, #172]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
 800167a:	e01a      	b.n	80016b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800167c:	4b29      	ldr	r3, [pc, #164]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a28      	ldr	r2, [pc, #160]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001682:	f023 0301 	bic.w	r3, r3, #1
 8001686:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb98 	bl	8000dbc <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001690:	f7ff fb94 	bl	8000dbc <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e31a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x1dc>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d073      	beq.n	80017a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_OscConfig+0x21c>
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2b0c      	cmp	r3, #12
 80016c8:	d10e      	bne.n	80016e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d10b      	bne.n	80016e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d063      	beq.n	80017a4 <HAL_RCC_OscConfig+0x2f0>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d15f      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e2f7      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f0:	d106      	bne.n	8001700 <HAL_RCC_OscConfig+0x24c>
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e025      	b.n	800174c <HAL_RCC_OscConfig+0x298>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001708:	d114      	bne.n	8001734 <HAL_RCC_OscConfig+0x280>
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b03      	ldr	r3, [pc, #12]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a02      	ldr	r2, [pc, #8]	@ (8001724 <HAL_RCC_OscConfig+0x270>)
 800171c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e013      	b.n	800174c <HAL_RCC_OscConfig+0x298>
 8001724:	40021000 	.word	0x40021000
 8001728:	08003afc 	.word	0x08003afc
 800172c:	20040000 	.word	0x20040000
 8001730:	20040004 	.word	0x20040004
 8001734:	4ba0      	ldr	r3, [pc, #640]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a9f      	ldr	r2, [pc, #636]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800173a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b9d      	ldr	r3, [pc, #628]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a9c      	ldr	r2, [pc, #624]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800174a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d013      	beq.n	800177c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fb32 	bl	8000dbc <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fb2e 	bl	8000dbc <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	@ 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e2b4      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176e:	4b92      	ldr	r3, [pc, #584]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x2a8>
 800177a:	e014      	b.n	80017a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fb1e 	bl	8000dbc <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fb1a 	bl	8000dbc <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	@ 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e2a0      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001796:	4b88      	ldr	r3, [pc, #544]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x2d0>
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d060      	beq.n	8001874 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_OscConfig+0x310>
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d119      	bne.n	80017f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d116      	bne.n	80017f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c4:	4b7c      	ldr	r3, [pc, #496]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_OscConfig+0x328>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e27d      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017dc:	4b76      	ldr	r3, [pc, #472]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	061b      	lsls	r3, r3, #24
 80017ea:	4973      	ldr	r1, [pc, #460]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f0:	e040      	b.n	8001874 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d023      	beq.n	8001842 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017fa:	4b6f      	ldr	r3, [pc, #444]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6e      	ldr	r2, [pc, #440]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff fad9 	bl	8000dbc <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180e:	f7ff fad5 	bl	8000dbc <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e25b      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001820:	4b65      	ldr	r3, [pc, #404]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4b62      	ldr	r3, [pc, #392]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	061b      	lsls	r3, r3, #24
 800183a:	495f      	ldr	r1, [pc, #380]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
 8001840:	e018      	b.n	8001874 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001842:	4b5d      	ldr	r3, [pc, #372]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a5c      	ldr	r2, [pc, #368]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800184c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff fab5 	bl	8000dbc <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff fab1 	bl	8000dbc <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e237      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001868:	4b53      	ldr	r3, [pc, #332]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d03c      	beq.n	80018fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d01c      	beq.n	80018c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001888:	4b4b      	ldr	r3, [pc, #300]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800188a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800188e:	4a4a      	ldr	r2, [pc, #296]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff fa90 	bl	8000dbc <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff fa8c 	bl	8000dbc <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e212      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b2:	4b41      	ldr	r3, [pc, #260]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80018b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0ef      	beq.n	80018a0 <HAL_RCC_OscConfig+0x3ec>
 80018c0:	e01b      	b.n	80018fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c2:	4b3d      	ldr	r3, [pc, #244]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80018c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c8:	4a3b      	ldr	r2, [pc, #236]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d2:	f7ff fa73 	bl	8000dbc <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018da:	f7ff fa6f 	bl	8000dbc <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e1f5      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ec:	4b32      	ldr	r3, [pc, #200]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80018ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ef      	bne.n	80018da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80a6 	beq.w	8001a54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800190c:	4b2a      	ldr	r3, [pc, #168]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10d      	bne.n	8001934 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191c:	4a26      	ldr	r2, [pc, #152]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800191e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001922:	6593      	str	r3, [r2, #88]	@ 0x58
 8001924:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001930:	2301      	movs	r3, #1
 8001932:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001934:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <HAL_RCC_OscConfig+0x508>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d118      	bne.n	8001972 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001940:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <HAL_RCC_OscConfig+0x508>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a1d      	ldr	r2, [pc, #116]	@ (80019bc <HAL_RCC_OscConfig+0x508>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194c:	f7ff fa36 	bl	8000dbc <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001954:	f7ff fa32 	bl	8000dbc <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e1b8      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <HAL_RCC_OscConfig+0x508>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d108      	bne.n	800198c <HAL_RCC_OscConfig+0x4d8>
 800197a:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800197c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001980:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800198a:	e029      	b.n	80019e0 <HAL_RCC_OscConfig+0x52c>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b05      	cmp	r3, #5
 8001992:	d115      	bne.n	80019c0 <HAL_RCC_OscConfig+0x50c>
 8001994:	4b08      	ldr	r3, [pc, #32]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199a:	4a07      	ldr	r2, [pc, #28]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80019a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019aa:	4a03      	ldr	r2, [pc, #12]	@ (80019b8 <HAL_RCC_OscConfig+0x504>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019b4:	e014      	b.n	80019e0 <HAL_RCC_OscConfig+0x52c>
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40007000 	.word	0x40007000
 80019c0:	4b9d      	ldr	r3, [pc, #628]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c6:	4a9c      	ldr	r2, [pc, #624]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d0:	4b99      	ldr	r3, [pc, #612]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d6:	4a98      	ldr	r2, [pc, #608]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 80019d8:	f023 0304 	bic.w	r3, r3, #4
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d016      	beq.n	8001a16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e8:	f7ff f9e8 	bl	8000dbc <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ee:	e00a      	b.n	8001a06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f0:	f7ff f9e4 	bl	8000dbc <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e168      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a06:	4b8c      	ldr	r3, [pc, #560]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ed      	beq.n	80019f0 <HAL_RCC_OscConfig+0x53c>
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a16:	f7ff f9d1 	bl	8000dbc <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff f9cd 	bl	8000dbc <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e151      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a34:	4b80      	ldr	r3, [pc, #512]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1ed      	bne.n	8001a1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d105      	bne.n	8001a54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a48:	4b7b      	ldr	r3, [pc, #492]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4c:	4a7a      	ldr	r2, [pc, #488]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001a4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0320 	and.w	r3, r3, #32
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d03c      	beq.n	8001ada <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01c      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a68:	4b73      	ldr	r3, [pc, #460]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a6e:	4a72      	ldr	r2, [pc, #456]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff f9a0 	bl	8000dbc <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a80:	f7ff f99c 	bl	8000dbc <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e122      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a92:	4b69      	ldr	r3, [pc, #420]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001a94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ef      	beq.n	8001a80 <HAL_RCC_OscConfig+0x5cc>
 8001aa0:	e01b      	b.n	8001ada <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aa2:	4b65      	ldr	r3, [pc, #404]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aa8:	4a63      	ldr	r2, [pc, #396]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab2:	f7ff f983 	bl	8000dbc <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aba:	f7ff f97f 	bl	8000dbc <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e105      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001acc:	4b5a      	ldr	r3, [pc, #360]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ef      	bne.n	8001aba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80f9 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	f040 80cf 	bne.w	8001c8c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001aee:	4b52      	ldr	r3, [pc, #328]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 0203 	and.w	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d12c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d123      	bne.n	8001b5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d11b      	bne.n	8001b5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d113      	bne.n	8001b5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b3e:	085b      	lsrs	r3, r3, #1
 8001b40:	3b01      	subs	r3, #1
 8001b42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d109      	bne.n	8001b5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	3b01      	subs	r3, #1
 8001b56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d071      	beq.n	8001c40 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d068      	beq.n	8001c34 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b62:	4b35      	ldr	r3, [pc, #212]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d105      	bne.n	8001b7a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b6e:	4b32      	ldr	r3, [pc, #200]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0ac      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a2d      	ldr	r2, [pc, #180]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001b84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b8a:	f7ff f917 	bl	8000dbc <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b92:	f7ff f913 	bl	8000dbc <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e099      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb0:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <HAL_RCC_OscConfig+0x788>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bc0:	3a01      	subs	r2, #1
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	4311      	orrs	r1, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bca:	0212      	lsls	r2, r2, #8
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bd2:	0852      	lsrs	r2, r2, #1
 8001bd4:	3a01      	subs	r2, #1
 8001bd6:	0552      	lsls	r2, r2, #21
 8001bd8:	4311      	orrs	r1, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bde:	0852      	lsrs	r2, r2, #1
 8001be0:	3a01      	subs	r2, #1
 8001be2:	0652      	lsls	r2, r2, #25
 8001be4:	4311      	orrs	r1, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bea:	06d2      	lsls	r2, r2, #27
 8001bec:	430a      	orrs	r2, r1
 8001bee:	4912      	ldr	r1, [pc, #72]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bf4:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001bfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c00:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4a0c      	ldr	r2, [pc, #48]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001c06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c0c:	f7ff f8d6 	bl	8000dbc <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff f8d2 	bl	8000dbc <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e058      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c26:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <HAL_RCC_OscConfig+0x784>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c32:	e050      	b.n	8001cd6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e04f      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c40:	4b27      	ldr	r3, [pc, #156]	@ (8001ce0 <HAL_RCC_OscConfig+0x82c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d144      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ce0 <HAL_RCC_OscConfig+0x82c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a23      	ldr	r2, [pc, #140]	@ (8001ce0 <HAL_RCC_OscConfig+0x82c>)
 8001c52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c58:	4b21      	ldr	r3, [pc, #132]	@ (8001ce0 <HAL_RCC_OscConfig+0x82c>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a20      	ldr	r2, [pc, #128]	@ (8001ce0 <HAL_RCC_OscConfig+0x82c>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c64:	f7ff f8aa 	bl	8000dbc <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff f8a6 	bl	8000dbc <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e02c      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <HAL_RCC_OscConfig+0x82c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x7b8>
 8001c8a:	e024      	b.n	8001cd6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d01f      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b13      	ldr	r3, [pc, #76]	@ (8001ce0 <HAL_RCC_OscConfig+0x82c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <HAL_RCC_OscConfig+0x82c>)
 8001c98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7ff f88d 	bl	8000dbc <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7ff f889 	bl	8000dbc <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e00f      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <HAL_RCC_OscConfig+0x82c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_RCC_OscConfig+0x82c>)
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	4905      	ldr	r1, [pc, #20]	@ (8001ce0 <HAL_RCC_OscConfig+0x82c>)
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_RCC_OscConfig+0x830>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60cb      	str	r3, [r1, #12]
 8001cd0:	e001      	b.n	8001cd6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	feeefffc 	.word	0xfeeefffc

08001ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e11d      	b.n	8001f3c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d00:	4b90      	ldr	r3, [pc, #576]	@ (8001f44 <HAL_RCC_ClockConfig+0x25c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d910      	bls.n	8001d30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f44 <HAL_RCC_ClockConfig+0x25c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 020f 	bic.w	r2, r3, #15
 8001d16:	498b      	ldr	r1, [pc, #556]	@ (8001f44 <HAL_RCC_ClockConfig+0x25c>)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b89      	ldr	r3, [pc, #548]	@ (8001f44 <HAL_RCC_ClockConfig+0x25c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e105      	b.n	8001f3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d010      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	4b81      	ldr	r3, [pc, #516]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d908      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	497b      	ldr	r1, [pc, #492]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d079      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d11e      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d72:	4b75      	ldr	r3, [pc, #468]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0dc      	b.n	8001f3c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001d82:	f000 fa09 	bl	8002198 <RCC_GetSysClockFreqFromPLLSource>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a70      	ldr	r2, [pc, #448]	@ (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d946      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d8e:	4b6e      	ldr	r3, [pc, #440]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d140      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d9a:	4b6b      	ldr	r3, [pc, #428]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001da2:	4a69      	ldr	r2, [pc, #420]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001da8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001daa:	2380      	movs	r3, #128	@ 0x80
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e035      	b.n	8001e1c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db8:	4b63      	ldr	r3, [pc, #396]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d115      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0b9      	b.n	8001f3c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d107      	bne.n	8001de0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd0:	4b5d      	ldr	r3, [pc, #372]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0ad      	b.n	8001f3c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de0:	4b59      	ldr	r3, [pc, #356]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0a5      	b.n	8001f3c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001df0:	f000 f8b4 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4a55      	ldr	r2, [pc, #340]	@ (8001f4c <HAL_RCC_ClockConfig+0x264>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d90f      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001dfc:	4b52      	ldr	r3, [pc, #328]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e08:	4b4f      	ldr	r3, [pc, #316]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e10:	4a4d      	ldr	r2, [pc, #308]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e16:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e18:	2380      	movs	r3, #128	@ 0x80
 8001e1a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 0203 	bic.w	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4947      	ldr	r1, [pc, #284]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e2e:	f7fe ffc5 	bl	8000dbc <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e36:	f7fe ffc1 	bl	8000dbc <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e077      	b.n	8001f3c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 020c 	and.w	r2, r3, #12
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d1eb      	bne.n	8001e36 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b80      	cmp	r3, #128	@ 0x80
 8001e62:	d105      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e64:	4b38      	ldr	r3, [pc, #224]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4a37      	ldr	r2, [pc, #220]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001e6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e6e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d010      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	4b31      	ldr	r3, [pc, #196]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d208      	bcs.n	8001e9e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	492b      	ldr	r1, [pc, #172]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9e:	4b29      	ldr	r3, [pc, #164]	@ (8001f44 <HAL_RCC_ClockConfig+0x25c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d210      	bcs.n	8001ece <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <HAL_RCC_ClockConfig+0x25c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 020f 	bic.w	r2, r3, #15
 8001eb4:	4923      	ldr	r1, [pc, #140]	@ (8001f44 <HAL_RCC_ClockConfig+0x25c>)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebc:	4b21      	ldr	r3, [pc, #132]	@ (8001f44 <HAL_RCC_ClockConfig+0x25c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e036      	b.n	8001f3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eda:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4918      	ldr	r1, [pc, #96]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef8:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4910      	ldr	r1, [pc, #64]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f0c:	f000 f826 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_RCC_ClockConfig+0x260>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	490c      	ldr	r1, [pc, #48]	@ (8001f50 <HAL_RCC_ClockConfig+0x268>)
 8001f1e:	5ccb      	ldrb	r3, [r1, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <HAL_RCC_ClockConfig+0x26c>)
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_RCC_ClockConfig+0x270>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fef3 	bl	8000d1c <HAL_InitTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	73fb      	strb	r3, [r7, #15]

  return status;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	04c4b400 	.word	0x04c4b400
 8001f50:	08003afc 	.word	0x08003afc
 8001f54:	20040000 	.word	0x20040000
 8001f58:	20040004 	.word	0x20040004

08001f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b089      	sub	sp, #36	@ 0x24
 8001f60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f74:	4b3b      	ldr	r3, [pc, #236]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x34>
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2b0c      	cmp	r3, #12
 8001f88:	d121      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d11e      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f90:	4b34      	ldr	r3, [pc, #208]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f9c:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e005      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fac:	4b2d      	ldr	r3, [pc, #180]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8002068 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fd4:	4b25      	ldr	r3, [pc, #148]	@ (800206c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	e004      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fe0:	4b23      	ldr	r3, [pc, #140]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fe2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b0c      	cmp	r3, #12
 8001fe8:	d134      	bne.n	8002054 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fea:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d003      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0xa6>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d003      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0xac>
 8002000:	e005      	b.n	800200e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002002:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <HAL_RCC_GetSysClockFreq+0x110>)
 8002004:	617b      	str	r3, [r7, #20]
      break;
 8002006:	e005      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002008:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x114>)
 800200a:	617b      	str	r3, [r7, #20]
      break;
 800200c:	e002      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	617b      	str	r3, [r7, #20]
      break;
 8002012:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002014:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3301      	adds	r3, #1
 8002020:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	fb03 f202 	mul.w	r2, r3, r2
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	fbb2 f3f3 	udiv	r3, r2, r3
 8002038:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800203a:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <HAL_RCC_GetSysClockFreq+0x108>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	0e5b      	lsrs	r3, r3, #25
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	3301      	adds	r3, #1
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002054:	69bb      	ldr	r3, [r7, #24]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	@ 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	08003b14 	.word	0x08003b14
 800206c:	00f42400 	.word	0x00f42400
 8002070:	007a1200 	.word	0x007a1200

08002074 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002078:	4b03      	ldr	r3, [pc, #12]	@ (8002088 <HAL_RCC_GetHCLKFreq+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20040000 	.word	0x20040000

0800208c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002090:	f7ff fff0 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4904      	ldr	r1, [pc, #16]	@ (80020b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08003b0c 	.word	0x08003b0c

080020b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020bc:	f7ff ffda 	bl	8002074 <HAL_RCC_GetHCLKFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0adb      	lsrs	r3, r3, #11
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4904      	ldr	r1, [pc, #16]	@ (80020e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08003b0c 	.word	0x08003b0c

080020e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020f0:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020fc:	f7ff f906 	bl	800130c <HAL_PWREx_GetVoltageRange>
 8002100:	6178      	str	r0, [r7, #20]
 8002102:	e014      	b.n	800212e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	4b22      	ldr	r3, [pc, #136]	@ (8002190 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	4a21      	ldr	r2, [pc, #132]	@ (8002190 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800210a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002110:	4b1f      	ldr	r3, [pc, #124]	@ (8002190 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800211c:	f7ff f8f6 	bl	800130c <HAL_PWREx_GetVoltageRange>
 8002120:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002122:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	4a1a      	ldr	r2, [pc, #104]	@ (8002190 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800212c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002134:	d10b      	bne.n	800214e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b80      	cmp	r3, #128	@ 0x80
 800213a:	d913      	bls.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002140:	d902      	bls.n	8002148 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002142:	2302      	movs	r3, #2
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	e00d      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002148:	2301      	movs	r3, #1
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	e00a      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b7f      	cmp	r3, #127	@ 0x7f
 8002152:	d902      	bls.n	800215a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002154:	2302      	movs	r3, #2
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e004      	b.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b70      	cmp	r3, #112	@ 0x70
 800215e:	d101      	bne.n	8002164 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002160:	2301      	movs	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 020f 	bic.w	r2, r3, #15
 800216c:	4909      	ldr	r1, [pc, #36]	@ (8002194 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002174:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	429a      	cmp	r2, r3
 8002180:	d001      	beq.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	40022000 	.word	0x40022000

08002198 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800219e:	4b2d      	ldr	r3, [pc, #180]	@ (8002254 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d00b      	beq.n	80021c6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d825      	bhi.n	8002200 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d008      	beq.n	80021cc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d11f      	bne.n	8002200 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80021c0:	4b25      	ldr	r3, [pc, #148]	@ (8002258 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021c2:	613b      	str	r3, [r7, #16]
    break;
 80021c4:	e01f      	b.n	8002206 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80021c6:	4b25      	ldr	r3, [pc, #148]	@ (800225c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80021c8:	613b      	str	r3, [r7, #16]
    break;
 80021ca:	e01c      	b.n	8002206 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021cc:	4b21      	ldr	r3, [pc, #132]	@ (8002254 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002254 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	e005      	b.n	80021f4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002254 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80021f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002260 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	613b      	str	r3, [r7, #16]
    break;
 80021fe:	e002      	b.n	8002206 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]
    break;
 8002204:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002206:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	3301      	adds	r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002214:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	fb03 f202 	mul.w	r2, r3, r2
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800222c:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0e5b      	lsrs	r3, r3, #25
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	3301      	adds	r3, #1
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002246:	683b      	ldr	r3, [r7, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	40021000 	.word	0x40021000
 8002258:	00f42400 	.word	0x00f42400
 800225c:	007a1200 	.word	0x007a1200
 8002260:	08003b14 	.word	0x08003b14

08002264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800226c:	2300      	movs	r3, #0
 800226e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002270:	2300      	movs	r3, #0
 8002272:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800227c:	2b00      	cmp	r3, #0
 800227e:	d040      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002284:	2b80      	cmp	r3, #128	@ 0x80
 8002286:	d02a      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002288:	2b80      	cmp	r3, #128	@ 0x80
 800228a:	d825      	bhi.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800228c:	2b60      	cmp	r3, #96	@ 0x60
 800228e:	d026      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002290:	2b60      	cmp	r3, #96	@ 0x60
 8002292:	d821      	bhi.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002294:	2b40      	cmp	r3, #64	@ 0x40
 8002296:	d006      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002298:	2b40      	cmp	r3, #64	@ 0x40
 800229a:	d81d      	bhi.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d010      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80022a4:	e018      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022a6:	4b89      	ldr	r3, [pc, #548]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	4a88      	ldr	r2, [pc, #544]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b2:	e015      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3304      	adds	r3, #4
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fb02 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c4:	e00c      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3320      	adds	r3, #32
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fbed 	bl	8002aac <RCCEx_PLLSAI2_Config>
 80022d2:	4603      	mov	r3, r0
 80022d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022d6:	e003      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	74fb      	strb	r3, [r7, #19]
      break;
 80022dc:	e000      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80022de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10b      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022e6:	4b79      	ldr	r3, [pc, #484]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022ec:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022f4:	4975      	ldr	r1, [pc, #468]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80022fc:	e001      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d047      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002316:	d030      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800231c:	d82a      	bhi.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800231e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002322:	d02a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002328:	d824      	bhi.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800232a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800232e:	d008      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002334:	d81e      	bhi.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800233a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800233e:	d010      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002340:	e018      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002342:	4b62      	ldr	r3, [pc, #392]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	4a61      	ldr	r2, [pc, #388]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800234c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800234e:	e015      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3304      	adds	r3, #4
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fab4 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002360:	e00c      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3320      	adds	r3, #32
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fb9f 	bl	8002aac <RCCEx_PLLSAI2_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002372:	e003      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	74fb      	strb	r3, [r7, #19]
      break;
 8002378:	e000      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800237a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10b      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002382:	4b52      	ldr	r3, [pc, #328]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002384:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002388:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002390:	494e      	ldr	r1, [pc, #312]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002398:	e001      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 809f 	beq.w	80024ea <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023b0:	4b46      	ldr	r3, [pc, #280]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80023c0:	2300      	movs	r3, #0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00d      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	4b41      	ldr	r3, [pc, #260]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ca:	4a40      	ldr	r2, [pc, #256]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80023d2:	4b3e      	ldr	r3, [pc, #248]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023de:	2301      	movs	r3, #1
 80023e0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023e2:	4b3b      	ldr	r3, [pc, #236]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a3a      	ldr	r2, [pc, #232]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023ee:	f7fe fce5 	bl	8000dbc <HAL_GetTick>
 80023f2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023f4:	e009      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f6:	f7fe fce1 	bl	8000dbc <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d902      	bls.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	74fb      	strb	r3, [r7, #19]
        break;
 8002408:	e005      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800240a:	4b31      	ldr	r3, [pc, #196]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0ef      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002416:	7cfb      	ldrb	r3, [r7, #19]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d15b      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800241c:	4b2b      	ldr	r3, [pc, #172]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002426:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01f      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	429a      	cmp	r2, r3
 8002438:	d019      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800243a:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002444:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002446:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244c:	4a1f      	ldr	r2, [pc, #124]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800244e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002452:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002456:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245c:	4a1b      	ldr	r2, [pc, #108]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800245e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002462:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002466:	4a19      	ldr	r2, [pc, #100]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d016      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe fca0 	bl	8000dbc <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247e:	e00b      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7fe fc9c 	bl	8000dbc <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d902      	bls.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	74fb      	strb	r3, [r7, #19]
            break;
 8002496:	e006      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0ec      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10c      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ac:	4b07      	ldr	r3, [pc, #28]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024bc:	4903      	ldr	r1, [pc, #12]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024c4:	e008      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	74bb      	strb	r3, [r7, #18]
 80024ca:	e005      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d8:	7c7b      	ldrb	r3, [r7, #17]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d105      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024de:	4ba0      	ldr	r3, [pc, #640]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e2:	4a9f      	ldr	r2, [pc, #636]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024f6:	4b9a      	ldr	r3, [pc, #616]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fc:	f023 0203 	bic.w	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002504:	4996      	ldr	r1, [pc, #600]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002518:	4b91      	ldr	r3, [pc, #580]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251e:	f023 020c 	bic.w	r2, r3, #12
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	498e      	ldr	r1, [pc, #568]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800253a:	4b89      	ldr	r3, [pc, #548]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002540:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002548:	4985      	ldr	r1, [pc, #532]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800255c:	4b80      	ldr	r3, [pc, #512]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002562:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800256a:	497d      	ldr	r1, [pc, #500]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800257e:	4b78      	ldr	r3, [pc, #480]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258c:	4974      	ldr	r1, [pc, #464]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ae:	496c      	ldr	r1, [pc, #432]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025c2:	4b67      	ldr	r3, [pc, #412]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025d0:	4963      	ldr	r1, [pc, #396]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025f2:	495b      	ldr	r1, [pc, #364]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002606:	4b56      	ldr	r3, [pc, #344]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002614:	4952      	ldr	r1, [pc, #328]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002628:	4b4d      	ldr	r3, [pc, #308]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002636:	494a      	ldr	r1, [pc, #296]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800264a:	4b45      	ldr	r3, [pc, #276]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002650:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002658:	4941      	ldr	r1, [pc, #260]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800266c:	4b3c      	ldr	r3, [pc, #240]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800266e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002672:	f023 0203 	bic.w	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800267a:	4939      	ldr	r1, [pc, #228]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d028      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800268e:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002694:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800269c:	4930      	ldr	r1, [pc, #192]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026ac:	d106      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026b8:	60d3      	str	r3, [r2, #12]
 80026ba:	e011      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3304      	adds	r3, #4
 80026ca:	2101      	movs	r1, #1
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 f8f9 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 80026d2:	4603      	mov	r3, r0
 80026d4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026d6:	7cfb      	ldrb	r3, [r7, #19]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d04d      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026f4:	d108      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80026f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026fc:	4a18      	ldr	r2, [pc, #96]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002702:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002706:	e012      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002708:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800270a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800270e:	4a14      	ldr	r2, [pc, #80]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002710:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002714:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002726:	490e      	ldr	r1, [pc, #56]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002736:	d106      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002738:	4b09      	ldr	r3, [pc, #36]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a08      	ldr	r2, [pc, #32]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800273e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002742:	60d3      	str	r3, [r2, #12]
 8002744:	e020      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800274a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800274e:	d109      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002750:	4b03      	ldr	r3, [pc, #12]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a02      	ldr	r2, [pc, #8]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800275a:	60d3      	str	r3, [r2, #12]
 800275c:	e014      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002768:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800276c:	d10c      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3304      	adds	r3, #4
 8002772:	2101      	movs	r1, #1
 8002774:	4618      	mov	r0, r3
 8002776:	f000 f8a5 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 800277a:	4603      	mov	r3, r0
 800277c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d028      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002794:	4b4a      	ldr	r3, [pc, #296]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027a2:	4947      	ldr	r1, [pc, #284]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027b2:	d106      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b4:	4b42      	ldr	r3, [pc, #264]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a41      	ldr	r2, [pc, #260]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027be:	60d3      	str	r3, [r2, #12]
 80027c0:	e011      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ca:	d10c      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3304      	adds	r3, #4
 80027d0:	2101      	movs	r1, #1
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f876 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01e      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027f2:	4b33      	ldr	r3, [pc, #204]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002802:	492f      	ldr	r1, [pc, #188]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002810:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002814:	d10c      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	2102      	movs	r1, #2
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f851 	bl	80028c4 <RCCEx_PLLSAI1_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002826:	7cfb      	ldrb	r3, [r7, #19]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00b      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800283c:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800283e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002842:	f023 0204 	bic.w	r2, r3, #4
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800284c:	491c      	ldr	r1, [pc, #112]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002860:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002862:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002866:	f023 0218 	bic.w	r2, r3, #24
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002870:	4913      	ldr	r1, [pc, #76]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d017      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002884:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800288a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002894:	490a      	ldr	r1, [pc, #40]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028a6:	d105      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a04      	ldr	r2, [pc, #16]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000

080028c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028d2:	4b72      	ldr	r3, [pc, #456]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00e      	beq.n	80028fc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028de:	4b6f      	ldr	r3, [pc, #444]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0203 	and.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d103      	bne.n	80028f6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
       ||
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d142      	bne.n	800297c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
 80028fa:	e03f      	b.n	800297c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d018      	beq.n	8002936 <RCCEx_PLLSAI1_Config+0x72>
 8002904:	2b03      	cmp	r3, #3
 8002906:	d825      	bhi.n	8002954 <RCCEx_PLLSAI1_Config+0x90>
 8002908:	2b01      	cmp	r3, #1
 800290a:	d002      	beq.n	8002912 <RCCEx_PLLSAI1_Config+0x4e>
 800290c:	2b02      	cmp	r3, #2
 800290e:	d009      	beq.n	8002924 <RCCEx_PLLSAI1_Config+0x60>
 8002910:	e020      	b.n	8002954 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002912:	4b62      	ldr	r3, [pc, #392]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d11d      	bne.n	800295a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002922:	e01a      	b.n	800295a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002924:	4b5d      	ldr	r3, [pc, #372]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800292c:	2b00      	cmp	r3, #0
 800292e:	d116      	bne.n	800295e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002934:	e013      	b.n	800295e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002936:	4b59      	ldr	r3, [pc, #356]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002942:	4b56      	ldr	r3, [pc, #344]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002952:	e006      	b.n	8002962 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      break;
 8002958:	e004      	b.n	8002964 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800295a:	bf00      	nop
 800295c:	e002      	b.n	8002964 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800295e:	bf00      	nop
 8002960:	e000      	b.n	8002964 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002962:	bf00      	nop
    }

    if(status == HAL_OK)
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d108      	bne.n	800297c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800296a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4949      	ldr	r1, [pc, #292]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002978:	4313      	orrs	r3, r2
 800297a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 8086 	bne.w	8002a90 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002984:	4b45      	ldr	r3, [pc, #276]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a44      	ldr	r2, [pc, #272]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 800298a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800298e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002990:	f7fe fa14 	bl	8000dbc <HAL_GetTick>
 8002994:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002996:	e009      	b.n	80029ac <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002998:	f7fe fa10 	bl	8000dbc <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d902      	bls.n	80029ac <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	73fb      	strb	r3, [r7, #15]
        break;
 80029aa:	e005      	b.n	80029b8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029ac:	4b3b      	ldr	r3, [pc, #236]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ef      	bne.n	8002998 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d168      	bne.n	8002a90 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d113      	bne.n	80029ec <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c4:	4b35      	ldr	r3, [pc, #212]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	4b35      	ldr	r3, [pc, #212]	@ (8002aa0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6892      	ldr	r2, [r2, #8]
 80029d0:	0211      	lsls	r1, r2, #8
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68d2      	ldr	r2, [r2, #12]
 80029d6:	06d2      	lsls	r2, r2, #27
 80029d8:	4311      	orrs	r1, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6852      	ldr	r2, [r2, #4]
 80029de:	3a01      	subs	r2, #1
 80029e0:	0112      	lsls	r2, r2, #4
 80029e2:	430a      	orrs	r2, r1
 80029e4:	492d      	ldr	r1, [pc, #180]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	610b      	str	r3, [r1, #16]
 80029ea:	e02d      	b.n	8002a48 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d115      	bne.n	8002a1e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029f2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6892      	ldr	r2, [r2, #8]
 80029fe:	0211      	lsls	r1, r2, #8
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6912      	ldr	r2, [r2, #16]
 8002a04:	0852      	lsrs	r2, r2, #1
 8002a06:	3a01      	subs	r2, #1
 8002a08:	0552      	lsls	r2, r2, #21
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6852      	ldr	r2, [r2, #4]
 8002a10:	3a01      	subs	r2, #1
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	430a      	orrs	r2, r1
 8002a16:	4921      	ldr	r1, [pc, #132]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	610b      	str	r3, [r1, #16]
 8002a1c:	e014      	b.n	8002a48 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	4b21      	ldr	r3, [pc, #132]	@ (8002aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6892      	ldr	r2, [r2, #8]
 8002a2a:	0211      	lsls	r1, r2, #8
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6952      	ldr	r2, [r2, #20]
 8002a30:	0852      	lsrs	r2, r2, #1
 8002a32:	3a01      	subs	r2, #1
 8002a34:	0652      	lsls	r2, r2, #25
 8002a36:	4311      	orrs	r1, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6852      	ldr	r2, [r2, #4]
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	430a      	orrs	r2, r1
 8002a42:	4916      	ldr	r1, [pc, #88]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a48:	4b14      	ldr	r3, [pc, #80]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a13      	ldr	r2, [pc, #76]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7fe f9b2 	bl	8000dbc <HAL_GetTick>
 8002a58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a5a:	e009      	b.n	8002a70 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a5c:	f7fe f9ae 	bl	8000dbc <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d902      	bls.n	8002a70 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a6e:	e005      	b.n	8002a7c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a70:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ef      	beq.n	8002a5c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	4904      	ldr	r1, [pc, #16]	@ (8002a9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	07ff800f 	.word	0x07ff800f
 8002aa4:	ff9f800f 	.word	0xff9f800f
 8002aa8:	f9ff800f 	.word	0xf9ff800f

08002aac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aba:	4b72      	ldr	r3, [pc, #456]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00e      	beq.n	8002ae4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0203 	and.w	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d103      	bne.n	8002ade <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
       ||
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d142      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	e03f      	b.n	8002b64 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d018      	beq.n	8002b1e <RCCEx_PLLSAI2_Config+0x72>
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d825      	bhi.n	8002b3c <RCCEx_PLLSAI2_Config+0x90>
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d002      	beq.n	8002afa <RCCEx_PLLSAI2_Config+0x4e>
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d009      	beq.n	8002b0c <RCCEx_PLLSAI2_Config+0x60>
 8002af8:	e020      	b.n	8002b3c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002afa:	4b62      	ldr	r3, [pc, #392]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d11d      	bne.n	8002b42 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0a:	e01a      	b.n	8002b42 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b0c:	4b5d      	ldr	r3, [pc, #372]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d116      	bne.n	8002b46 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1c:	e013      	b.n	8002b46 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b1e:	4b59      	ldr	r3, [pc, #356]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10f      	bne.n	8002b4a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b2a:	4b56      	ldr	r3, [pc, #344]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b3a:	e006      	b.n	8002b4a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b40:	e004      	b.n	8002b4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b42:	bf00      	nop
 8002b44:	e002      	b.n	8002b4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b46:	bf00      	nop
 8002b48:	e000      	b.n	8002b4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d108      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002b52:	4b4c      	ldr	r3, [pc, #304]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f023 0203 	bic.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4949      	ldr	r1, [pc, #292]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 8086 	bne.w	8002c78 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b6c:	4b45      	ldr	r3, [pc, #276]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a44      	ldr	r2, [pc, #272]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b78:	f7fe f920 	bl	8000dbc <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b7e:	e009      	b.n	8002b94 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b80:	f7fe f91c 	bl	8000dbc <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d902      	bls.n	8002b94 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	73fb      	strb	r3, [r7, #15]
        break;
 8002b92:	e005      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b94:	4b3b      	ldr	r3, [pc, #236]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ef      	bne.n	8002b80 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d168      	bne.n	8002c78 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d113      	bne.n	8002bd4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bac:	4b35      	ldr	r3, [pc, #212]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	4b35      	ldr	r3, [pc, #212]	@ (8002c88 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6892      	ldr	r2, [r2, #8]
 8002bb8:	0211      	lsls	r1, r2, #8
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68d2      	ldr	r2, [r2, #12]
 8002bbe:	06d2      	lsls	r2, r2, #27
 8002bc0:	4311      	orrs	r1, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6852      	ldr	r2, [r2, #4]
 8002bc6:	3a01      	subs	r2, #1
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	492d      	ldr	r1, [pc, #180]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	614b      	str	r3, [r1, #20]
 8002bd2:	e02d      	b.n	8002c30 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d115      	bne.n	8002c06 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bda:	4b2a      	ldr	r3, [pc, #168]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	4b2b      	ldr	r3, [pc, #172]	@ (8002c8c <RCCEx_PLLSAI2_Config+0x1e0>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6892      	ldr	r2, [r2, #8]
 8002be6:	0211      	lsls	r1, r2, #8
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6912      	ldr	r2, [r2, #16]
 8002bec:	0852      	lsrs	r2, r2, #1
 8002bee:	3a01      	subs	r2, #1
 8002bf0:	0552      	lsls	r2, r2, #21
 8002bf2:	4311      	orrs	r1, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6852      	ldr	r2, [r2, #4]
 8002bf8:	3a01      	subs	r2, #1
 8002bfa:	0112      	lsls	r2, r2, #4
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	4921      	ldr	r1, [pc, #132]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	614b      	str	r3, [r1, #20]
 8002c04:	e014      	b.n	8002c30 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c06:	4b1f      	ldr	r3, [pc, #124]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	4b21      	ldr	r3, [pc, #132]	@ (8002c90 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6892      	ldr	r2, [r2, #8]
 8002c12:	0211      	lsls	r1, r2, #8
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6952      	ldr	r2, [r2, #20]
 8002c18:	0852      	lsrs	r2, r2, #1
 8002c1a:	3a01      	subs	r2, #1
 8002c1c:	0652      	lsls	r2, r2, #25
 8002c1e:	4311      	orrs	r1, r2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6852      	ldr	r2, [r2, #4]
 8002c24:	3a01      	subs	r2, #1
 8002c26:	0112      	lsls	r2, r2, #4
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	4916      	ldr	r1, [pc, #88]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c30:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a13      	ldr	r2, [pc, #76]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fe f8be 	bl	8000dbc <HAL_GetTick>
 8002c40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c42:	e009      	b.n	8002c58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c44:	f7fe f8ba 	bl	8000dbc <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d902      	bls.n	8002c58 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	73fb      	strb	r3, [r7, #15]
          break;
 8002c56:	e005      	b.n	8002c64 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c58:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ef      	beq.n	8002c44 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	4904      	ldr	r1, [pc, #16]	@ (8002c84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	07ff800f 	.word	0x07ff800f
 8002c8c:	ff9f800f 	.word	0xff9f800f
 8002c90:	f9ff800f 	.word	0xf9ff800f

08002c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e042      	b.n	8002d2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d106      	bne.n	8002cbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7fd ff4b 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2224      	movs	r2, #36	@ 0x24
 8002cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0201 	bic.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fbb2 	bl	8003448 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8b3 	bl	8002e50 <UART_SetConfig>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e01b      	b.n	8002d2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fc31 	bl	800358c <UART_CheckIdleState>
 8002d2a:	4603      	mov	r3, r0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	@ 0x28
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d17b      	bne.n	8002e46 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_UART_Transmit+0x26>
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e074      	b.n	8002e48 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2221      	movs	r2, #33	@ 0x21
 8002d6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d6e:	f7fe f825 	bl	8000dbc <HAL_GetTick>
 8002d72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	88fa      	ldrh	r2, [r7, #6]
 8002d78:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	88fa      	ldrh	r2, [r7, #6]
 8002d80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d8c:	d108      	bne.n	8002da0 <HAL_UART_Transmit+0x6c>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	e003      	b.n	8002da8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002da8:	e030      	b.n	8002e0c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	2180      	movs	r1, #128	@ 0x80
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fc93 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e03d      	b.n	8002e48 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10b      	bne.n	8002dea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	881a      	ldrh	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dde:	b292      	uxth	r2, r2
 8002de0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	3302      	adds	r3, #2
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	e007      	b.n	8002dfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	3301      	adds	r3, #1
 8002df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1c8      	bne.n	8002daa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2140      	movs	r1, #64	@ 0x40
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fc5c 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e006      	b.n	8002e48 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
  }
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e54:	b08c      	sub	sp, #48	@ 0x30
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4baa      	ldr	r3, [pc, #680]	@ (8003128 <UART_SetConfig+0x2d8>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a9f      	ldr	r2, [pc, #636]	@ (800312c <UART_SetConfig+0x2dc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002ec6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eda:	f023 010f 	bic.w	r1, r3, #15
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a90      	ldr	r2, [pc, #576]	@ (8003130 <UART_SetConfig+0x2e0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d125      	bne.n	8002f40 <UART_SetConfig+0xf0>
 8002ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8003134 <UART_SetConfig+0x2e4>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d81a      	bhi.n	8002f38 <UART_SetConfig+0xe8>
 8002f02:	a201      	add	r2, pc, #4	@ (adr r2, 8002f08 <UART_SetConfig+0xb8>)
 8002f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f08:	08002f19 	.word	0x08002f19
 8002f0c:	08002f29 	.word	0x08002f29
 8002f10:	08002f21 	.word	0x08002f21
 8002f14:	08002f31 	.word	0x08002f31
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f1e:	e116      	b.n	800314e <UART_SetConfig+0x2fe>
 8002f20:	2302      	movs	r3, #2
 8002f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f26:	e112      	b.n	800314e <UART_SetConfig+0x2fe>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f2e:	e10e      	b.n	800314e <UART_SetConfig+0x2fe>
 8002f30:	2308      	movs	r3, #8
 8002f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f36:	e10a      	b.n	800314e <UART_SetConfig+0x2fe>
 8002f38:	2310      	movs	r3, #16
 8002f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f3e:	e106      	b.n	800314e <UART_SetConfig+0x2fe>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a7c      	ldr	r2, [pc, #496]	@ (8003138 <UART_SetConfig+0x2e8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d138      	bne.n	8002fbc <UART_SetConfig+0x16c>
 8002f4a:	4b7a      	ldr	r3, [pc, #488]	@ (8003134 <UART_SetConfig+0x2e4>)
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	d82d      	bhi.n	8002fb4 <UART_SetConfig+0x164>
 8002f58:	a201      	add	r2, pc, #4	@ (adr r2, 8002f60 <UART_SetConfig+0x110>)
 8002f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5e:	bf00      	nop
 8002f60:	08002f95 	.word	0x08002f95
 8002f64:	08002fb5 	.word	0x08002fb5
 8002f68:	08002fb5 	.word	0x08002fb5
 8002f6c:	08002fb5 	.word	0x08002fb5
 8002f70:	08002fa5 	.word	0x08002fa5
 8002f74:	08002fb5 	.word	0x08002fb5
 8002f78:	08002fb5 	.word	0x08002fb5
 8002f7c:	08002fb5 	.word	0x08002fb5
 8002f80:	08002f9d 	.word	0x08002f9d
 8002f84:	08002fb5 	.word	0x08002fb5
 8002f88:	08002fb5 	.word	0x08002fb5
 8002f8c:	08002fb5 	.word	0x08002fb5
 8002f90:	08002fad 	.word	0x08002fad
 8002f94:	2300      	movs	r3, #0
 8002f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f9a:	e0d8      	b.n	800314e <UART_SetConfig+0x2fe>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fa2:	e0d4      	b.n	800314e <UART_SetConfig+0x2fe>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002faa:	e0d0      	b.n	800314e <UART_SetConfig+0x2fe>
 8002fac:	2308      	movs	r3, #8
 8002fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fb2:	e0cc      	b.n	800314e <UART_SetConfig+0x2fe>
 8002fb4:	2310      	movs	r3, #16
 8002fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fba:	e0c8      	b.n	800314e <UART_SetConfig+0x2fe>
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a5e      	ldr	r2, [pc, #376]	@ (800313c <UART_SetConfig+0x2ec>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d125      	bne.n	8003012 <UART_SetConfig+0x1c2>
 8002fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003134 <UART_SetConfig+0x2e4>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fcc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002fd0:	2b30      	cmp	r3, #48	@ 0x30
 8002fd2:	d016      	beq.n	8003002 <UART_SetConfig+0x1b2>
 8002fd4:	2b30      	cmp	r3, #48	@ 0x30
 8002fd6:	d818      	bhi.n	800300a <UART_SetConfig+0x1ba>
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d00a      	beq.n	8002ff2 <UART_SetConfig+0x1a2>
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d814      	bhi.n	800300a <UART_SetConfig+0x1ba>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <UART_SetConfig+0x19a>
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d008      	beq.n	8002ffa <UART_SetConfig+0x1aa>
 8002fe8:	e00f      	b.n	800300a <UART_SetConfig+0x1ba>
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ff0:	e0ad      	b.n	800314e <UART_SetConfig+0x2fe>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ff8:	e0a9      	b.n	800314e <UART_SetConfig+0x2fe>
 8002ffa:	2304      	movs	r3, #4
 8002ffc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003000:	e0a5      	b.n	800314e <UART_SetConfig+0x2fe>
 8003002:	2308      	movs	r3, #8
 8003004:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003008:	e0a1      	b.n	800314e <UART_SetConfig+0x2fe>
 800300a:	2310      	movs	r3, #16
 800300c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003010:	e09d      	b.n	800314e <UART_SetConfig+0x2fe>
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a4a      	ldr	r2, [pc, #296]	@ (8003140 <UART_SetConfig+0x2f0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d125      	bne.n	8003068 <UART_SetConfig+0x218>
 800301c:	4b45      	ldr	r3, [pc, #276]	@ (8003134 <UART_SetConfig+0x2e4>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003022:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003026:	2bc0      	cmp	r3, #192	@ 0xc0
 8003028:	d016      	beq.n	8003058 <UART_SetConfig+0x208>
 800302a:	2bc0      	cmp	r3, #192	@ 0xc0
 800302c:	d818      	bhi.n	8003060 <UART_SetConfig+0x210>
 800302e:	2b80      	cmp	r3, #128	@ 0x80
 8003030:	d00a      	beq.n	8003048 <UART_SetConfig+0x1f8>
 8003032:	2b80      	cmp	r3, #128	@ 0x80
 8003034:	d814      	bhi.n	8003060 <UART_SetConfig+0x210>
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <UART_SetConfig+0x1f0>
 800303a:	2b40      	cmp	r3, #64	@ 0x40
 800303c:	d008      	beq.n	8003050 <UART_SetConfig+0x200>
 800303e:	e00f      	b.n	8003060 <UART_SetConfig+0x210>
 8003040:	2300      	movs	r3, #0
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003046:	e082      	b.n	800314e <UART_SetConfig+0x2fe>
 8003048:	2302      	movs	r3, #2
 800304a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800304e:	e07e      	b.n	800314e <UART_SetConfig+0x2fe>
 8003050:	2304      	movs	r3, #4
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003056:	e07a      	b.n	800314e <UART_SetConfig+0x2fe>
 8003058:	2308      	movs	r3, #8
 800305a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800305e:	e076      	b.n	800314e <UART_SetConfig+0x2fe>
 8003060:	2310      	movs	r3, #16
 8003062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003066:	e072      	b.n	800314e <UART_SetConfig+0x2fe>
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a35      	ldr	r2, [pc, #212]	@ (8003144 <UART_SetConfig+0x2f4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d12a      	bne.n	80030c8 <UART_SetConfig+0x278>
 8003072:	4b30      	ldr	r3, [pc, #192]	@ (8003134 <UART_SetConfig+0x2e4>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003078:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800307c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003080:	d01a      	beq.n	80030b8 <UART_SetConfig+0x268>
 8003082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003086:	d81b      	bhi.n	80030c0 <UART_SetConfig+0x270>
 8003088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800308c:	d00c      	beq.n	80030a8 <UART_SetConfig+0x258>
 800308e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003092:	d815      	bhi.n	80030c0 <UART_SetConfig+0x270>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <UART_SetConfig+0x250>
 8003098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800309c:	d008      	beq.n	80030b0 <UART_SetConfig+0x260>
 800309e:	e00f      	b.n	80030c0 <UART_SetConfig+0x270>
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030a6:	e052      	b.n	800314e <UART_SetConfig+0x2fe>
 80030a8:	2302      	movs	r3, #2
 80030aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ae:	e04e      	b.n	800314e <UART_SetConfig+0x2fe>
 80030b0:	2304      	movs	r3, #4
 80030b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030b6:	e04a      	b.n	800314e <UART_SetConfig+0x2fe>
 80030b8:	2308      	movs	r3, #8
 80030ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030be:	e046      	b.n	800314e <UART_SetConfig+0x2fe>
 80030c0:	2310      	movs	r3, #16
 80030c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030c6:	e042      	b.n	800314e <UART_SetConfig+0x2fe>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a17      	ldr	r2, [pc, #92]	@ (800312c <UART_SetConfig+0x2dc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d13a      	bne.n	8003148 <UART_SetConfig+0x2f8>
 80030d2:	4b18      	ldr	r3, [pc, #96]	@ (8003134 <UART_SetConfig+0x2e4>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80030dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030e0:	d01a      	beq.n	8003118 <UART_SetConfig+0x2c8>
 80030e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030e6:	d81b      	bhi.n	8003120 <UART_SetConfig+0x2d0>
 80030e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ec:	d00c      	beq.n	8003108 <UART_SetConfig+0x2b8>
 80030ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030f2:	d815      	bhi.n	8003120 <UART_SetConfig+0x2d0>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <UART_SetConfig+0x2b0>
 80030f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fc:	d008      	beq.n	8003110 <UART_SetConfig+0x2c0>
 80030fe:	e00f      	b.n	8003120 <UART_SetConfig+0x2d0>
 8003100:	2300      	movs	r3, #0
 8003102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003106:	e022      	b.n	800314e <UART_SetConfig+0x2fe>
 8003108:	2302      	movs	r3, #2
 800310a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800310e:	e01e      	b.n	800314e <UART_SetConfig+0x2fe>
 8003110:	2304      	movs	r3, #4
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003116:	e01a      	b.n	800314e <UART_SetConfig+0x2fe>
 8003118:	2308      	movs	r3, #8
 800311a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800311e:	e016      	b.n	800314e <UART_SetConfig+0x2fe>
 8003120:	2310      	movs	r3, #16
 8003122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003126:	e012      	b.n	800314e <UART_SetConfig+0x2fe>
 8003128:	cfff69f3 	.word	0xcfff69f3
 800312c:	40008000 	.word	0x40008000
 8003130:	40013800 	.word	0x40013800
 8003134:	40021000 	.word	0x40021000
 8003138:	40004400 	.word	0x40004400
 800313c:	40004800 	.word	0x40004800
 8003140:	40004c00 	.word	0x40004c00
 8003144:	40005000 	.word	0x40005000
 8003148:	2310      	movs	r3, #16
 800314a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4aae      	ldr	r2, [pc, #696]	@ (800340c <UART_SetConfig+0x5bc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	f040 8097 	bne.w	8003288 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800315a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800315e:	2b08      	cmp	r3, #8
 8003160:	d823      	bhi.n	80031aa <UART_SetConfig+0x35a>
 8003162:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <UART_SetConfig+0x318>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	0800318d 	.word	0x0800318d
 800316c:	080031ab 	.word	0x080031ab
 8003170:	08003195 	.word	0x08003195
 8003174:	080031ab 	.word	0x080031ab
 8003178:	0800319b 	.word	0x0800319b
 800317c:	080031ab 	.word	0x080031ab
 8003180:	080031ab 	.word	0x080031ab
 8003184:	080031ab 	.word	0x080031ab
 8003188:	080031a3 	.word	0x080031a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800318c:	f7fe ff7e 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8003190:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003192:	e010      	b.n	80031b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003194:	4b9e      	ldr	r3, [pc, #632]	@ (8003410 <UART_SetConfig+0x5c0>)
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003198:	e00d      	b.n	80031b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319a:	f7fe fedf 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 800319e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031a0:	e009      	b.n	80031b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031a8:	e005      	b.n	80031b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 8130 	beq.w	800341e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	4a94      	ldr	r2, [pc, #592]	@ (8003414 <UART_SetConfig+0x5c4>)
 80031c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031c8:	461a      	mov	r2, r3
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d305      	bcc.n	80031ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d903      	bls.n	80031f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031f4:	e113      	b.n	800341e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	2200      	movs	r2, #0
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	60fa      	str	r2, [r7, #12]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	4a84      	ldr	r2, [pc, #528]	@ (8003414 <UART_SetConfig+0x5c4>)
 8003204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003208:	b29b      	uxth	r3, r3
 800320a:	2200      	movs	r2, #0
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003214:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003218:	f7fc fff0 	bl	80001fc <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4610      	mov	r0, r2
 8003222:	4619      	mov	r1, r3
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	020b      	lsls	r3, r1, #8
 800322e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003232:	0202      	lsls	r2, r0, #8
 8003234:	6979      	ldr	r1, [r7, #20]
 8003236:	6849      	ldr	r1, [r1, #4]
 8003238:	0849      	lsrs	r1, r1, #1
 800323a:	2000      	movs	r0, #0
 800323c:	460c      	mov	r4, r1
 800323e:	4605      	mov	r5, r0
 8003240:	eb12 0804 	adds.w	r8, r2, r4
 8003244:	eb43 0905 	adc.w	r9, r3, r5
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	469a      	mov	sl, r3
 8003250:	4693      	mov	fp, r2
 8003252:	4652      	mov	r2, sl
 8003254:	465b      	mov	r3, fp
 8003256:	4640      	mov	r0, r8
 8003258:	4649      	mov	r1, r9
 800325a:	f7fc ffcf 	bl	80001fc <__aeabi_uldivmod>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4613      	mov	r3, r2
 8003264:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800326c:	d308      	bcc.n	8003280 <UART_SetConfig+0x430>
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003274:	d204      	bcs.n	8003280 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a3a      	ldr	r2, [r7, #32]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	e0ce      	b.n	800341e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003286:	e0ca      	b.n	800341e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003290:	d166      	bne.n	8003360 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003292:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003296:	2b08      	cmp	r3, #8
 8003298:	d827      	bhi.n	80032ea <UART_SetConfig+0x49a>
 800329a:	a201      	add	r2, pc, #4	@ (adr r2, 80032a0 <UART_SetConfig+0x450>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	080032c5 	.word	0x080032c5
 80032a4:	080032cd 	.word	0x080032cd
 80032a8:	080032d5 	.word	0x080032d5
 80032ac:	080032eb 	.word	0x080032eb
 80032b0:	080032db 	.word	0x080032db
 80032b4:	080032eb 	.word	0x080032eb
 80032b8:	080032eb 	.word	0x080032eb
 80032bc:	080032eb 	.word	0x080032eb
 80032c0:	080032e3 	.word	0x080032e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c4:	f7fe fee2 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 80032c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032ca:	e014      	b.n	80032f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032cc:	f7fe fef4 	bl	80020b8 <HAL_RCC_GetPCLK2Freq>
 80032d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032d2:	e010      	b.n	80032f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003410 <UART_SetConfig+0x5c0>)
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032d8:	e00d      	b.n	80032f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032da:	f7fe fe3f 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 80032de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032e0:	e009      	b.n	80032f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032e8:	e005      	b.n	80032f6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80032f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8090 	beq.w	800341e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	4a44      	ldr	r2, [pc, #272]	@ (8003414 <UART_SetConfig+0x5c4>)
 8003304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003308:	461a      	mov	r2, r3
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003310:	005a      	lsls	r2, r3, #1
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	441a      	add	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003322:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	2b0f      	cmp	r3, #15
 8003328:	d916      	bls.n	8003358 <UART_SetConfig+0x508>
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003330:	d212      	bcs.n	8003358 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f023 030f 	bic.w	r3, r3, #15
 800333a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	b29b      	uxth	r3, r3
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	b29a      	uxth	r2, r3
 8003348:	8bfb      	ldrh	r3, [r7, #30]
 800334a:	4313      	orrs	r3, r2
 800334c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	8bfa      	ldrh	r2, [r7, #30]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	e062      	b.n	800341e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800335e:	e05e      	b.n	800341e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003360:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003364:	2b08      	cmp	r3, #8
 8003366:	d828      	bhi.n	80033ba <UART_SetConfig+0x56a>
 8003368:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <UART_SetConfig+0x520>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	08003395 	.word	0x08003395
 8003374:	0800339d 	.word	0x0800339d
 8003378:	080033a5 	.word	0x080033a5
 800337c:	080033bb 	.word	0x080033bb
 8003380:	080033ab 	.word	0x080033ab
 8003384:	080033bb 	.word	0x080033bb
 8003388:	080033bb 	.word	0x080033bb
 800338c:	080033bb 	.word	0x080033bb
 8003390:	080033b3 	.word	0x080033b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003394:	f7fe fe7a 	bl	800208c <HAL_RCC_GetPCLK1Freq>
 8003398:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800339a:	e014      	b.n	80033c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7fe fe8c 	bl	80020b8 <HAL_RCC_GetPCLK2Freq>
 80033a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033a2:	e010      	b.n	80033c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003410 <UART_SetConfig+0x5c0>)
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033a8:	e00d      	b.n	80033c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033aa:	f7fe fdd7 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 80033ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033b0:	e009      	b.n	80033c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033b8:	e005      	b.n	80033c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033c4:	bf00      	nop
    }

    if (pclk != 0U)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d028      	beq.n	800341e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d0:	4a10      	ldr	r2, [pc, #64]	@ (8003414 <UART_SetConfig+0x5c4>)
 80033d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d6:	461a      	mov	r2, r3
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	fbb3 f2f2 	udiv	r2, r3, r2
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	441a      	add	r2, r3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	d910      	bls.n	8003418 <UART_SetConfig+0x5c8>
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033fc:	d20c      	bcs.n	8003418 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	b29a      	uxth	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	e009      	b.n	800341e <UART_SetConfig+0x5ce>
 800340a:	bf00      	nop
 800340c:	40008000 	.word	0x40008000
 8003410:	00f42400 	.word	0x00f42400
 8003414:	08003b44 	.word	0x08003b44
      }
      else
      {
        ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2201      	movs	r2, #1
 8003422:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2201      	movs	r2, #1
 800342a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2200      	movs	r2, #0
 8003432:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2200      	movs	r2, #0
 8003438:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800343a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800343e:	4618      	mov	r0, r3
 8003440:	3730      	adds	r7, #48	@ 0x30
 8003442:	46bd      	mov	sp, r7
 8003444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01a      	beq.n	800355e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003546:	d10a      	bne.n	800355e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b098      	sub	sp, #96	@ 0x60
 8003590:	af02      	add	r7, sp, #8
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800359c:	f7fd fc0e 	bl	8000dbc <HAL_GetTick>
 80035a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d12f      	bne.n	8003610 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b8:	2200      	movs	r2, #0
 80035ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f88e 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d022      	beq.n	8003610 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035de:	653b      	str	r3, [r7, #80]	@ 0x50
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035f0:	e841 2300 	strex	r3, r2, [r1]
 80035f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e6      	bne.n	80035ca <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e063      	b.n	80036d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b04      	cmp	r3, #4
 800361c:	d149      	bne.n	80036b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800361e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003626:	2200      	movs	r2, #0
 8003628:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f857 	bl	80036e0 <UART_WaitOnFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d03c      	beq.n	80036b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	623b      	str	r3, [r7, #32]
   return(result);
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800364c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003656:	633b      	str	r3, [r7, #48]	@ 0x30
 8003658:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800365c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1e6      	bne.n	8003638 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3308      	adds	r3, #8
 8003670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	60fb      	str	r3, [r7, #12]
   return(result);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3308      	adds	r3, #8
 8003688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800368a:	61fa      	str	r2, [r7, #28]
 800368c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	69b9      	ldr	r1, [r7, #24]
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	617b      	str	r3, [r7, #20]
   return(result);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e5      	bne.n	800366a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e012      	b.n	80036d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3758      	adds	r7, #88	@ 0x58
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f0:	e04f      	b.n	8003792 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d04b      	beq.n	8003792 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fa:	f7fd fb5f 	bl	8000dbc <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	429a      	cmp	r2, r3
 8003708:	d302      	bcc.n	8003710 <UART_WaitOnFlagUntilTimeout+0x30>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e04e      	b.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	d037      	beq.n	8003792 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b80      	cmp	r3, #128	@ 0x80
 8003726:	d034      	beq.n	8003792 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b40      	cmp	r3, #64	@ 0x40
 800372c:	d031      	beq.n	8003792 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b08      	cmp	r3, #8
 800373a:	d110      	bne.n	800375e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2208      	movs	r2, #8
 8003742:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f838 	bl	80037ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2208      	movs	r2, #8
 800374e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e029      	b.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800376c:	d111      	bne.n	8003792 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003776:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f81e 	bl	80037ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e00f      	b.n	80037b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4013      	ands	r3, r2
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d0a0      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b095      	sub	sp, #84	@ 0x54
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80037e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e6      	bne.n	80037c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3308      	adds	r3, #8
 80037fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	e853 3f00 	ldrex	r3, [r3]
 8003802:	61fb      	str	r3, [r7, #28]
   return(result);
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3308      	adds	r3, #8
 8003816:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003818:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800381a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800381e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e3      	bne.n	80037f4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003830:	2b01      	cmp	r3, #1
 8003832:	d118      	bne.n	8003866 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	60bb      	str	r3, [r7, #8]
   return(result);
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f023 0310 	bic.w	r3, r3, #16
 8003848:	647b      	str	r3, [r7, #68]	@ 0x44
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003852:	61bb      	str	r3, [r7, #24]
 8003854:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	6979      	ldr	r1, [r7, #20]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	613b      	str	r3, [r7, #16]
   return(result);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e6      	bne.n	8003834 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800387a:	bf00      	nop
 800387c:	3754      	adds	r7, #84	@ 0x54
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_UARTEx_DisableFifoMode+0x16>
 8003898:	2302      	movs	r3, #2
 800389a:	e027      	b.n	80038ec <HAL_UARTEx_DisableFifoMode+0x66>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	@ 0x24
 80038a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80038ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800390c:	2302      	movs	r3, #2
 800390e:	e02d      	b.n	800396c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	@ 0x24
 800391c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f84f 	bl	80039f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2220      	movs	r2, #32
 800395e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003988:	2302      	movs	r3, #2
 800398a:	e02d      	b.n	80039e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	@ 0x24
 8003998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f811 	bl	80039f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d108      	bne.n	8003a12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a10:	e031      	b.n	8003a76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a12:	2308      	movs	r3, #8
 8003a14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a16:	2308      	movs	r3, #8
 8003a18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	0e5b      	lsrs	r3, r3, #25
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	0f5b      	lsrs	r3, r3, #29
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a3a:	7bbb      	ldrb	r3, [r7, #14]
 8003a3c:	7b3a      	ldrb	r2, [r7, #12]
 8003a3e:	4911      	ldr	r1, [pc, #68]	@ (8003a84 <UARTEx_SetNbDataToProcess+0x94>)
 8003a40:	5c8a      	ldrb	r2, [r1, r2]
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a46:	7b3a      	ldrb	r2, [r7, #12]
 8003a48:	490f      	ldr	r1, [pc, #60]	@ (8003a88 <UARTEx_SetNbDataToProcess+0x98>)
 8003a4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	7b7a      	ldrb	r2, [r7, #13]
 8003a5c:	4909      	ldr	r1, [pc, #36]	@ (8003a84 <UARTEx_SetNbDataToProcess+0x94>)
 8003a5e:	5c8a      	ldrb	r2, [r1, r2]
 8003a60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003a64:	7b7a      	ldrb	r2, [r7, #13]
 8003a66:	4908      	ldr	r1, [pc, #32]	@ (8003a88 <UARTEx_SetNbDataToProcess+0x98>)
 8003a68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	08003b5c 	.word	0x08003b5c
 8003a88:	08003b64 	.word	0x08003b64

08003a8c <memset>:
 8003a8c:	4402      	add	r2, r0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d100      	bne.n	8003a96 <memset+0xa>
 8003a94:	4770      	bx	lr
 8003a96:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9a:	e7f9      	b.n	8003a90 <memset+0x4>

08003a9c <__libc_init_array>:
 8003a9c:	b570      	push	{r4, r5, r6, lr}
 8003a9e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ad4 <__libc_init_array+0x38>)
 8003aa0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ad8 <__libc_init_array+0x3c>)
 8003aa2:	1b64      	subs	r4, r4, r5
 8003aa4:	10a4      	asrs	r4, r4, #2
 8003aa6:	2600      	movs	r6, #0
 8003aa8:	42a6      	cmp	r6, r4
 8003aaa:	d109      	bne.n	8003ac0 <__libc_init_array+0x24>
 8003aac:	4d0b      	ldr	r5, [pc, #44]	@ (8003adc <__libc_init_array+0x40>)
 8003aae:	4c0c      	ldr	r4, [pc, #48]	@ (8003ae0 <__libc_init_array+0x44>)
 8003ab0:	f000 f818 	bl	8003ae4 <_init>
 8003ab4:	1b64      	subs	r4, r4, r5
 8003ab6:	10a4      	asrs	r4, r4, #2
 8003ab8:	2600      	movs	r6, #0
 8003aba:	42a6      	cmp	r6, r4
 8003abc:	d105      	bne.n	8003aca <__libc_init_array+0x2e>
 8003abe:	bd70      	pop	{r4, r5, r6, pc}
 8003ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac4:	4798      	blx	r3
 8003ac6:	3601      	adds	r6, #1
 8003ac8:	e7ee      	b.n	8003aa8 <__libc_init_array+0xc>
 8003aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ace:	4798      	blx	r3
 8003ad0:	3601      	adds	r6, #1
 8003ad2:	e7f2      	b.n	8003aba <__libc_init_array+0x1e>
 8003ad4:	08003b74 	.word	0x08003b74
 8003ad8:	08003b74 	.word	0x08003b74
 8003adc:	08003b74 	.word	0x08003b74
 8003ae0:	08003b78 	.word	0x08003b78

08003ae4 <_init>:
 8003ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae6:	bf00      	nop
 8003ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aea:	bc08      	pop	{r3}
 8003aec:	469e      	mov	lr, r3
 8003aee:	4770      	bx	lr

08003af0 <_fini>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	bf00      	nop
 8003af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af6:	bc08      	pop	{r3}
 8003af8:	469e      	mov	lr, r3
 8003afa:	4770      	bx	lr
